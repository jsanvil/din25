{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Desarrollo de Interfaces 2025/26","text":""},{"location":"#resultados-de-aprendizaje","title":"Resultados de Aprendizaje","text":"<ul> <li>RA1. Genera interfaces gr\u00e1ficos de usuario mediante editores visuales utilizando las funcionalidades del editor y adaptando el c\u00f3digo generado.</li> <li>RA2. Genera interfaces naturales de usuario utilizando herramientas visuales.</li> <li>RA3. Crea componentes visuales valorando y empleando herramientas espec\u00edficas.</li> <li>RA4. Dise\u00f1a interfaces gr\u00e1ficas identificando y aplicando criterios de usabilidad y accesibilidad.</li> <li>RA5. Crea informes evaluando y utilizando herramientas gr\u00e1ficas.</li> <li>RA6. Documenta aplicaciones seleccionando y utilizando herramientas espec\u00edficas.</li> <li>RA7. Prepara aplicaciones para su distribuci\u00f3n evaluando y utilizando herramientas espec\u00edficas.</li> </ul>"},{"location":"RRAA_CCEE/","title":"Resultados de Aprendizaje y Criterios de Evaluaci\u00f3n","text":""},{"location":"RRAA_CCEE/#resumen","title":"Resumen","text":"<ul> <li>RA1. GUI</li> <li>RA2. NUI</li> <li>RA3. Componentes</li> <li>RA4. Usabilidad y Accesibilidad</li> <li>RA5. Informes</li> <li>RA6. Documentaci\u00f3n</li> <li>RA7. Distribuci\u00f3n</li> <li>RA8. Pruebas</li> </ul>"},{"location":"RRAA_CCEE/#ra1-genera-interfaces-gr\u00e1ficos-de-usuario-mediante-editores-visuales-utilizando-las-funcionalidades-del-editor-y-adaptando-el-c\u00f3digo-generado","title":"RA1. Genera interfaces gr\u00e1ficos de usuario mediante editores visuales utilizando las funcionalidades del editor y adaptando el c\u00f3digo generado.","text":"<ul> <li>CE1a) Se han analizado las herramientas y librer\u00edas disponibles para la generaci\u00f3n de interfaces gr\u00e1ficos.</li> <li>CE1b) Se ha creado un interfaz gr\u00e1fico utilizando las herramientas de un editor visual.</li> <li>CE1c) Se han utilizado las funciones del editor para ubicar los componentes del interfaz.</li> <li>CE1d) Se han modificado las propiedades de los componentes para adecuarlas a las necesidades de la aplicaci\u00f3n.</li> <li>CE1e) Se ha analizado el c\u00f3digo generado por el editor visual.</li> <li>CE1f) Se ha modificado el c\u00f3digo generado por el editor visual.</li> <li>CE1g) Se han asociado a los eventos las acciones correspondientes.</li> <li>CE1h) Se ha desarrollado una aplicaci\u00f3n que incluye el interfaz gr\u00e1fico obtenido.</li> </ul>"},{"location":"RRAA_CCEE/#ra2-genera-interfaces-naturales-de-usuario-utilizando-herramientas-visuales","title":"RA2. Genera interfaces naturales de usuario utilizando herramientas visuales.","text":"<ul> <li>CE2a) Se han identificado las herramientas disponibles para el aprendizaje autom\u00e1tico relacionadas con las interfaces de usuario.</li> <li>CE2b) Se ha creado una interfaz natural de usuario utilizando las herramientas disponibles.</li> <li>CE2c) Se ha utilizado el reconocimiento de voz para implementar acciones en las interfaces naturales de usuario.</li> <li>CE2d) Se ha incorporado la detecci\u00f3n del movimiento del cuerpo para implementar acciones en las interfaces naturales de usuario.</li> <li>CE2e) Se han integrado elementos de detecci\u00f3n de partes del cuerpo para implementar acciones en las interfaces naturales de usuario.</li> <li>CE2f) Se ha integrado la realidad aumentada en los interfaces de usuario.</li> </ul>"},{"location":"RRAA_CCEE/#ra3-crea-componentes-visuales-valorando-y-empleando-herramientas-espec\u00edficas","title":"RA3. Crea componentes visuales valorando y empleando herramientas espec\u00edficas.","text":"<ul> <li>CE3a) Se han identificado las herramientas para dise\u00f1o y prueba de componentes.</li> <li>CE3b) Se han creado componentes visuales.</li> <li>CE3c) Se han definido sus m\u00e9todos y propiedades con asignaci\u00f3n de valores por defecto.</li> <li>CE3d) Se han determinado los eventos a los que debe responder el componente y se les han asociado las acciones correspondientes.</li> <li>CE3e) Se han realizado pruebas unitarias sobre los componentes desarrollados.</li> <li>CE3f) Se han documentado los componentes creados.</li> <li>CE3g) Se han empaquetado componentes.</li> <li>CE3h) Se han programado aplicaciones cuyo interfaz gr\u00e1fico utiliza los componentes creados.</li> </ul>"},{"location":"RRAA_CCEE/#ra4-dise\u00f1a-interfaces-gr\u00e1ficas-identificando-y-aplicando-criterios-de-usabilidad-y-accesibilidad","title":"RA4. Dise\u00f1a interfaces gr\u00e1ficas identificando y aplicando criterios de usabilidad y accesibilidad.","text":"<ul> <li>CE4a) Se han identificado los principales est\u00e1ndares de usabilidad y accesibilidad.</li> <li>CE4b) Se ha valorado la importancia del uso de est\u00e1ndares para la creaci\u00f3n de interfaces.</li> <li>CE4c) Se han creado diferentes tipos de men\u00fas cuya estructura y contenido siguen los est\u00e1ndares establecidos.</li> <li>CE4d) Se han distribuido las acciones en men\u00fas, barras de herramientas, botones de comando, entre otros, siguiendo un criterio coherente.</li> <li>CE4e) Se han distribuido adecuadamente los controles en la interfaz de usuario.</li> <li>CE4f) Se ha utilizado el tipo de control m\u00e1s apropiado en cada caso.</li> <li>CE4g) Se ha dise\u00f1ado el aspecto de la interfaz de usuario (colores y fuentes entre otros) atendiendo a su legibilidad.</li> <li>CE4h) Se ha verificado que los mensajes generados por la aplicaci\u00f3n son adecuados en extensi\u00f3n y claridad.</li> <li>CE4i) Se han realizado pruebas para evaluar la usabilidad y accesibilidad de la aplicaci\u00f3n.</li> </ul>"},{"location":"RRAA_CCEE/#ra5-crea-informes-evaluando-y-utilizando-herramientas-gr\u00e1ficas","title":"RA5. Crea informes evaluando y utilizando herramientas gr\u00e1ficas.","text":"<ul> <li>CE5a) Se ha establecido la estructura del informe.</li> <li>CE5b) Se han generado informes b\u00e1sicos a partir de diferentes fuentes de datos mediante asistentes.</li> <li>CE5c) Se han establecido filtros sobre los valores a presentar en los informes.</li> <li>CE5d) Se han incluido valores calculados, recuentos y totales.</li> <li>CE5e) Se han incluido gr\u00e1ficos generados a partir de los datos.</li> <li>CE5f) Se han utilizado herramientas para generar el c\u00f3digo correspondiente a los informes de una aplicaci\u00f3n.</li> <li>CE5g) Se ha modificado el c\u00f3digo correspondiente a los informes.</li> <li>CE5h) Se ha desarrollado una aplicaci\u00f3n que incluye informes incrustados.</li> </ul>"},{"location":"RRAA_CCEE/#ra6-documenta-aplicaciones-seleccionando-y-utilizando-herramientas-espec\u00edficas","title":"RA6. Documenta aplicaciones seleccionando y utilizando herramientas espec\u00edficas.","text":"<ul> <li>CE6a) Se han identificado sistemas de generaci\u00f3n de ayudas.</li> <li>CE6b) Se han generado ayudas en los formatos habituales.</li> <li>CE6c) Se han generado ayudas sensibles al contexto.</li> <li>CE6d) Se ha documentado la estructura de la informaci\u00f3n persistente.</li> <li>CE6e) Se ha confeccionado el manual de usuario y la gu\u00eda de referencia.</li> <li>CE6f) Se han confeccionado los manuales de instalaci\u00f3n, configuraci\u00f3n y administraci\u00f3n.</li> <li>CE6g) Se han confeccionado tutoriales.</li> </ul>"},{"location":"RRAA_CCEE/#ra7-prepara-aplicaciones-para-su-distribuci\u00f3n-evaluando-y-utilizando-herramientas-espec\u00edficas","title":"RA7. Prepara aplicaciones para su distribuci\u00f3n evaluando y utilizando herramientas espec\u00edficas.","text":"<ul> <li>CE7a) Se han empaquetado los componentes que requiere la aplicaci\u00f3n.</li> <li>CE7b) Se ha personalizado el asistente de instalaci\u00f3n.</li> <li>CE7c) Se han generado paquetes de instalaci\u00f3n utilizando el entorno de desarrollo.</li> <li>CE7d) Se han generado paquetes de instalaci\u00f3n utilizando herramientas externas.</li> <li>CE7e) Se han firmado digitalmente las aplicaciones para su distribuci\u00f3n.</li> <li>CE7f) Se han generado paquetes instalables en modo desatendido.</li> <li>CE7g) Se ha preparado el paquete de instalaci\u00f3n para que la aplicaci\u00f3n pueda ser correctamente desinstalada.</li> <li>CE7h) Se ha preparado la aplicaci\u00f3n para ser distribuida a trav\u00e9s de diferentes canales de distribuci\u00f3n.</li> </ul>"},{"location":"RRAA_CCEE/#ra8-eval\u00faa-el-funcionamiento-de-aplicaciones-dise\u00f1ando-y-ejecutando-pruebas","title":"RA8. Eval\u00faa el funcionamiento de aplicaciones dise\u00f1ando y ejecutando pruebas.","text":"<ul> <li>CE8a) Se ha establecido una estrategia de pruebas.</li> <li>CE8b) Se han realizado pruebas de integraci\u00f3n de los distintos elementos.</li> <li>CE8c) Se han realizado pruebas de regresi\u00f3n.</li> <li>CE8d) Se han realizado pruebas de volumen y estr\u00e9s.</li> <li>CE8e) Se han realizado pruebas de seguridad.</li> <li>CE8f) Se han realizado pruebas de uso de recursos por parte de la aplicaci\u00f3n.</li> <li>CE8g) Se ha documentado la estrategia de pruebas y los resultados obtenidos.</li> </ul>"},{"location":"entorno/","title":"\ud83d\udd27 Entorno de trabajo","text":"<p>En este curso utilizaremos las siguientes tecnolog\u00edas:</p> <ul> <li>Repositorios de Git alojados en GitHub para el seguimiento y entrega de las pr\u00e1cticas y proyectos.</li> <li>Visual Studio Code como editor de c\u00f3digo.<ul> <li>Alternativamente se puede utilizar VSCodium que es una versi\u00f3n de c\u00f3digo abierto de VSCode.</li> </ul> </li> <li>Node.js como entorno de ejecuci\u00f3n.<ul> <li>nvm para la gesti\u00f3n de versiones de Node.js en el aula de inform\u00e1tica.</li> </ul> </li> <li>Electron para el desarrollo de aplicaciones de escritorio multiplataforma.</li> <li>Angular para el desarrollo de interfaces gr\u00e1ficas.</li> <li>TypeScript como lenguaje de programaci\u00f3n principal.</li> </ul>"},{"location":"entorno/#visual-studio-code","title":"Visual Studio Code","text":"<p>Para la instalaci\u00f3n de VSCode, descargar el paquete de instalaci\u00f3n que corresponda al sistema operativo de la p\u00e1gina de Visual Studio Code y realizar la instalaci\u00f3n t\u00edpica.</p>"},{"location":"entorno/#versi\u00f3n-portable","title":"Versi\u00f3n portable","text":"<p>Si no se dispone de permisos de administrador para instalar software, se puede utilizar la versi\u00f3n portable de VSCode.</p> <p>En la p\u00e1gina oficial de descargas disponemos de empaquetados <code>.zip</code> para MS Windows y <code>.tar.gz</code> para Linux.</p> <p>S\u00f3lo hay que descargar el archivo, descomprimir y ejecutar el archivo <code>code</code>.</p>"},{"location":"entorno/#nodejs-npm-y-nvm","title":"<code>Node.js</code> <code>npm</code> y <code>nvm</code>","text":"<p>npm es el gestor de paquetes de Node.js. Para instalarlo se debe seguir la gu\u00eda en la p\u00e1gina de nodejs.org.</p>"},{"location":"entorno/#instalaci\u00f3n-en-el-perfil-local-de-usuario-para-sistemas-linux","title":"Instalaci\u00f3n en el perfil local de usuario para sistemas Linux","text":"<p>Alternativamente, npm se puede instalar en el perfil local del usuario, para ello utilizaremos nvm que es un gestor de versiones de node que nos permitir\u00e1 utilizar la versi\u00f3n que escojamos nvm-sh</p> <p>Para instalar nvm necesitamos ejecutar el siguiente comando, aunque es recomendable consultar la documentaci\u00f3n de nvm para comprobar que no haya cambiado:</p> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash\n</code></pre> <p>wget</p> <p>Si no se dispone de <code>curl</code>, se puede utilizar <code>wget</code>:</p> <pre><code>wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash\n</code></pre> <p>Cuando termine la instalaci\u00f3n de nvm, tendremos que abrir un nuevo terminal para que reconozca la ruta del ejecutable y proceder a instalar la \u00faltima versi\u00f3n LTS de Node.js de la siguiente forma:</p> <pre><code>nvm install --lts\n</code></pre>"},{"location":"entorno/#git-github-y-github-classroom","title":"Git, GitHub y GitHub Classroom","text":"<ul> <li>Git es un sistema de control de versiones usado com\u00fanmente para c\u00f3digo fuente.</li> <li>GitHub es una plataforma de desarrollo colaborativo que utiliza Git y que nos permitir\u00e1 subir nuestro c\u00f3digo a la nube.</li> <li>GitHub Classroom es una herramienta que nos permitir\u00e1 recibir las tareas y ejercicios de la asignatura.</li> </ul> <p>Por lo tanto ser\u00e1 necesario:</p> <ul> <li> <p>Si no tenemos cuenta en GitHub, Crear una cuenta de GitHub utilizando la cuenta de correo corporativa de la GVA (usuario@alu.edu.gva).</p> <ul> <li>Utiliza el mismo nombre de usuario para la cuenta GitHub.</li> </ul> <p>Ejemplo: Para la cuenta corporativa es <code>jacsanvil@alu.edu.gva</code> el usuario de GitHub debe ser <code>jacsanvil</code></p> </li> <li> <p>Instalar Git</p> <p>Si no est\u00e1s familiarizado en c\u00f3mo funciona git, se recomienda leer la Gu\u00eda de Git. </p> </li> <li> <p>Para tareas sencillas, se recomienda el gestor integrado de Visual Studio Code.</p> </li> <li>Para tareas m\u00e1s complejas, se recomienda utilizar la herramienta de l\u00ednea de comandos de Git o un cliente gr\u00e1fico como GitHub Desktop.</li> </ul>"},{"location":"projects/ev1_habit_tracker/","title":"Proyecto 1\u00aa evaluaci\u00f3n: Registro de H\u00e1bitos (Habit Tracker)","text":"<ul> <li>I. Datos Generales</li> <li>II. Estructura y Modelado de Datos<ul> <li>A. Estructura del Proyecto</li> <li>B. Modelado de Datos<ul> <li>1. Interfaz de H\u00e1bito Principal (<code>Habit</code>)</li> <li>2. Interfaz de Progreso Diario (<code>HabitProgress</code>)</li> <li>3. Datos Iniciales</li> </ul> </li> </ul> </li> <li>III. Requisitos Funcionales y Persistencia<ul> <li>A. Funcionalidades Esenciales</li> <li>B. Filtrado y Ordenaci\u00f3n</li> <li>C. Persistencia (API REST Simulada)</li> <li>D. Mockup de ejemplo</li> </ul> </li> <li>IV. Enfoque en los Resultados de Aprendizaje<ul> <li>RA 1: Generaci\u00f3n y Adaptaci\u00f3n de Interfaces Gr\u00e1ficas</li> <li>RA 3: Creaci\u00f3n de Componentes Visuales Reutilizables</li> <li>RA 4: Dise\u00f1o, Usabilidad y Accesibilidad</li> </ul> </li> <li>V. Entrega y Documentaci\u00f3n</li> <li>VI. Evaluaci\u00f3n</li> </ul>"},{"location":"projects/ev1_habit_tracker/#i-datos-generales","title":"I. Datos Generales","text":"<ul> <li> <p>Objetivo</p> <p>Crear una aplicaci\u00f3n de escritorio multiplataforma con una interfaz basada en componentes para gestionar el progreso de h\u00e1bitos, simulando la persistencia mediante una API REST.</p> <p>Este proyecto simula un MVP (Minimum Viable Product o Producto viable m\u00ednimo), es decir, una versi\u00f3n b\u00e1sica pero funcional de una aplicaci\u00f3n real. </p> <p>El objetivo es centrarse en los aspectos fundamentales del desarrollo de interfaces gr\u00e1ficas y la interacci\u00f3n con servicios de datos, sin entrar en detalles complejos de producci\u00f3n o despliegue.</p> <p>Este tipo de aplicaci\u00f3n es com\u00fan en el desarrollo de software, donde se busca validar ideas y funcionalidades antes de invertir en un desarrollo completo.</p> </li> <li> <p>Ponderaci\u00f3n: 60% sobre la calificaci\u00f3n de la primera evaluaci\u00f3n.</p> </li> <li>Fecha L\u00edmite de Entrega: 28/11/2025.</li> <li>Resultados de Aprendizaje: RA1, RA3, RA4.</li> <li>Repositorio GitHub Classroom: https://classroom.github.com/a/jxCxrpk4</li> </ul>"},{"location":"projects/ev1_habit_tracker/#ii-estructura-y-modelado-de-datos","title":"II. Estructura y Modelado de Datos","text":""},{"location":"projects/ev1_habit_tracker/#a-estructura-del-proyecto","title":"A. Estructura del Proyecto","text":"<ol> <li>Estructura y componentes: El c\u00f3digo debe estar bien estructurado en utilizando componentes y separando archivos HTML, TS y CSS. Se deben utilizar interfaces para representar el modelado de datos.</li> <li>Tecnolog\u00edas Base:<ul> <li>Electron. La aplicaci\u00f3n debe estar preparada para ejecutarse en Electron, aunque no se pide un ejecutable empaquetado.</li> <li>Angular 20. Se debe utilizar la \u00faltima versi\u00f3n de Angular y utilizar Angular CLI para la generaci\u00f3n del proyecto y componentes.</li> <li>Estilos. Se debe utilizar Bootstrap (u otra librer\u00eda CSS) para el dise\u00f1o visual.</li> <li>json-server para simular la API REST.</li> </ul> </li> </ol>"},{"location":"projects/ev1_habit_tracker/#b-modelado-de-datos","title":"B. Modelado de Datos","text":"<p>La aplicaci\u00f3n debe definir un modelo de datos robusto para el h\u00e1bito y su seguimiento:</p>"},{"location":"projects/ev1_habit_tracker/#1-interfaz-de-h\u00e1bito-principal-habit","title":"1. Interfaz de H\u00e1bito Principal (<code>Habit</code>)","text":"Atributo Tipo Notas <code>id</code> <code>string</code> Identificador \u00fanico (proporcionado por <code>json-server</code>). <code>name</code> <code>string</code> Obligatorio. M\u00e1ximo 50 caracteres. <code>category</code> <code>string</code> Clasificaci\u00f3n (ej. Salud, Estudio, F\u00edsica, etc.). <code>goalType</code> <code>string</code> Tipo de objetivo (<code>'daily'</code>, <code>'weekly'</code>, <code>'monthly'</code>). <code>status</code> <code>string</code> Estado actual (<code>'In Progress', 'Completed', 'Paused'</code>). <code>notes</code> <code>string</code> M\u00e1ximo 200 caracteres. <code>progress</code> <code>HabitProgress[]</code> Array que almacena los registros hist\u00f3ricos."},{"location":"projects/ev1_habit_tracker/#2-interfaz-de-progreso-diario-habitprogress","title":"2. Interfaz de Progreso Diario (<code>HabitProgress</code>)","text":"<p>Representa el cumplimiento registrado en una fecha espec\u00edfica.</p> Atributo Tipo Notas <code>date</code> <code>string</code> Fecha de registro (Formato ISO Date). ej: <code>'2023-10-15'</code> <code>status</code> <code>string</code> Estado de cumplimiento (<code>'Completed', 'Missed', 'Skipped'</code>)."},{"location":"projects/ev1_habit_tracker/#3-datos-iniciales","title":"3. Datos Iniciales","text":"<p>Se debe proporcionar un conjunto inicial de datos en un archivo <code>db.json</code> para <code>json-server</code>, con al menos 5 h\u00e1bitos predefinidos que cubran diferentes categor\u00edas y tipos de objetivos.</p> db.json<pre><code>{\n  \"habits\": [\n    {\n      \"id\": \"1\",\n      \"name\": \"Ejercicio Diario\",\n      \"category\": \"Salud\",\n      \"goalType\": \"daily\",\n      \"status\": \"In Progress\",\n      \"notes\": \"Hacer al menos 30 minutos de ejercicio.\",\n      \"progress\": [\n        {\n          \"date\": \"2025-10-01\",\n          \"status\": \"Completed\"\n        },\n        {\n          \"date\": \"2025-10-02\",\n          \"status\": \"Missed\"\n        },\n        {\n          \"date\": \"2025-10-03\",\n          \"status\": \"Skipped\"\n        }\n      ]\n    },\n    {\n      \"id\": \"2\",\n      \"name\": \"Leer Libros\",\n      \"category\": \"Desarrollo Personal\",\n      \"goalType\": \"weekly\",\n      \"status\": \"Paused\",\n      \"notes\": \"Leer al menos 3 cap\u00edtulos por semana.\",\n      \"progress\": [\n        {\n            \"date\": \"2025-09-28\",\n            \"status\": \"Completed\"\n        }\n      ]\n    },\n    {\n      \"id\": \"3\",\n      \"name\": \"Meditaci\u00f3n\",\n      \"category\": \"Salud Mental\",\n      \"goalType\": \"daily\",\n      \"status\": \"In Progress\",\n      \"notes\": \"Meditar al menos 10 minutos cada d\u00eda.\",\n      \"progress\": []\n    },\n    {\n      \"id\": \"4\",\n      \"name\": \"Aprender un Nuevo Idioma\",\n      \"category\": \"Educaci\u00f3n\",\n      \"goalType\": \"monthly\",\n      \"status\": \"Completed\",\n      \"notes\": \"Completar una unidad did\u00e1ctica cada mes.\",\n      \"progress\": [\n        {\n          \"date\": \"2025-09-15\",\n          \"status\": \"Skipped\"\n        },\n        {\n          \"date\": \"2025-10-15\",\n          \"status\": \"Completed\"\n        }\n      ]\n    },\n    {\n      \"id\": \"5\",\n      \"name\": \"Limpiar la Casa\",\n      \"category\": \"Hogar\",\n      \"goalType\": \"weekly\",\n      \"status\": \"In Progress\",\n      \"notes\": \"Realizar tareas de limpieza cada fin de semana.\",\n      \"progress\": []\n    }\n  ]\n}\n</code></pre>"},{"location":"projects/ev1_habit_tracker/#iii-requisitos-funcionales-y-persistencia","title":"III. Requisitos Funcionales y Persistencia","text":""},{"location":"projects/ev1_habit_tracker/#a-funcionalidades-esenciales","title":"A. Funcionalidades Esenciales","text":"<ol> <li>Listado y Visualizaci\u00f3n: El listado debe actualizarse autom\u00e1ticamente con los cambios. El estado/progreso del h\u00e1bito debe representarse visualmente con colores y/o iconos.</li> <li>A\u00f1adir/Editar: Mostrar\u00e1 un formulario que debe ser validado y debe mostrar los errores.<ul> <li>La edici\u00f3n debe permitir cancelar y, si hay cambios, pedir confirmaci\u00f3n al usuario.</li> </ul> </li> <li>Eliminar: Debe pedir confirmaci\u00f3n al usuario antes de eliminar un elemento (h\u00e1bito o progreso)</li> <li>Cambiar Estado/Registrar: Debe haber un mecanismo simple para registrar el progreso diario o cambiar el estado del h\u00e1bito.</li> <li>Detalles: Al seleccionar un h\u00e1bito, se debe desplegar una vista detallada con toda la informaci\u00f3n, incluyendo el historial de progreso.<ul> <li>Incluir Botones para \"Editar\" y \"Borrar\" el h\u00e1bito.</li> <li>Debe mostrar un formulario para agregar un nuevo progreso.</li> <li>El historial de progresos debe mostrarse siempre ordenado, los m\u00e1s recientes primero.</li> <li>Cada elemento de progreso incluir\u00e1 un bot\u00f3n que permita borrarlo.</li> </ul> </li> <li>Sin Datos: Si no hay h\u00e1bitos registrados, o no hay progresos dentro de un h\u00e1bito, se debe mostrar un mensaje adecuado e instrucciones para a\u00f1adir el primer h\u00e1bito.</li> </ol>"},{"location":"projects/ev1_habit_tracker/#b-filtrado-y-ordenaci\u00f3n","title":"B. Filtrado y Ordenaci\u00f3n","text":"<ol> <li>Filtros: Se deben poder combinar varios filtros: por Categor\u00eda, Tipo de H\u00e1bito, y B\u00fasqueda textual (filtrando si el texto est\u00e1 contenido en el <code>name</code> o <code>notes</code>).<ul> <li>Debe existir un bot\u00f3n para limpiar filtros.</li> <li>Si no hay resultados tras aplicar los filtros, se debe mostrar un mensaje adecuado.</li> </ul> </li> <li>Ordenar: Los elementos deben ser ordenables en orden ascendente y descendente por, al menos, tres atributos (ej. Nombre, Categor\u00eda y Estado).</li> </ol>"},{"location":"projects/ev1_habit_tracker/#c-persistencia-api-rest-simulada","title":"C. Persistencia (API REST Simulada)","text":"<p>El almacenamiento se realiza mediante <code>json-server</code> (simulando una conexi\u00f3n as\u00edncrona a la base de datos):</p> <ol> <li>Servicio: Se deber\u00e1 implementar un servicio de Angular para centralizar las llamadas al almacenamiento de datos.</li> <li>Operaciones As\u00edncronas: Las operaciones de persistencia (C/R/U/D) deben realizarse en segundo plano, sin bloquear la interfaz.</li> <li>Feedback: Se debe mostrar un mensaje de \u00e9xito o error despu\u00e9s de cada operaci\u00f3n de persistencia (leer, crear, modificar y borrar).</li> <li>Llamadas HTTP: La aplicaci\u00f3n Angular debe utilizar <code>HttpClient</code> para realizar peticiones (GET, POST, PUT/PATCH, DELETE) para gestionar los datos.</li> </ol>"},{"location":"projects/ev1_habit_tracker/#d-mockup-de-ejemplo","title":"D. Mockup de ejemplo","text":"<p>Se proporciona un mockup (boceto) de ejemplo para guiar el dise\u00f1o visual de la aplicaci\u00f3n, aunque no es obligatorio seguirlo y se pueden hacer modificaciones seg\u00fan las decisiones de dise\u00f1o.</p> <p></p> <p>Generado con la herramienta Excalidraw - Enlace al boceto</p>"},{"location":"projects/ev1_habit_tracker/#iv-enfoque-en-los-resultados-de-aprendizaje","title":"IV. Enfoque en los Resultados de Aprendizaje","text":"<p>El cumplimiento de los Criterios de Evaluaci\u00f3n (CE) debe ser visible en el desarrollo.</p>"},{"location":"projects/ev1_habit_tracker/#ra-1-generaci\u00f3n-y-adaptaci\u00f3n-de-interfaces-gr\u00e1ficas","title":"RA 1: Generaci\u00f3n y Adaptaci\u00f3n de Interfaces Gr\u00e1ficas","text":"<p>El proyecto debe demostrar la capacidad de manejar herramientas y adaptar el c\u00f3digo generado o base:</p> <ul> <li>Uso de Herramientas (CE a, c): Se debe documentar el an\u00e1lisis de las herramientas (Angular CLI, Electron, librer\u00edas) utilizadas para la generaci\u00f3n de interfaces. Se debe utilizar el concepto de layout para ubicar los componentes del interfaz (como si se usara un editor visual).</li> <li>Modificaci\u00f3n del C\u00f3digo (CE e, f, d): Se debe analizar y modificar el c\u00f3digo generado por Angular/TypeScript/HTML para integrar la l\u00f3gica de negocio y las llamadas a servicios de datos. Las propiedades de los componentes deben modificarse para adecuarse a las necesidades de la aplicaci\u00f3n (ej., mostrar el estado visualmente).</li> <li>Control de Eventos (CE g): Se deben asociar las interacciones de usuario (como hacer clic en el bot\u00f3n de registro de un h\u00e1bito) con las acciones (m\u00e9todos TypeScript) correspondientes.</li> </ul>"},{"location":"projects/ev1_habit_tracker/#ra-3-creaci\u00f3n-de-componentes-visuales-reutilizables","title":"RA 3: Creaci\u00f3n de Componentes Visuales Reutilizables","text":"<p>El dise\u00f1o en Angular facilita la creaci\u00f3n de componentes reutilizables:</p> <ul> <li>Creaci\u00f3n de Componentes (CE b, h): Se deben crear al menos dos componentes visuales personalizados y reutilizables (ej., <code>HabitCard</code> para cada h\u00e1bito, <code>HabitProgress</code> para la visualizaci\u00f3n cada elemento de progreso) . La aplicaci\u00f3n debe hacer uso de estos componentes en el interfaz.</li> <li>Definici\u00f3n (CE c, d): Se deben definir claramente los m\u00e9todos y propiedades (utilizando <code>@Input()</code> en Angular) con asignaci\u00f3n de valores por defecto si es necesario. Se deben determinar los eventos a los que responde el componente (utilizando <code>@Output()</code> en Angular) y asociar las acciones.</li> <li>Pruebas (CE e): Se deben realizar pruebas sobre los componentes desarrollados para verificar su funcionamiento de forma aislada.</li> <li>Documentaci\u00f3n y Empaquetado (CE f, g): Se deben documentar los componentes creados (propiedades, m\u00e9todos, eventos). Se debe simular el empaquetado de los componentes.</li> </ul>"},{"location":"projects/ev1_habit_tracker/#ra-4-dise\u00f1o-usabilidad-y-accesibilidad","title":"RA 4: Dise\u00f1o, Usabilidad y Accesibilidad","text":"<p>El dise\u00f1o debe estar planificado con criterios de calidad para el usuario final:</p> <ul> <li>Est\u00e1ndares y Coherencia (CE a, b, c, d): Se deben identificar los principales est\u00e1ndares de usabilidad y accesibilidad y valorar su importancia. Se deben dise\u00f1ar los men\u00fas y la distribuci\u00f3n de acciones (filtros, botones de comando) siguiendo un criterio coherente y est\u00e1ndares establecidos.</li> <li>Controles y Legibilidad (CE e, f, g): Se debe asegurar la distribuci\u00f3n adecuada de los controles. Se debe utilizar el tipo de control m\u00e1s apropiado en cada caso (ej., un toggle para objetivos binarios, input num\u00e9rico para contables, dropdowns para categor\u00edas ). El aspecto de la interfaz (colores, fuentes) debe garantizar la legibilidad.</li> <li>Feedback y Pruebas (CE h, i): Se debe verificar que los mensajes generados por la aplicaci\u00f3n (errores de validaci\u00f3n de formulario, mensajes de \u00e9xito/error de persistencia) sean adecuados en extensi\u00f3n y claridad. Se deben realizar pruebas para evaluar la usabilidad y accesibilidad de la aplicaci\u00f3n (ej., contraste de colores, tama\u00f1o de fuentes, mensajes claros, etc.).</li> </ul>"},{"location":"projects/ev1_habit_tracker/#v-entrega-y-documentaci\u00f3n","title":"V. Entrega y Documentaci\u00f3n","text":"<ol> <li> <p>Repositorio de GitHub Classroom con todo el c\u00f3digo fuente del proyecto:</p> <p>La entrega se realizar\u00e1 a trav\u00e9s del repositorio creado en GitHub Classroom: * [https://classroom.github.com/a/jxCxrpk4][https://classroom.github.com/a/jxCxrpk4]</p> <p>En caso de problemas t\u00e9cnicos con GitHub Classroom, se debe notificar al profesor con antelaci\u00f3n a la fecha l\u00edmite de entrega para buscar una soluci\u00f3n adecuada.</p> </li> <li> <p>Documentaci\u00f3n: Incluir archivo <code>README.md</code> en la ra\u00edz del proyecto con la siguiente informaci\u00f3n:</p> <ul> <li>Nombre del proyecto, Nombre y apellidos del alumno o alumna.</li> <li>Detalles de implementaci\u00f3n, decisiones tomadas y dificultades encontrados.</li> <li>Justificaci\u00f3n de las decisiones de dise\u00f1o respecto a la usabilidad y accesibilidad (RA 4).</li> <li>Documentaci\u00f3n t\u00e9cnica de los componentes visuales creados (RA 3).</li> <li>Instrucciones para ejecutar la aplicaci\u00f3n (instalaci\u00f3n de dependencias, comandos para iniciar <code>json-server</code> y la aplicaci\u00f3n en Electron).</li> <li>Validaci\u00f3n de Requisitos. Se debe incluir una lista de verificaci\u00f3n indicando el cumplimiento de cada requisito funcional.</li> <li>Pruebas realizadas y resultados obtenidos.</li> </ul> </li> <li>Seguimiento: El repositorio de GitHub Classroom debe reflejar el progreso del proyecto.<ul> <li>Se debe realizar al menos 1 commit por cada d\u00eda de clase, los mensajes deben tener sentido, ser concisos e informativos.</li> </ul> </li> <li>Ejecuci\u00f3n del Proyecto: La aplicaci\u00f3n debe poder abrirse sin errores y debe estar preparada para ejecutarse en Electron (aunque no se pida un ejecutable empaquetado).</li> <li>Calidad del C\u00f3digo: El c\u00f3digo debe estar limpio, utilizar nombres de variables, m\u00e9todos y clases significativos, e incluir comentarios donde sea necesario para mejorar la comprensi\u00f3n.</li> </ol>"},{"location":"projects/ev1_habit_tracker/#vi-evaluaci\u00f3n","title":"VI. Evaluaci\u00f3n","text":"<p>La evaluaci\u00f3n se basar\u00e1 en:</p> <ul> <li>Cumplimiento de los requisitos funcionales.</li> <li>Calidad del dise\u00f1o y usabilidad de la interfaz.</li> <li>Implementaci\u00f3n t\u00e9cnica y uso adecuado de tecnolog\u00edas.</li> <li>Documentaci\u00f3n y justificaci\u00f3n de decisiones de dise\u00f1o.</li> <li>Enfoque y cumplimiento de los Resultados de Aprendizaje (RA 1, RA 3, RA 4).</li> <li>Calidad del c\u00f3digo y buenas pr\u00e1cticas de desarrollo.</li> <li>Seguimiento del proyecto en el repositorio de GitHub Classroom.</li> <li>Entrega puntual del proyecto.</li> </ul> <p>Notas Importantes</p> <p>En caso de existir dudas acerca de la autor\u00eda del proyecto, o el uso indiscriminado de herramientas autom\u00e1ticas de generaci\u00f3n de c\u00f3digo, se podr\u00e1 solicitar una entrevista t\u00e9cnica para verificar los conocimientos del alumno o alumna sobre el desarrollo realizado.</p> <p>Cualquier intento de plagio o copia ser\u00e1 sancionado seg\u00fan las normas acad\u00e9micas vigentes.</p> <p>No se aceptar\u00e1n proyectos entregados fuera de plazo o que no hayan cumplido los requisitos de seguimiento en el repositorio.</p> <p>En caso de incidencias t\u00e9cnicas, se debe notificar al profesor con antelaci\u00f3n a la fecha l\u00edmite de entrega para buscar una soluci\u00f3n adecuada.</p>"},{"location":"ud01_intro/","title":"UD1: Introducci\u00f3n","text":"<ul> <li>1.1 - Introducci\u00f3n a Electron</li> <li>1.2 - Primer proyecto con Electron<ul> <li>1.2.1 \u270d\ufe0f Actividad: Primera aplicaci\u00f3n con Angular y Electron</li> </ul> </li> <li>1.3 - Interfaz gr\u00e1fica de usuario (GUI)</li> </ul>"},{"location":"ud01_intro/01_electron_intro/","title":"1.1 Introducci\u00f3n a Electron","text":"<ul> <li>Principales frameworks para aplicaciones multiplataforma<ul> <li>Tabla Comparativa de Frameworks de Desarrollo Multiplataforma</li> </ul> </li> <li>Requisitos<ul> <li>Conocimientos previos</li> <li>Herramientas necesarias<ul> <li>Editor de c\u00f3digo</li> <li>L\u00ednea de comandos</li> <li>Git y GitHub</li> </ul> </li> <li>Node.js y npm</li> </ul> </li> <li>Electron reloader</li> </ul>"},{"location":"ud01_intro/01_electron_intro/#principales-frameworks-para-aplicaciones-multiplataforma","title":"Principales frameworks para aplicaciones multiplataforma","text":"<p>Existen varios frameworks para el desarrollo de aplicaciones multiplataforma, cada uno con sus propias caracter\u00edsticas, ventajas y desventajas. A continuaci\u00f3n se presenta una tabla comparativa de los m\u00e1s populares:</p>"},{"location":"ud01_intro/01_electron_intro/#tabla-comparativa-de-frameworks-de-desarrollo-multiplataforma","title":"Tabla Comparativa de Frameworks de Desarrollo Multiplataforma","text":"Caracter\u00edstica Electron Flutter Compose Multiplatform React Native Ionic Plataformas de destino Windows, macOS, Linux iOS, Android, Web, Desktop iOS, Android, Desktop iOS, Android iOS, Android, Web Lenguaje de Programaci\u00f3n HTML, CSS, JavaScript Dart Kotlin JavaScript / TypeScript HTML, CSS, JavaScript Rendimiento Bueno (Chromium) Excelente (widgets propios) Excelente (c\u00f3digo nativo) Muy bueno (c\u00f3digo nativo) Bueno (WebView) Curva de Aprendizaje Baja para desarrolladores web Moderada Baja para desarrolladores Kotlin Baja para desarrolladores web Baja para desarrolladores web Empresa Desarrolladora GitHub Google JetBrains Meta Drifty Co. Ejemplos de Apps Famosas VS Code, Discord, Slack Google Pay, Alibaba, BMW JetBrains, Intuit Instagram, Facebook, Airbnb MarketWatch, Sworkit Tipo de App De escritorio Nativa Nativa Nativa H\u00edbrida/PWA Ecosistema y Comunidad Muy grande y activa En crecimiento r\u00e1pido y muy activa En r\u00e1pido crecimiento Enorme, muy activa Grande y activa Coste Gratuito y de c\u00f3digo abierto Gratuito y de c\u00f3digo abierto Gratuito y de c\u00f3digo abierto Gratuito y de c\u00f3digo abierto Gratuito y de c\u00f3digo abierto <p>En este curso nos centraremos en el desarrollo con Electron debido a su facilidad de uso y su capacidad para crear aplicaciones de escritorio multiplataforma con tecnolog\u00edas web familiares.</p>"},{"location":"ud01_intro/01_electron_intro/#requisitos","title":"Requisitos","text":"<p>Electron es un framework para crear aplicaciones de escritorio usando JavaScript, HTML y CSS. Incorpora Chromium y Node.js en un \u00fanico archivo binario. Permite crear aplicaciones multiplataforma que funcionan en Windows, macOS y Linux con una \u00fanica base com\u00fan de c\u00f3digo JavaScript.</p>"},{"location":"ud01_intro/01_electron_intro/#conocimientos-previos","title":"Conocimientos previos","text":"<p>Electron es una capa de envoltorio nativa para aplicaciones web y se ejecuta en un entorno Node.js. Se asume que el alumnado ha adquirido los conocimientos b\u00e1sicos de desarrollo web vistos en el m\u00f3dulo de primer curso de DAM \"Lenguajes de marcas y sistemas de gesti\u00f3n de informaci\u00f3n\" (LMSGI). Como apoyo se recomendan los siguientes recursos:</p> <ul> <li>Aprende desarrollo web (MDN Web Docs)</li> <li>Introducci\u00f3n a Node.js</li> </ul>"},{"location":"ud01_intro/01_electron_intro/#herramientas-necesarias","title":"Herramientas necesarias","text":""},{"location":"ud01_intro/01_electron_intro/#editor-de-c\u00f3digo","title":"Editor de c\u00f3digo","text":"<p>Es necesario un editor de texto para escribir el c\u00f3digo, lo m\u00e1s recomendado es el uso de un IDE (Entorno de Desarrollo Integrado). Se recomienda el uso de Visual Studio Code, al ser uno de los m\u00e1s utilizados en el mundo del desarrollo, con ls integraci\u00f3n de m\u00faltiples herramientas que permiten agilizar el trabajo, como el control de versiones git, el terminal integrado de l\u00ednea de comandos o el depurador, entre muchas otras.</p>"},{"location":"ud01_intro/01_electron_intro/#l\u00ednea-de-comandos","title":"L\u00ednea de comandos","text":"<p>A lo largo del curso se requerir\u00e1 el uso de varias interfaces de l\u00ednea de comandos (CLIs). Se pueden teclear estos comandos v\u00eda terminal:</p> <ul> <li>Windows: Command Prompt, PowerShell, Terminal</li> <li>macOS: Terminal</li> <li>Linux: var\u00eda dependiendo de la distribuci\u00f3n (ej: Terminal GNOME, Konsole)</li> </ul> <p>La mayor\u00eda de los editores de c\u00f3digo tambi\u00e9n vienen con una terminal integrada.</p>"},{"location":"ud01_intro/01_electron_intro/#git-y-github","title":"Git y GitHub","text":"<p>Git es un sistema de control de versiones usado com\u00fanmente para c\u00f3digo fuente, y GitHub es una plataforma de desarrollo colaborativa construida adem\u00e1s de ella. Aunque ninguno de los dos es estrictamente necesario para construir una aplicaci\u00f3n Electron usaremos GitHub para realizar las entregas. Por lo tanto ser\u00e1 necesario:</p> <ul> <li> <p>Crear una cuenta de GitHub utilizando la cuenta de correo corporativa de la GVA (usuario@alu.edu.gva).</p> <ul> <li>Utiliza el mismo nombre de usuario para la cuenta GitHub.</li> </ul> <p>Ejemplo: Para la cuenta corporativa es <code>jacsanvil@alu.edu.gva</code> el usuario de GitHub debe ser <code>jacsanvil</code></p> </li> <li> <p>Instalar Git</p> <p>Si no est\u00e1s familiarizado en como funciona git, se recomienda leer la Gu\u00eda de Git. </p> </li> <li> <p>Se puede utilizar <code>git</code> mediante la terminal o la interfaz gr\u00e1fica de GitHub Desktop.</p> </li> <li>Para tareas sencillas, se recomienda el gestor integrado de Visual Studio Code.</li> </ul>"},{"location":"ud01_intro/01_electron_intro/#nodejs-y-npm","title":"Node.js y npm","text":"<p>Para comenzar a desarrollar una aplicaci\u00f3n Electron es necesario instalar Node.js y el gestor de paquetes npm. Es recomendable utilizar la \u00faltima versi\u00f3n con soporte a largo plazo (LTS).</p> <p>Para comprobar que Node.js se ha instalado correctamente, se puede usar la opci\u00f3n <code>-v</code> cuando en los comandos <code>node</code> y <code>npm</code>. Estos deben imprimir las versiones instaladas.</p> Terminal<pre><code>$ node -v\nv22.19.0\n$ npm -v\n10.9.3\n</code></pre> <p>NOTA</p> <p>Aunque es necesario tener Node.js instalado localmente para desarrollar un proyecto en Electron, el ejecutable final, viene empaquetado con su propio Node.js. Esto significa que los usuarios finales no necesitan instalar Node.js como requisito para ejecutar la aplicaci\u00f3n.</p>"},{"location":"ud01_intro/01_electron_intro/#electron-reloader","title":"Electron reloader","text":"<p>Para que los cambios en el c\u00f3digo se reflejen en la aplicaci\u00f3n, se puede utilizar el paquete electron-reloader que se instala como dependencia de desarrollo.</p> Terminal<pre><code>$ npm install --save-dev electron-reloader\n</code></pre> <p>Despu\u00e9s, en el archivo <code>main.js</code> se a\u00f1ade el siguiente c\u00f3digo:</p> main.js<pre><code>const { app, BrowserWindow } = require('electron')\n\ntry {\n    require('electron-reloader')(module, {\n        debug: true,\n        watchRenderer: true\n    })\n} catch(_) {}\n\n// ...\n</code></pre> <p>Ahora, cuando lancemos la aplicaci\u00f3n con <code>npm start</code> se recargar\u00e1 autom\u00e1ticamente cuando se guarden los cambios en el c\u00f3digo.</p>"},{"location":"ud01_intro/021_actividad/","title":"1.2.1 \u270d\ufe0f Actividad: Preparar el entorno y crear la primera aplicaci\u00f3n en Electron","text":"<p>Para realizar la actividad se debe seguir los siguientes pasos:</p> <ol> <li> <p>Acepta la invitaci\u00f3n a la actividad en GitHub Classroom: https://classroom.github.com/a/FU7tJcIi</p> <ul> <li>Selecciona tu correo corporativo del listado.</li> <li>Acepta la actividad.</li> </ul> <p>Warning</p> <p>Debes utilizar tu cuenta corporativa de la GVA</p> <p>Con esto lo que se consigue es crear un repositorio remoto donde se subir\u00e1 el c\u00f3digo de la actividad.</p> </li> <li> <p>Copia la URL del repositorio creado.</p> Ejemplo de URL del repositorio<pre><code>https://github.com/DAM-DIN-25/act1-electron-intro-jsanvil\n</code></pre> </li> <li> <p>Clona el repositorio en tu m\u00e1quina local</p> <p>Puedes utilizar VS Code para clonar el repositorio o la terminal con el comando:</p> Clonar el repositorio<pre><code>git clone &lt;url-repositorio&gt;\n</code></pre> </li> <li> <p>Sigue los pasos del punto 1.2 Creando la primera aplicaci\u00f3n en Electron para configurar el entorno de desarrollo y crear un proyecto Electron.</p> <p>\ud83d\udea8\ud83d\udea8\ud83d\udea8 .gitignore \ud83d\udea8\ud83d\udea8\ud83d\udea8</p> <p>No olvides a\u00f1adir el archivo <code>.gitignore</code> en la ra\u00edz del proyecto para que no se suban los archivos innecesarios al repositorio.</p> <p>Ejemplo de archivo <code>.gitignore</code></p> </li> <li> <p>Realiza los cambios necesarios en el c\u00f3digo para que la aplicaci\u00f3n muestre un mensaje de bienvenida personalizado.</p> </li> <li> <p>Realiza un commit con los cambios realizados y sube el c\u00f3digo al repositorio remoto.</p> Terminal<pre><code>git add .\ngit commit -m \"Actividad finalizada\"\ngit push\n</code></pre> <p>Warning</p> <p>Es posible que solicite configuraci\u00f3n extra antes de hacer el primer commit</p> Terminal<pre><code>git config --global user.name \"Nombre Apellido\"\ngit config --global user.email \"user@alu.edu.gva.es\"\n</code></pre> </li> <li> <p>Comprueba que los cambios se han subido correctamente al repositorio remoto.</p> </li> </ol>"},{"location":"ud01_intro/02_electron_firstapp/","title":"1.2 Creando la primera aplicaci\u00f3n en Electron","text":"<ul> <li>Objetivos</li> <li>Iniciando el proyecto con <code>npm</code></li> <li>\ud83d\udea8 Agregando <code>.gitignore</code> \ud83d\udea8</li> <li>Ejecutar una aplicaci\u00f3n Electron</li> <li>Cargar una html en un <code>BrowserWindow</code><ul> <li>Importando m\u00f3dulos</li> <li>Escribir una funci\u00f3n reutilizable para instanciar ventanas</li> <li>Llamar a su funci\u00f3n cuando la aplicaci\u00f3n est\u00e9 lista</li> </ul> </li> <li>Administrar el ciclo de vida de la ventana de la aplicaci\u00f3n<ul> <li>Salir de la aplicaci\u00f3n cuando todas las ventanas est\u00e9n cerradas (Windows y Linux)</li> </ul> </li> <li>Abrir una ventana si no hay ninguna abierta (macOS)</li> <li>C\u00f3digo final</li> <li>Depurando en VS Code</li> <li>Resumen</li> <li>Referencia</li> </ul>"},{"location":"ud01_intro/02_electron_firstapp/#objetivos","title":"Objetivos","text":"<p>En esta parte se ense\u00f1ar\u00e1 a configurar un proyecto Electron y escribir una aplicaci\u00f3n inicial sencilla. Al final de esta secci\u00f3n, se podr\u00e1 ejecutar una aplicaci\u00f3n Electron en modo de desarrollo desde el terminal.</p>"},{"location":"ud01_intro/02_electron_firstapp/#iniciando-el-proyecto-con-npm","title":"Iniciando el proyecto con <code>npm</code>","text":"<p>Las aplicaciones Electron se organizan usando npm, con el archivo <code>package.json</code> como punto de entrada. Comienza creando una carpeta e inicializando un paquete npm dentro de ella con el comando <code>npm init</code>.</p> Terminal<pre><code>mkdir my-electron-app\ncd my-electron-app\nnpm init\n</code></pre> <p>Este comando pedir\u00e1 que configures algunos atributos del <code>package.json</code>. Hay algunas reglas que seguir en esta gu\u00eda:</p> <ul> <li>El punto de entrada de la aplicaci\u00f3n debe ser el archivo <code>main.js</code>.</li> <li>\"author\", \"license\" y \"description\" pueden tener cualquier valor, pero ser\u00e1n necesarios para el empaquetado m\u00e1s adelante.</li> <li>Se puede aceptar la configuraci\u00f3n por defecto, normalmente indicada entre par\u00e9ntesis, pulsando la tecla <code>intro</code>.</li> </ul> Ejemplo del proceso de configuraci\u00f3n de `package.json` con `npm init`<pre><code>This utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help init` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install &lt;pkg&gt;` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (my-electron-app) \nversion: (1.0.0) \ndescription: \nentry point: (index.js) main.js\ntest command: \ngit repository: \nkeywords: \nauthor: \nlicense: (ISC) \nAbout to write to /home/jacinto/Documentos/Curso2025/din/my-electron-app/package.json:\n\n{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n\nIs this OK? (yes) \n</code></pre> <p>Ahora, instala Electron en las <code>devDependencies</code> de la aplicaci\u00f3n, que es la lista de dependencias de paquetes externos de desarrollo exclusivo que no se requieren en producci\u00f3n.</p> Terminal<pre><code>npm install electron --save-dev\n</code></pre> <p>\u00bfPor qu\u00e9 Electron es una dependencia?</p> <p>Esto puede parecer poco intuitivo ya que el c\u00f3digo de producci\u00f3n ejecuta API de Electron. Sin embargo, las aplicaciones finales incluir\u00e1n el binario de Electron, eliminando la necesidad de especificarlo como una dependencia de la aplicaci\u00f3n binaria final a distribuir en producci\u00f3n.</p> <p>El archivo <code>package.json</code> deber\u00eda verse as\u00ed despu\u00e9s de inicializar su paquete e instalar Electron. </p> package.json<pre><code>{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"electron\": \"^38.1.0\"\n  }\n}\n</code></pre> <p>Tambi\u00e9n debe aparecer la carpeta <code>node_modules/</code> que contiene el ejecutable de Electron, as\u00ed como un archivo de bloqueo <code>package-lock.json</code> que especifica las versiones de dependencia exactas que se instalar\u00e1n.</p> <p>Instrucciones de instalaci\u00f3n avanzadas</p> <p>Si la instalaci\u00f3n de Electron falla, se puede consultar la documentaci\u00f3n de Instalaci\u00f3n avanzada para obtener instrucciones sobre c\u00f3mo descargar mirrors, servidores proxy y soluci\u00f3n de problemas.</p>"},{"location":"ud01_intro/02_electron_firstapp/#-agregando-gitignore-","title":"\ud83d\udea8 Agregando <code>.gitignore</code> \ud83d\udea8","text":"<p>El archivo <code>.gitignore</code> especifica qu\u00e9 archivos y directorios evitar en el seguimiento con Git. Se debe colocar una copia de la plantilla GitHub's Node.js gitignore template en la carpeta ra\u00edz de tu proyecto para evitar el seguimiento la carpeta <code>node_modules/</code> del proyecto.</p> <p>ADVERTENCIA</p> <p>No se debe subir la carpeta <code>node_modules/</code> al repositorio remoto, ya que puede ser muy grande y no es necesario. Las dependencias se pueden reinstalar en cualquier momento utilizando el archivo <code>package.json</code> y el comando <code>npm install</code>.</p> <p>Todos los a\u00f1os muchos alumnos omiten este paso y terminan subiendo la carpeta <code>node_modules/</code> a su repositorio, provocando que muchas veces el repositorio supere el l\u00edmite de tama\u00f1o permitido por GitHub y no puedan entregar sus pr\u00e1cticas.</p>"},{"location":"ud01_intro/02_electron_firstapp/#ejecutar-una-aplicaci\u00f3n-electron","title":"Ejecutar una aplicaci\u00f3n Electron","text":"<p>El script <code>main</code> que definiste en <code>package.json</code> es el punto de inicio de cualquier aplicaci\u00f3n. Este script controla el proceso principal, que se ejecuta en un entorno Node.js y es responsable de controlar el ciclo de vida de su aplicaci\u00f3n, mostrar interfaces nativas, realizar operaciones con privilegios y administrar los procesos de renderizado.</p> <p>Antes de crear la primera aplicaci\u00f3n, primero utilizar\u00e1 un script para asegurar de que el punto de entrada del proceso principal est\u00e1 configurado correctamente. Crea un archivo <code>main.js</code> en la carpeta ra\u00edz del proyecto con una sola l\u00ednea de c\u00f3digo:</p> main.js<pre><code>console.log('Hola desde Electron \ud83d\udc4b')\n</code></pre> <p>Debido a que el proceso principal es un int\u00e9rprete de Node.js, se puede ejecutar c\u00f3digo con el comando <code>electron</code>. Para ejecutar este script, agrega <code>\"electron .\"</code> al comando de inicio (<code>\"start\"</code>) en el atributo <code>\"scripts\"</code> del archivo <code>paquete.json</code>. Este comando le indicar\u00e1 al ejecutable que busque el script principal en el directorio actual y lo ejecute en modo de desarrollo.</p> package.json<pre><code>{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"electron\": \"^38.1.0\"\n  }\n}\n</code></pre> Terminal<pre><code>npm run start\n</code></pre> <p>El terminal deber\u00eda mostrar \"Hola desde Electron \ud83d\udc4b.\" \u00a1Enhorabuena, has ejecutado tu primera l\u00ednea de c\u00f3digo en Electron! A continuaci\u00f3n, veremos como crear interfaces de usuario en HTML y cargarlas en una ventana nativa.</p>"},{"location":"ud01_intro/02_electron_firstapp/#cargar-una-html-en-un-browserwindow","title":"Cargar una html en un <code>BrowserWindow</code>","text":"<p>Cada ventana muestra una p\u00e1gina web que se puede cargar desde un archivo HTML local o desde una direcci\u00f3n web remota. Para este ejemplo, se cargar\u00e1 desde un archivo local. Comienza creando una p\u00e1gina web b\u00e1sica en un archivo <code>index.html</code> en la carpeta ra\u00edz del proyecto:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta\n      http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    /&gt;\n    &lt;meta\n      http-equiv=\"X-Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    /&gt;\n    &lt;title&gt;Hello from Electron renderer!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello from Electron renderer!&lt;/h1&gt;\n    &lt;p&gt;\ud83d\udc4b&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ahora que tenemos una p\u00e1gina web, se puede cargar en una ventana del navegador Electron. Reemplaza el contenido del archivo <code>main.js</code> con el siguiente c\u00f3digo. Se explicar\u00e1 cada bloque resaltado por separado.</p> main.js<pre><code>const { app, BrowserWindow } = require('electron')\n\nconst createWindow = () =&gt; {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() =&gt; {\n  createWindow()\n})\n</code></pre>"},{"location":"ud01_intro/02_electron_firstapp/#importando-m\u00f3dulos","title":"Importando m\u00f3dulos","text":"main.js (l\u00ednea 1)<pre><code>const { app, BrowserWindow } = require('electron')\n\n...\n</code></pre> <p>En la primera l\u00ednea, estamos importando dos m\u00f3dulos Electron con la sintaxis del m\u00f3dulo CommonJS:</p> <ul> <li><code>app</code>, controla el ciclo de vida del evento de su aplicaci\u00f3n.</li> <li><code>BrowserWindow</code>, que crea y administra ventanas de aplicaciones.</li> </ul> <p>Convenciones de capitalizaci\u00f3n de nombres</p> <p>Es posible que hayas notado la diferencia de may\u00fasculas entre app y los m\u00f3dulos de BrowserWindow. Electron sigue las convenciones t\u00edpicas de JavaScript, donde los m\u00f3dulos se indican en PascalCase y son constructores de clases instanciables (por ejemplo, <code>BrowserWindow</code>, <code>Tray</code>, <code>Notification</code>) mientras que los m\u00f3dulos camelCase no son instanciables (por ejemplo, <code>app</code>, <code>ipcRenderer</code>, <code>webContents</code>).</p>"},{"location":"ud01_intro/02_electron_firstapp/#escribir-una-funci\u00f3n-reutilizable-para-instanciar-ventanas","title":"Escribir una funci\u00f3n reutilizable para instanciar ventanas","text":"<p>La funci\u00f3n <code>createWindow()</code> carga la p\u00e1gina web en una nueva instancia de <code>BrowserWindow</code>:</p> main.js (l\u00edneas 3-10)<pre><code>...\nconst createWindow = () =&gt; {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n...\n</code></pre>"},{"location":"ud01_intro/02_electron_firstapp/#llamar-a-su-funci\u00f3n-cuando-la-aplicaci\u00f3n-est\u00e9-lista","title":"Llamar a su funci\u00f3n cuando la aplicaci\u00f3n est\u00e9 lista","text":"main.js (l\u00edneas 12-14)<pre><code>...\napp.whenReady().then(() =&gt; {\n  createWindow()\n})\n</code></pre> <p>Muchos de los m\u00f3dulos principales de son emisores de eventos de Node.js que se adhieren a la arquitectura asincr\u00f3nica basada en eventos de Node. El m\u00f3dulo de aplicaci\u00f3n es uno de estos emisores.</p> <p><code>BrowserWindows</code> solo se puede crear despu\u00e9s de que se del evento <code>ready</code> del m\u00f3dulo de la aplicaci\u00f3n. Puede esperar este evento utilizando la API <code>app.whenReady()</code> y llamando a <code>createWindow()</code> una vez que se cumpla su promesa.</p> <p>evento <code>ready</code></p> <p>Normalmente los eventos de Node.js se escuchan utilizando la funci\u00f3n <code>.on</code> de un emisor.</p> <pre><code>app.on('ready', () =&gt; {\n// app.whenReady().then(() =&gt; {\ncreateWindow()\n})\n</code></pre> <p>Sin embargo, Electron expone <code>app.whenReady()</code> para evitar problemas al escuchar directamente el evento <code>ready</code>.</p> <p>En este momento, al ejecutar el comando de <code>start</code> de la aplicaci\u00f3n deber\u00eda abrir con una ventana que muestre la p\u00e1gina web.</p> <p>Cada p\u00e1gina web que la aplicaci\u00f3n muestra en una ventana se ejecutar\u00e1 en un proceso separado llamado renderer process (proceso de renderizado) (o simplemente renderer para abreviar). Los procesos de renderizado tienen acceso a las mismas API de JavaScript y herramientas que se utilizan para el desarrollo web front-end t\u00edpico, como el uso de webpack para agrupar y minimizar su c\u00f3digo o React para crear interfaces de usuario.</p>"},{"location":"ud01_intro/02_electron_firstapp/#administrar-el-ciclo-de-vida-de-la-ventana-de-la-aplicaci\u00f3n","title":"Administrar el ciclo de vida de la ventana de la aplicaci\u00f3n","text":"<p>Las ventanas de las aplicaciones se comportan de manera diferente en cada sistema operativo. En lugar de hacer cumplir estas convenciones de forma predeterminada, Electron ofrece la opci\u00f3n de implementarlas en el c\u00f3digo de su aplicaci\u00f3n si desea seguirlas. Puede implementar convenciones b\u00e1sicas de ventana escuchando los eventos emitidos por la aplicaci\u00f3n y los m\u00f3dulos de <code>BrowserWindow</code>.</p> <p>Flujo de control espec\u00edfico</p> <p>La verificaci\u00f3n con la variable <code>process.platform</code> de Node puede ayudar a ejecutar c\u00f3digo de manera condicional en ciertas plataformas. Se debe tener en cuenta que s\u00f3lo hay tres plataformas posibles en las que Electron puede ejecutarse: <code>win32</code> (Windows), <code>linux</code> (Linux) y <code>darwin</code> (macOS).</p>"},{"location":"ud01_intro/02_electron_firstapp/#salir-de-la-aplicaci\u00f3n-cuando-todas-las-ventanas-est\u00e9n-cerradas-windows-y-linux","title":"Salir de la aplicaci\u00f3n cuando todas las ventanas est\u00e9n cerradas (Windows y Linux)","text":"<p>En Windows y Linux, cerrar todas las ventanas generalmente cerrar\u00e1 una aplicaci\u00f3n por completo. Para implementar este patr\u00f3n en Electron, se debe escuchar el evento <code>window-all-closed</code> del m\u00f3dulo de la aplicaci\u00f3n y llama a <code>app.quit()</code> para salir de la aplicaci\u00f3n si el usuario no est\u00e1 en macOS.</p> <pre><code>app.on('window-all-closed', () =&gt; {\n  if (process.platform !== 'darwin') app.quit()\n})\n</code></pre>"},{"location":"ud01_intro/02_electron_firstapp/#abrir-una-ventana-si-no-hay-ninguna-abierta-macos","title":"Abrir una ventana si no hay ninguna abierta (macOS)","text":"<p>Por el contrario, el comportamiento por defecto de las aplicaciones de macOS es que generalmente contin\u00faan ejecut\u00e1ndose incluso sin ninguna ventana abierta. Activar la aplicaci\u00f3n cuando no hay ventanas disponibles deber\u00eda abrir una nueva.</p> <p>Para implementar esta caracter\u00edstica, escuchar el evento <code>activate</code> del m\u00f3dulo de la aplicaci\u00f3n y llamar a su m\u00e9todo <code>createWindow()</code> existente si no hay ning\u00fan <code>BrowserWindows</code> abierto.</p> <p>Debido a que las ventanas no se pueden crear antes del evento <code>ready</code>, solo deber\u00eda escuchar el evento <code>activate</code> despu\u00e9s de inicializar la aplicaci\u00f3n. Haz esto escuchando solo los eventos de activaci\u00f3n dentro del <code>callback</code> de <code>whenReady()</code>.</p> <pre><code>app.whenReady().then(() =&gt; {\n  createWindow()\n\n  app.on('activate', () =&gt; {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n</code></pre>"},{"location":"ud01_intro/02_electron_firstapp/#c\u00f3digo-final","title":"C\u00f3digo final","text":"main.js<pre><code>const { app, BrowserWindow } = require('electron')\n\nconst createWindow = () =&gt; {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() =&gt; {\n  createWindow()\n\n  app.on('activate', () =&gt; {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on('window-all-closed', () =&gt; {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta\n      http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\" /&gt;\n    &lt;meta\n      http-equiv=\"X-Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\" /&gt;\n    &lt;title&gt;Hola desde Electron renderer!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hola desde Electron renderer!&lt;/h1&gt;\n    &lt;p&gt;\ud83d\udc4b&lt;/p&gt;\n    &lt;p id=\"info\"&gt;&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ud01_intro/02_electron_firstapp/#depurando-en-vs-code","title":"Depurando en VS Code","text":"<p>Para depurar la aplicaci\u00f3n usando VS Code, se debe adjuntar VS code para ambos procesos tanto el principal y los renderizadores. Aqu\u00ed un ejemplo de configuraci\u00f3n. Crea un nuevo archivo <code>launch.json</code> en el directorio <code>.vscode\\</code> del proyecto:</p> .vscode/launch.json<pre><code>{\n  \"version\": \"0.2.0\",\n  \"compounds\": [\n    {\n      \"name\": \"Main + renderer\",\n      \"configurations\": [\"Main\", \"Renderer\"],\n      \"stopAll\": true\n    }\n  ],\n  \"configurations\": [\n    {\n      \"name\": \"Renderer\",\n      \"port\": 9222,\n      \"request\": \"attach\",\n      \"type\": \"chrome\",\n      \"webRoot\": \"${workspaceFolder}\"\n    },\n    {\n      \"name\": \"Main\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron\",\n      \"windows\": {\n        \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron.cmd\"\n      },\n      \"args\": [\".\", \"--remote-debugging-port=9222\"],\n      \"outputCapture\": \"std\",\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n</code></pre> <p>La opci\u00f3n \"Main + renderer\" aparecer\u00e1 cuando selecciones \"Run and debug\" en la barra lateral, lo que le permitir\u00e1 establecer puntos de interrupci\u00f3n e inspeccionar todas las variables, entre otras cosas, tanto en el proceso principal como en el renderizador.</p> <p>Lo que hemos hecho en el archivo <code>launch.json</code> es crear 3 configuraciones:</p> <ul> <li><code>Main</code> se utiliza para iniciar el proceso principal y tambi\u00e9n exponer el puerto 9222 para la depuraci\u00f3n remota (<code>--remote-debugging-port=9222</code>). Este es el puerto que usaremos para adjuntar el depurador del <code>Renderer</code>. Debido a que el proceso principal es un proceso de Node.js, el tipo se establece en <code>node</code>.</li> <li><code>Renderer</code> se utiliza para depurar el proceso de renderizado. Debido a que el proceso principal es el que crea el proceso, tenemos que adjuntarlo (<code>\"request\": \"attach\"</code>) en lugar de crear uno nuevo. El proceso de renderizado es web, por lo que el depurador que debemos usar es <code>chrome</code>.</li> <li><code>Main + renderer</code> es una tarea compuesta que ejecuta las anteriores simult\u00e1neamente.</li> </ul> <p>ADVERTENCIA</p> <p>Debido a que estamos adjuntando un proceso en <code>Renderer</code>, es posible que las primeras l\u00edneas de su c\u00f3digo se omitan ya que el depurador no habr\u00e1 tenido tiempo suficiente para conectarse antes de que se ejecuten. Puede solucionar este problema actualizando la p\u00e1gina o estableciendo un tiempo de espera antes de ejecutar el c\u00f3digo en modo de desarrollo.</p>"},{"location":"ud01_intro/02_electron_firstapp/#resumen","title":"Resumen","text":"<p>Las aplicaciones Electron se configuran mediante paquetes npm. El ejecutable debe instalarse en las <code>devDependencies</code> de su proyecto y puede ejecutarse en modo de desarrollo usando un script en el archivo <code>package.json</code>.</p> <p>El ejecutable toma el punto de entrada de JavaScript que se encuentra en la propiedad <code>main</code> de <code>paquete.json</code>. Este archivo controla el proceso principal, que ejecuta una instancia de Node.js y es responsable del ciclo de vida de su aplicaci\u00f3n, mostrando interfaces nativas, realizando operaciones privilegiadas y administrando procesos de renderizado.</p> <p>Los procesos de renderizado (o renderers) son responsables de mostrar contenido gr\u00e1fico. Puedes cargar una p\u00e1gina web en un renderer apunt\u00e1ndola a una direcci\u00f3n web o a un archivo HTML local. Los renderers se comportan de manera muy similar a las p\u00e1ginas web normales y tienen acceso a las mismas API web.</p>"},{"location":"ud01_intro/02_electron_firstapp/#referencia","title":"Referencia","text":"<ul> <li>Electron: Building your First App</li> </ul>"},{"location":"ud01_intro/03_gui/","title":"1.3 Interfaz gr\u00e1fica de usuario (GUI)","text":"<ul> <li>Caracter\u00edsticas principales:</li> <li>Tipos de GUI</li> <li>Usabilidad y experiencia de usuario (UX)<ul> <li>Diferencia entre usabilidad y experiencia de usuario (UX)</li> </ul> </li> <li>Euristicas de usabilidad de Jakob Nielsen</li> <li>Principios b\u00e1sicos de accesibilidad</li> </ul> <p>Una interfaz gr\u00e1fica de usuario (GUI - Graphical User Interface) es el espacio visual y funcional donde el usuario interact\u00faa con un sistema inform\u00e1tico, una aplicaci\u00f3n o un dispositivo. Est\u00e1 formada por elementos visuales como ventanas, botones, men\u00fas, iconos, formularios, textos y otros componentes gr\u00e1ficos que permiten que el usuario controle y reciba informaci\u00f3n del sistema de manera sencilla, intuitiva y eficiente.</p>"},{"location":"ud01_intro/03_gui/#caracter\u00edsticas-principales","title":"Caracter\u00edsticas principales:","text":"<ul> <li>Visual. Utiliza elementos gr\u00e1ficos para representar funciones y acciones.</li> <li>Interactiva: permite la interacci\u00f3n mediante dispositivos de entrada como el rat\u00f3n, teclado, pantalla t\u00e1ctil, etc.</li> <li> <p>Intuitiva: dise\u00f1ada para ser f\u00e1cil de entender y usar, incluso para usuarios sin experiencia t\u00e9cnica. Basada en met\u00e1foras visuales reconocibles (carpetas, botones, etc.).</p> </li> <li> <p>Ventajas:</p> <ul> <li>Facilita el uso de aplicaciones complejas.</li> <li>Reduce la curva de aprendizaje para nuevos usuarios.</li> <li>Mejora la experiencia del usuario al hacerla m\u00e1s atractiva y accesible.</li> </ul> </li> <li> <p>Desventajas:</p> <ul> <li>Puede consumir m\u00e1s recursos del sistema que las interfaces de l\u00ednea de comandos.</li> <li>Puede ser menos eficiente para usuarios avanzados que prefieren comandos directos.</li> <li>Requiere un dise\u00f1o cuidadoso para evitar confusiones o dificultades de uso.</li> </ul> </li> </ul>"},{"location":"ud01_intro/03_gui/#tipos-de-gui","title":"Tipos de GUI","text":"<ul> <li> <p>Interfaces de escritorio</p> <p>Utilizadas en sistemas operativos de escritorio como Windows, macOS y Linux. Ejemplos incluyen aplicaciones como navegadores web, procesadores de texto y programas de edici\u00f3n gr\u00e1fica.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Ventanas, men\u00fas, barras de herramientas.</li> <li>Uso de rat\u00f3n y teclado para la navegaci\u00f3n.</li> <li>Espacios amplios para mostrar gran cantidad de informaci\u00f3n.</li> <li>Soporte para m\u00faltiples aplicaciones abiertas simult\u00e1neamente.</li> </ul> </li> <li> <p>Interfaces m\u00f3viles</p> <p>Dise\u00f1adas para dispositivos m\u00f3viles como smartphones y tablets. Ejemplos incluyen aplicaciones m\u00f3viles, juegos y herramientas de productividad.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Pantallas t\u00e1ctiles con gestos (deslizar, tocar, pellizcar).</li> <li>Dise\u00f1o adaptativo (responsive) para diferentes tama\u00f1os de pantalla.</li> <li>Uso eficiente del espacio limitado.</li> <li>Integraci\u00f3n con funciones del dispositivo (c\u00e1mara, GPS, etc.).</li> </ul> </li> <li> <p>Interfaces h\u00edbridas (multiplataforma)</p> <p>Combinan elementos de interfaces de escritorio y m\u00f3viles, adapt\u00e1ndose a diferentes dispositivos y contextos de uso. Ejemplos incluyen aplicaciones web progresivas (PWA) y aplicaciones desarrolladas con frameworks como Electron o React Native.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Adaptabilidad a diferentes dispositivos y tama\u00f1os de pantalla.</li> <li>Uso de tecnolog\u00edas web (HTML, CSS, JavaScript).</li> <li>Capacidad para funcionar tanto en navegadores como en entornos nativos.</li> <li>Flexibilidad para actualizar y mantener la aplicaci\u00f3n.</li> <li>Lograr buen rendimiento en diversas plataformas.</li> </ul> </li> <li> <p>Realidad aumentada (AR) y realidad virtual (VR)</p> <p>Interfaces que integran elementos digitales en el entorno real (AR) o crean entornos completamente virtuales (VR). Ejemplos incluyen aplicaciones de AR para dispositivos m\u00f3viles y experiencias de VR con cascos especializados.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Interacci\u00f3n en 3D y entornos inmersivos.</li> <li>Uso de dispositivos especializados (c\u00e1maras, sensores de movimiento, cascos VR, mandos, etc.).</li> <li> <p>Aplicaciones en juegos, educaci\u00f3n, dise\u00f1o y simulaci\u00f3n.</p> </li> <li> <p>Realidad Aumentada (AR):</p> <ul> <li>Superpone elementos digitales en el mundo real, mejorando la percepci\u00f3n del entorno.</li> <li>Ejemplos: aplicaciones de navegaci\u00f3n, juegos como Pok\u00e9mon GO.</li> </ul> </li> <li>Realidad Virtual (VR):<ul> <li>Crea un entorno completamente digital donde el usuario puede interactuar.</li> <li>Usan dispositivos como cascos VR y mandos de control.</li> <li>Ejemplos: simuladores, juegos inmersivos, aplicaciones de entrenamiento.</li> </ul> </li> </ul> </li> <li> <p>Interfaces gesturales</p> <p>Permiten la interacci\u00f3n mediante movimientos y gestos del cuerpo, utilizando tecnolog\u00edas como c\u00e1maras y sensores de movimiento. Ejemplos incluyen sistemas de control por gestos en consolas de videojuegos y dispositivos inteligentes.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Reconocimiento de movimientos y gestos.</li> <li>Uso de c\u00e1maras y sensores para capturar la interacci\u00f3n.</li> <li>Aplicaciones en juegos, control de dispositivos y entornos interactivos.</li> </ul> </li> <li> <p>Interfaces de voz</p> <p>Permiten la interacci\u00f3n mediante comandos de voz, utilizando tecnolog\u00edas de reconocimiento de voz y procesamiento del lenguaje natural. Ejemplos incluyen asistentes virtuales como Siri, Alexa y Google Assistant.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Reconocimiento y procesamiento de comandos de voz.</li> <li>Uso de micr\u00f3fonos y altavoces para la interacci\u00f3n.</li> <li>Aplicaciones en asistentes virtuales, dispositivos inteligentes y sistemas de control por voz.</li> </ul> </li> </ul> <p>Tabla resumen de tipos de GUI:</p> Tipo de GUI Dispositivo habitual Interacci\u00f3n principal Retos y consideraciones Interfaces de escritorio Computadoras de escritorio y port\u00e1tiles Rat\u00f3n y teclado Espacio amplio, multitarea, dise\u00f1o detallado Interfaces m\u00f3viles Smartphones y tablets Pantalla t\u00e1ctil y gestos Espacio limitado, dise\u00f1o adaptativo, eficiencia energ\u00e9tica Interfaces h\u00edbridas Dispositivos variados (PC, m\u00f3viles, tablets) Rat\u00f3n, teclado, pantalla t\u00e1ctil Adaptabilidad, rendimiento, mantenimiento Realidad aumentada (AR) y realidad virtual (VR) Dispositivos especializados (cascos VR, c\u00e1maras AR) Movimiento y gestos, entornos inmersivos Tecnolog\u00eda avanzada, experiencia inmersiva, usabilidad Interfaces gesturales Dispositivos con c\u00e1maras y sensores de movimiento Movimientos y gestos Precisi\u00f3n en el reconocimiento de formas y gestos Interfaces de voz Dispositivos con micr\u00f3fonos y altavoces (smartphones, altavoces inteligentes) Comandos de voz Precisi\u00f3n en el reconocimiento de voz"},{"location":"ud01_intro/03_gui/#usabilidad-y-experiencia-de-usuario-ux","title":"Usabilidad y experiencia de usuario (UX)","text":"<p>La usabilidad se refiere a la facilidad con la que los usuarios pueden aprender a usar una interfaz, realizar tareas y alcanzar sus objetivos de manera eficiente y satisfactoria.</p> <p>Principios b\u00e1sicos de usabilidad:</p> <ul> <li>Facilidad de aprendizaje: La interfaz debe ser intuitiva y f\u00e1cil de entender para nuevos usuarios.</li> <li>Eficiencia: Los usuarios deben poder realizar tareas r\u00e1pidamente una vez que han aprendido a usar la interfaz.</li> <li>Memorabilidad: Los usuarios deben poder recordar c\u00f3mo usar la interfaz despu\u00e9s de un per\u00edodo de inactividad.</li> <li>Prevenci\u00f3n de errores: La interfaz debe minimizar la posibilidad de errores y proporcionar mecanismos para recuperarse de ellos.</li> <li>Satisfacci\u00f3n del usuario: La experiencia de uso debe ser agradable y satisfactoria.</li> </ul>"},{"location":"ud01_intro/03_gui/#diferencia-entre-usabilidad-y-experiencia-de-usuario-ux","title":"Diferencia entre usabilidad y experiencia de usuario (UX)","text":"<ul> <li>Usabilidad: Se centra en la facilidad de uso y la eficiencia de la interfaz. Eval\u00faa c\u00f3mo los usuarios interact\u00faan con la interfaz para completar tareas espec\u00edficas.</li> <li>Experiencia de usuario (UX): Es un concepto m\u00e1s amplio que incluye la usabilidad, pero tambi\u00e9n abarca aspectos emocionales y psicol\u00f3gicos de la interacci\u00f3n del usuario con el sistema. La UX considera factores como la satisfacci\u00f3n, la percepci\u00f3n de valor, la est\u00e9tica y el contexto de uso.</li> </ul>"},{"location":"ud01_intro/03_gui/#euristicas-de-usabilidad-de-jakob-nielsen","title":"Euristicas de usabilidad de Jakob Nielsen","text":"<p>En 1994, Jakob Nielsen, un experto en usabilidad, desarroll\u00f3 un conjunto de 10 heur\u00edsticas o principios generales para el dise\u00f1o de interfaces de usuario. Estas heur\u00edsticas son pautas que ayudan a evaluar y mejorar la usabilidad de una interfaz.</p> <p>Fuente: 10 Usability Heuristics for User Interface Design</p> <ol> <li> <p>Visibilidad del estado del sistema \ud83d\udfe2</p> <p>La interfaz debe mantener a los usuarios informados sobre lo que est\u00e1 ocurriendo, proporcionando retroalimentaci\u00f3n adecuada en un tiempo razonable.</p> <p>Ejemplos:</p> <ul> <li>Mostrar una barra de progreso durante la carga de un archivo.</li> <li>Indicar el estado de conexi\u00f3n a internet.</li> <li>Mostrar notificaciones de acciones completadas.</li> </ul> </li> <li> <p>Relaci\u00f3n entre el sistema y el mundo real \ud83c\udf0e</p> <p>La interfaz debe utilizar un lenguaje y conceptos familiares para los usuarios, siguiendo convenciones del mundo real.</p> <p>Ejemplos:</p> <ul> <li>Usar iconos reconocibles (carpeta para archivos, papelera para eliminar).</li> <li>Utilizar t\u00e9rminos comunes en lugar de jerga t\u00e9cnica.</li> <li>Organizar la informaci\u00f3n de manera l\u00f3gica y coherente.</li> </ul> </li> <li> <p>Control y libertad del usuario \ud83d\udd79\ufe0f</p> <p>Los usuarios deben tener la capacidad de deshacer y rehacer acciones f\u00e1cilmente, as\u00ed como salir de situaciones no deseadas.</p> <p>Ejemplos:</p> <ul> <li>Confirmar acciones destructivas (eliminar, cerrar sin guardar).</li> <li>Ofrecer opciones claras para salir de men\u00fas o pantallas.</li> <li>Permitir cancelar operaciones en curso.</li> <li>Proporcionar botones de \"Deshacer\" y \"Rehacer\".</li> </ul> </li> <li> <p>Consistencia y est\u00e1ndares \ud83d\udccf</p> <p>La interfaz debe seguir convenciones y est\u00e1ndares establecidos para que los usuarios no tengan que preguntarse si diferentes palabras, situaciones o acciones significan lo mismo.</p> <p>Ejemplos:</p> <ul> <li>Usar colores y estilos consistentes en toda la aplicaci\u00f3n.</li> <li>Mantener la misma ubicaci\u00f3n para botones y men\u00fas en diferentes pantallas.</li> <li>Seguir las pautas de dise\u00f1o de la plataforma (iOS, Android, web).</li> </ul> </li> <li> <p>Prevenci\u00f3n de errores \ud83d\udeab</p> <p>La interfaz debe dise\u00f1arse para evitar que los usuarios cometan errores, proporcionando opciones claras y confirmaciones cuando sea necesario.</p> <p>Ejemplos:</p> <ul> <li>Validar entradas de usuario antes de procesarlas.</li> <li>Deshabilitar botones que no son aplicables en un contexto espec\u00edfico.</li> <li>Proporcionar mensajes de error claros y espec\u00edficos.</li> <li>Ofrecer sugerencias para corregir errores.</li> <li>Dise\u00f1ar formularios con campos obligatorios y opcionales claramente diferenciados.</li> </ul> </li> <li> <p>Reconocimiento en lugar de recuerdo \ud83d\udc41\ufe0f</p> <p>La interfaz debe minimizar la carga de memoria del usuario, haciendo visibles los objetos, acciones y opciones disponibles.</p> <p>Ejemplos:</p> <ul> <li>Utilizar iconos y etiquetas claras para identificar funciones.</li> <li>Proporcionar accesos directos visuales para funciones frecuentes.</li> <li>Mostrar men\u00fas y opciones en lugar de requerir que los usuarios recuerden comandos.</li> <li>Incluir descripciones emergentes (tooltips) para iconos y botones.</li> </ul> </li> <li> <p>Flexibilidad y eficiencia de uso \u26a1</p> <p>La interfaz debe ser flexible y permitir a los usuarios personalizar su experiencia, as\u00ed como ofrecer atajos para usuarios avanzados.</p> <p>Ejemplos:</p> <ul> <li>Incluir opciones de configuraci\u00f3n para adaptar la interfaz a las preferencias del usuario.</li> <li>Ofrecer atajos de teclado para funciones comunes.</li> <li>Proporcionar diferentes modos de visualizaci\u00f3n (lista, cuadr\u00edcula).</li> <li>Permitir la personalizaci\u00f3n de la barra de herramientas.</li> </ul> </li> <li> <p>Dise\u00f1o est\u00e9tico y minimalista \ud83c\udfa8</p> <p>La interfaz debe evitar la sobrecarga de informaci\u00f3n y elementos visuales innecesarios, centr\u00e1ndose en lo esencial.</p> <p>Ejemplos:</p> <ul> <li>Utilizar un dise\u00f1o limpio y ordenado.</li> <li>Eliminar elementos que no aportan valor a la experiencia del usuario.</li> <li>Priorizar la informaci\u00f3n m\u00e1s relevante.</li> <li>Evitar el uso excesivo de colores y fuentes.</li> </ul> </li> <li> <p>Ayudar a los usuarios a reconocer, diagnosticar y recuperarse de errores \ud83d\udee0\ufe0f</p> <p>Los mensajes de error deben ser claros, espec\u00edficos y ofrecer soluciones para que los usuarios puedan corregir el problema.</p> <p>Ejemplos:</p> <ul> <li>Proporcionar mensajes de error que expliquen el problema y c\u00f3mo solucionarlo.</li> <li>Ofrecer enlaces a recursos de ayuda o soporte.</li> <li>Incluir opciones para contactar con el soporte t\u00e9cnico.</li> <li>Mostrar ejemplos de entradas correctas cuando se produce un error en un formulario.</li> </ul> </li> <li> <p>Ayuda y documentaci\u00f3n \ud83d\udcda</p> <p>Aunque la interfaz debe ser usable sin necesidad de documentaci\u00f3n, es importante proporcionar ayuda y recursos para los usuarios que lo necesiten.</p> <p>Ejemplos:</p> <ul> <li>Incluir una secci\u00f3n de ayuda accesible desde la interfaz.</li> <li>Proporcionar tutoriales o gu\u00edas para nuevas funciones.</li> <li>Ofrecer soporte en l\u00ednea o chat para resolver dudas.</li> <li>Incluir preguntas frecuentes (FAQ) y videos explicativos.</li> </ul> </li> </ol>"},{"location":"ud01_intro/03_gui/#principios-b\u00e1sicos-de-accesibilidad","title":"Principios b\u00e1sicos de accesibilidad","text":"<p>La accesibilidad en el dise\u00f1o de interfaces gr\u00e1ficas de usuario (GUI) se refiere a la creaci\u00f3n de interfaces que puedan ser utilizadas por personas con diversas capacidades y discapacidades. A continuaci\u00f3n, se presentan algunos principios b\u00e1sicos para lograr una GUI accesible:</p> <ul> <li> <p>Contraste de colores</p> <p>Utilizar combinaciones de colores con suficiente contraste para que el texto y los elementos visuales sean f\u00e1cilmente legibles para personas con discapacidades visuales, como daltonismo.</p> </li> <li> <p>Navegaci\u00f3n</p> <p>Asegurarse de que la navegaci\u00f3n sea clara y consistente, utilizando men\u00fas, botones y enlaces f\u00e1cilmente identificables. Proporcionar m\u00faltiples formas de navegar por la interfaz (rat\u00f3n, teclado, voz).</p> </li> <li> <p>Dise\u00f1o inclusivo</p> <p>Evitar el uso de elementos que dependan exclusivamente de un solo sentido (como el color) para transmitir informaci\u00f3n. Utilizar texto alternativo para im\u00e1genes y descripciones para elementos visuales.</p> </li> <li> <p>Tama\u00f1o de fuentes</p> <p>Utilizar tama\u00f1os de fuente legibles y permitir a los usuarios ajustar el tama\u00f1o del texto seg\u00fan sus necesidades.</p> </li> <li> <p>Compatibilidad con tecnolog\u00edas de asistencia</p> <p>Asegurarse de que la GUI sea compatible con tecnolog\u00edas de asistencia, como lectores de pantalla y dispositivos de entrada alternativos.</p> <ul> <li>Proporcionar etiquetas claras y descriptivas para todos los elementos interactivos.</li> <li>Utilizar roles ARIA (Accessible Rich Internet Applications) para mejorar la accesibilidad de componentes din\u00e1micos.</li> <li>Asegurar que el orden de tabulaci\u00f3n sea l\u00f3gico y predecible.</li> <li>Proporcionar retroalimentaci\u00f3n audible para acciones importantes.</li> </ul> </li> </ul>"},{"location":"ud01_intro/_06_visual_design/","title":"1.4 Dise\u00f1o visual y principios de usabilidad","text":""},{"location":"ud01_intro/_06_visual_design/#teor\u00eda-de-gestalt","title":"Teor\u00eda de Gestalt","text":"<p>La teor\u00eda de Gestalt es un enfoque psicol\u00f3gico que estudia c\u00f3mo las personas perciben y organizan la informaci\u00f3n visual. En dise\u00f1o de interfaces, esta teor\u00eda es fundamental para crear experiencias de usuario intuitivas y agradables.</p> <p>Referencia: Laws of UX</p> <p>Principios clave:</p> <ul> <li> <p>Proximidad</p> <p>Los elementos que est\u00e1n cerca unos de otros se perciben como relacionados. En dise\u00f1o, agrupar elementos relacionados puede ayudar a los usuarios a entender su funci\u00f3n.</p> <p>Ejemplo:</p> <ul> <li>Agrupar botones de navegaci\u00f3n juntos.</li> <li>Colocar etiquetas cerca de los campos de entrada correspondientes.</li> <li>Usar m\u00e1rgenes y espaciado para separar secciones de contenido.</li> </ul> </li> <li> <p>Semejanza</p> <p>Los elementos que son similares en forma, color o tama\u00f1o se perciben como parte de un mismo grupo. Utilizar estilos consistentes ayuda a los usuarios a identificar funciones similares.</p> <p>Ejemplo:</p> <ul> <li>Usar el mismo color para todos los botones de acci\u00f3n.</li> <li>Mantener un estilo uniforme para los iconos de navegaci\u00f3n.</li> <li>Aplicar la misma tipograf\u00eda para t\u00edtulos y subt\u00edtulos.</li> </ul> </li> <li> <p>Continuidad</p> <p>Los elementos alineados en una l\u00ednea o patrones cont\u00ednuos se perciben como relacionados. Esto puede guiar la mirada del usuario a trav\u00e9s de la interfaz.</p> <p>Ejemplo:</p> <ul> <li>Alinear elementos de un formulario en una columna vertical.</li> </ul> </li> <li> <p>Cierre</p> <p>La mente tiende a completar formas incompletas. Utilizar este principio puede hacer que los dise\u00f1os sean m\u00e1s interesantes y atractivos.</p> <p>Ejemplo:</p> <ul> <li>Carruseles de im\u00e1genes que sugieren continuidad.</li> </ul> </li> <li> <p>Simetr\u00eda</p> <p>Los elementos sim\u00e9tricos se perciben como equilibrados y armoniosos. La simetr\u00eda puede transmitir estabilidad y profesionalismo.</p> <p>Ejemplo:</p> <ul> <li>Dise\u00f1ar interfaces con una estructura sim\u00e9trica.</li> <li>Usar la simetr\u00eda para crear un dise\u00f1o visualmente atractivo.</li> </ul> </li> </ul>"},{"location":"ud02_framework/","title":"UD2: Framework Angular","text":"<ul> <li>2.1 - Trabajar con Angular y Electron<ul> <li>2.1.1 \u270d\ufe0f Actividad: Proyecto base Angular + Electron</li> </ul> </li> <li>2.2 - Introducci\u00f3n a Angular<ul> <li>2.2.1 \u270d\ufe0f Proyecto: Angular Events. Parte 1.</li> </ul> </li> <li>2.3 Data binding y pipes en Angular<ul> <li>2.3.1 \u270d\ufe0f Proyecto: Angular Events. Parte 2.</li> <li>2.3.2 \u270d\ufe0f Proyecto: Angular Events. Parte 3.</li> </ul> </li> </ul>"},{"location":"ud02_framework/041_actividad/","title":"2.1.1 \u270d\ufe0f Actividad: Proyecto base Angular + Electron","text":"<p>Para realizar la actividad se debe seguir los siguientes pasos:</p> <ol> <li> <p>Acepta la invitaci\u00f3n a la actividad en GitHub Classroom: https://classroom.github.com/a/iPZCjSpm</p> <ul> <li>Selecciona tu usuario del listado.</li> <li>Acepta la actividad.</li> </ul> </li> <li> <p>Clona el repositorio en tu m\u00e1quina local</p> <p>Puedes utilizar VS Code para clonar el repositorio o la terminal con el comando:</p> Clonar el repositorio<pre><code>git clone &lt;url-repositorio&gt;\n</code></pre> </li> <li> <p>Sigue los pasos del punto 1.4 Trabajar con Angular y Electron</p> </li> <li> <p>Prueba la aplicaci\u00f3n tanto en desarrollo como generando el paquete ejecutable.</p> <p>Entrega en Aules</p> <p>Adem\u00e1s de la entrega del c\u00f3digo en el repositorio, deber\u00e1s entregar el empaquetado de la aplicaci\u00f3n en formato <code>.zip</code> en la plataforma Aules.</p> </li> <li> <p>Realiza un commit con los cambios realizados y sube el c\u00f3digo al repositorio remoto.</p> </li> <li> <p>Comprueba que los cambios se han subido correctamente al repositorio remoto.</p> </li> </ol>"},{"location":"ud02_framework/04_angular_electron/","title":"2.1 Trabajar con Angular y Electron","text":"<ul> <li>Introducci\u00f3n a Angular<ul> <li>Principales Caracter\u00edsticas:</li> </ul> </li> <li>Creaci\u00f3n de una Aplicaci\u00f3n Angular<ul> <li>Node.js</li> <li>Instalaci\u00f3n de Angular CLI</li> <li>Crear un nuevo proyecto</li> <li>Ejecutar el proyecto</li> </ul> </li> <li>Integraci\u00f3n de Angular con Electron<ul> <li>Pasos para integrar Angular con Electron</li> </ul> </li> <li>Errores comunes</li> </ul>"},{"location":"ud02_framework/04_angular_electron/#introducci\u00f3n-a-angular","title":"Introducci\u00f3n a Angular","text":"<p>Angular es un framework de desarrollo web de c\u00f3digo abierto mantenido por Google. Est\u00e1 dise\u00f1ado para facilitar la creaci\u00f3n de aplicaciones web din\u00e1micas y de una sola p\u00e1gina (SPA) mediante el uso de componentes reutilizables, inyecci\u00f3n de dependencias y un sistema de enlace de datos (data binding) bidireccional.</p>"},{"location":"ud02_framework/04_angular_electron/#principales-caracter\u00edsticas","title":"Principales Caracter\u00edsticas:","text":"<ul> <li>TypeScript: Utiliza TypeScript, un superconjunto de JavaScript que a\u00f1ade tipado est\u00e1tico y caracter\u00edsticas avanzadas de programaci\u00f3n orientada a objetos.</li> <li>Estructura: Proporciona una estructura clara y organizada para el desarrollo de aplicaciones, lo que facilita la escalabilidad y el mantenimiento del c\u00f3digo.</li> <li>Componentes: Arquitectura basada en componentes, donde cada componente representa una parte espec\u00edfica de la interfaz de usuario y su l\u00f3gica asociada.</li> <li>Plantillas: Utiliza plantillas HTML para definir la estructura de la interfaz de usuario, junto con directivas y data binding para interactuar con el modelo de datos.</li> <li>Data Binding Bidireccional: Permite la sincronizaci\u00f3n autom\u00e1tica entre el modelo de datos y la vista, lo que simplifica la actualizaci\u00f3n de la interfaz de usuario.</li> <li>Directivas: Proporciona directivas que permiten manipular el DOM de manera declarativa, facilitando la creaci\u00f3n de componentes personalizados y la reutilizaci\u00f3n de c\u00f3digo.</li> <li>Servicios: Utiliza servicios para encapsular la l\u00f3gica de negocio y compartir datos entre componentes.</li> <li>Routing: Incluye un sistema de routing que permite la navegaci\u00f3n entre diferentes vistas y componentes dentro de una aplicaci\u00f3n de una sola p\u00e1gina.</li> <li>Inyecci\u00f3n de Dependencias: Facilita la gesti\u00f3n de dependencias mediante un sistema de inyecci\u00f3n de dependencias, lo que mejora la modularidad y la reutilizaci\u00f3n del c\u00f3digo.</li> <li>CLI (Command Line Interface): Angular CLI es una herramienta de l\u00ednea de comandos que facilita la creaci\u00f3n, desarrollo y despliegue de aplicaciones Angular.</li> <li>Formularios: Proporciona soporte robusto para la creaci\u00f3n y validaci\u00f3n de formularios, tanto reactivos como basados en plantillas.</li> <li>Testing: Incluye herramientas integradas para pruebas unitarias y de extremo a extremo, lo que facilita la garant\u00eda de calidad del c\u00f3digo.</li> <li>Internacionalizaci\u00f3n: Soporta la creaci\u00f3n de aplicaciones multiling\u00fces mediante herramientas de internacionalizaci\u00f3n.</li> </ul>"},{"location":"ud02_framework/04_angular_electron/#creaci\u00f3n-de-una-aplicaci\u00f3n-angular","title":"Creaci\u00f3n de una Aplicaci\u00f3n Angular","text":"<p>En este curso utilizaremos la \u00faltima versi\u00f3n estable de Angular (en el momento de escribir este documento, la versi\u00f3n es la 20).</p>"},{"location":"ud02_framework/04_angular_electron/#nodejs","title":"Node.js","text":"<p>En la documentaci\u00f3n oficial de Angular se indican los requisitos previos necesarios para trabajar con Angular https://angular.dev/reference/versions.</p> <p>Para Angular 20 se debe instalar la ultima versi\u00f3n estable (LTS) de Node.js (22.19.0 en el momento de escribir este documento).</p> <p>Se recomienda el uso de nvm (Node Version Manager) para gestionar las versiones de Node.js.</p>"},{"location":"ud02_framework/04_angular_electron/#instalaci\u00f3n-de-angular-cli","title":"Instalaci\u00f3n de Angular CLI","text":"<p>Desde un terminal de l\u00ednea de comandos, ejecuta el siguiente comando para instalar la interfaz de l\u00ednea de comandos de Angular (Angular CLI):</p> <pre><code>npm install -g @angular/cli\n</code></pre> <p>Comprobar la instalaci\u00f3n:</p> <p>Con el comando <code>ng version</code> se puede comprobar la versi\u00f3n instalada de Angular CLI y otras dependencias relacionadas.</p> Comprobar la versi\u00f3n instalada<pre><code>ng version\n\n     _                      _                 ____ _     ___\n    / \\   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|\n   /\u25b3 \\ | '_ \\ / _` | | | | |/ _` | '__|   | |   | |    | |\n  / ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\n /_/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|\n                |___/\n\n\n\nAngular CLI: 20.3.2\nNode: 22.19.0\nPackage Manager: npm 10.9.3\nOS: linux x64\n\n\nAngular: &lt;error&gt;\n\nPackage                      Version\n------------------------------------\n@angular-devkit/architect    0.2002.2 (cli-only)\n@angular-devkit/core         20.2.2 (cli-only)\n@angular-devkit/schematics   20.2.2 (cli-only)\n@schematics/angular          20.2.2 (cli-only)\n</code></pre> <p>Nota</p> <p>En el ejemplo anterior, se muestra <code>Angular: &lt;error&gt;</code>, esto es porque no estamos dentro de un proyecto Angular. Una vez creado el proyecto, se mostrar\u00e1 la versi\u00f3n del proyecto en el que estemos trabajando junto con las versiones de las dependencias.</p>"},{"location":"ud02_framework/04_angular_electron/#crear-un-nuevo-proyecto","title":"Crear un nuevo proyecto","text":"<p>Referencia: https://angular.dev/installation</p> <p>Desde un terminal, ejecuta el comando de Angular CLI <code>ng new</code> para crear un nuevo proyecto.</p> Ejemplo de creaci\u00f3n de un proyecto<pre><code>ng new my-angular-app\n? Which stylesheet format would you like to use? (Use arrow keys)\n\u276f CSS             [ https://developer.mozilla.org/docs/Web/CSS                     ]  &lt;-- Selecciona el formato de hojas de estilo\n  Sass (SCSS)     [ https://sass-lang.com/documentation/syntax#scss                ]\n  Sass (Indented) [ https://sass-lang.com/documentation/syntax#the-indented-syntax ]\n  Less            [ http://lesscss.org                                             ]\n? Do you want to enable Server-Side Rendering (SSR) and Static Site Generation (SSG/Prerendering)? (y/N) &lt;-- NO\n? Do you want to create a 'zoneless' application without zone.js? (y/N) &lt;----------------------------------- NO\n? Which AI tools do you want to configure with Angular best practices? https://angular.dev/ai/develop-with-ai (Press &lt;space&gt; to select, &lt;a&gt; to\ntoggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)\n\u276f\u25c9 None\n \u25ef Claude                 [ https://docs.anthropic.com/en/docs/claude-code/memory                                 ]\n \u25ef Cursor                 [ https://docs.cursor.com/en/context/rules                                              ]\n \u25ef Gemini                 [ https://ai.google.dev/gemini-api/docs                                                 ]\n \u25ef GitHub Copilot         [ https://code.visualstudio.com/docs/copilot/copilot-customization#_custom-instructions ]\n \u25ef JetBrains AI Assistant [ https://www.jetbrains.com/help/junie/customize-guidelines.html                        ]\n \u25ef Windsurf               [ https://docs.windsurf.com/windsurf/cascade/memories#rules                             ]\n\nCREATE my-angular-app/README.md (1475 bytes)\nCREATE my-angular-app/.editorconfig (314 bytes)\nCREATE my-angular-app/.gitignore (587 bytes)\nCREATE my-angular-app/angular.json (2420 bytes)\nCREATE my-angular-app/package.json (1137 bytes)\nCREATE my-angular-app/tsconfig.json (992 bytes)\nCREATE my-angular-app/tsconfig.app.json (429 bytes)\nCREATE my-angular-app/tsconfig.spec.json (408 bytes)\nCREATE my-angular-app/.vscode/extensions.json (130 bytes)\nCREATE my-angular-app/.vscode/launch.json (470 bytes)\nCREATE my-angular-app/.vscode/tasks.json (938 bytes)\nCREATE my-angular-app/src/main.ts (222 bytes)\nCREATE my-angular-app/src/index.html (298 bytes)\nCREATE my-angular-app/src/styles.css (80 bytes)\nCREATE my-angular-app/src/app/app.css (0 bytes)\nCREATE my-angular-app/src/app/app.spec.ts (672 bytes)\nCREATE my-angular-app/src/app/app.ts (296 bytes)\nCREATE my-angular-app/src/app/app.html (20122 bytes)\nCREATE my-angular-app/src/app/app.config.ts (400 bytes)\nCREATE my-angular-app/src/app/app.routes.ts (77 bytes)\nCREATE my-angular-app/public/favicon.ico (15086 bytes)\n\n\u2714 Packages installed successfully.\n    Successfully initialized git.\n</code></pre>"},{"location":"ud02_framework/04_angular_electron/#ejecutar-el-proyecto","title":"Ejecutar el proyecto","text":"<p>Para ejecutar el proyecto, navega al directorio del proyecto y utiliza el comando <code>ng serve</code>:</p> Ejemplo de ejecuci\u00f3n de un proyecto<pre><code>cd my-angular-app\nng serve\n\nInitial chunk files | Names         | Raw size\nmain.js             | main          | 47.77 kB | \npolyfills.js        | polyfills     | 95 bytes | \nstyles.css          | styles        | 95 bytes | \n\n                    | Initial total | 47.96 kB\n\nApplication bundle generation complete. [1.390 seconds] - 2025-07-19T09:30:06.389Z\n\nWatch mode enabled. Watching for file changes...\nNOTE: Raw file sizes do not reflect development server per-request transformations.\n  \u279c  Local:   http://localhost:4200/\n  \u279c  press h + enter to show help\n\nh\n\n  Shortcuts\n  press r + enter to force reload browser\n  press u + enter to show server url\n  press o + enter to open in browser\n  press c + enter to clear console\n  press q + enter to quit\n</code></pre> <p>Para ver la aplicaci\u00f3n en funcionamiento, abre un navegador web la url <code>http://localhost:4200/</code>, podemos observar que en el cliente ofrece un atajo de teclado para abrir autom\u00e1ticamente el navegador (<code>o</code> + <code>Enter</code>).</p>"},{"location":"ud02_framework/04_angular_electron/#integraci\u00f3n-de-angular-con-electron","title":"Integraci\u00f3n de Angular con Electron","text":"<p>Como vimos en el apartado anterior, Electron permite crear aplicaciones de escritorio utilizando tecnolog\u00edas web como HTML, CSS y JavaScript. Al combinar Electron con Angular, podemos aprovechar las capacidades de ambos para desarrollar aplicaciones de escritorio.</p>"},{"location":"ud02_framework/04_angular_electron/#pasos-para-integrar-angular-con-electron","title":"Pasos para integrar Angular con Electron","text":"<ol> <li> <p>Crear una aplicaci\u00f3n Angular</p> <p>Si no tienes una aplicaci\u00f3n Angular existente, crea una nueva utilizando el comando <code>ng new my-angular-app</code>.</p> <p>Nota</p> <p>Si ya tienes una aplicaci\u00f3n Angular, puedes omitir este paso.</p> </li> <li> <p>Instalar Electron</p> <p>Navega al directorio de tu proyecto y ejecuta el siguiente comando para instalar Electron como una dependencia de desarrollo:</p> <pre><code>npm install electron --save-dev\n</code></pre> </li> <li> <p>Configurar el archivo principal de Electron</p> <p>Crea un archivo llamado <code>main.js</code> en la ra\u00edz de tu proyecto con el siguiente contenido:</p> main.js<pre><code>const { app, BrowserWindow, screen } = require('electron');\nconst path = require('path');\n\nprocess.on('uncaughtException', (error) =&gt; {\n    console.error('Uncaught Exception:', error);\n});\n\nfunction createWindow() {\n    const size = screen.getPrimaryDisplay().workAreaSize;\n\n    const win = new BrowserWindow({\n        webPreferences: {\n            width: 800,\n            height: 600,\n            contextIsolation: true,\n            nodeIntegration: false,\n        }\n    });\n\n    // Cargar la aplicaci\u00f3n Angular dependiendo del entorno\n\n    if (!app.isPackaged) {\n\n        // En desarrollo, cargar desde el servidor de desarrollo de Angular\n\n        win.loadURL('http://localhost:4200');\n        win.webContents.openDevTools();\n\n    } else {\n\n        // En producci\u00f3n, cargar el archivo index.html generado por Angular\n\n        const indexPath = path.join(__dirname, 'dist', 'my-angular-app', 'browser', 'index.html');\n        console.log('Loading file:', indexPath);\n        win.loadFile(indexPath);\n\n        win.webContents.on('did-fail-load', () =&gt; {\n            // Reintentar cargar el archivo en caso de fallo, esto previene errores en algunas plataformas\n            console.log('Retrying to load file:', indexPath);\n            win.loadFile(indexPath);\n        });\n    }\n\n    // Maximizar la ventana y mostrarla\n    win.maximize();\n    win.show();\n}\n\napp.whenReady().then(createWindow);\n\napp.on('window-all-closed', () =&gt; {\n    if (process.platform !== 'darwin') app.quit();\n});\n\napp.on('activate', () =&gt; {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow();\n});\n</code></pre> </li> <li> <p>Instalar dependencias adicionales</p> <p>Para facilitar la gesti\u00f3n de tareas y la construcci\u00f3n de la aplicaci\u00f3n, instala las siguientes dependencias adicionales:</p> Instalaci\u00f3n de dependencias adicionales<pre><code>npm install electron-builder wait-on npm-run-all --save-dev\n</code></pre> <ul> <li><code>electron-builder</code>: Herramienta para empaquetar y distribuir aplicaciones Electron.</li> <li><code>wait-on</code>: Utilidad para esperar a que un recurso est\u00e9 disponible (\u00fatil para esperar a que el servidor de desarrollo de Angular est\u00e9 listo).</li> <li><code>npm-run-all</code>: Herramienta para ejecutar m\u00faltiples scripts de npm en paralelo o secuencialmente.</li> </ul> </li> <li> <p>Actualizar el archivo <code>package.json</code></p> <p>Modifica el archivo <code>package.json</code> para agregar scripts que faciliten la ejecuci\u00f3n de la aplicaci\u00f3n en modo desarrollo y producci\u00f3n. A\u00f1ade l\u00edneas resaltadas en el siguiente ejemplo:</p> package.json<pre><code>{\n    \"name\": \"my-angular-app\",\n    \"version\": \"0.0.0\",\n    \"main\": \"main.js\",\n\n    \"build\": {\n        \"appId\": \"org.iescamp.din.my-angular-app\",\n        \"productName\": \"Mi Aplicaci\u00f3n Angular\",\n        \"files\": [\n            \"dist/my-angular-app/**/*\",\n            \"main.js\",\n            \"package.json\"\n        ]\n    },\n    \"win\": {\n        \"target\": [\n            \"nsis\"\n        ]\n    },\n    \"linux\": {\n        \"target\": [\n            \"AppImage\"\n        ]\n    },\n\n    \"scripts\": {\n        \"ng\": \"ng\",\n        \"start\": \"ng serve\",\n        \"build\": \"ng build\",\n        \"watch\": \"ng build --watch --configuration development\",\n        \"test\": \"ng test\",\n        \"dev\": \"npm-run-all --parallel electron start\",\n        \"electron\": \"wait-on tcp:4200 &amp;&amp; ng build --base-href ./ &amp;&amp; electron .\",\n        \"package\": \"ng build &amp;&amp; electron-builder\",\n        \"package-win\": \"ng build &amp;&amp; electron-builder --win\",\n        \"package-linux\": \"ng build &amp;&amp; electron-builder --linux\"\n    },\n\n    \"prettier\": {\n        \"printWidth\": 100,\n        \"singleQuote\": true,\n        \"overrides\": [\n        {\n            \"files\": \"*.html\",\n            \"options\": {\n                \"parser\": \"angular\"\n            }\n        }\n        ]\n    },\n    \"private\": true,\n    \"dependencies\": {\n        \"@angular/common\": \"^20.2.0\",\n        \"@angular/compiler\": \"^20.2.0\",\n        \"@angular/core\": \"^20.2.0\",\n        \"@angular/forms\": \"^20.2.0\",\n        \"@angular/platform-browser\": \"^20.2.0\",\n        \"@angular/router\": \"^20.2.0\",\n        \"rxjs\": \"~7.8.0\",\n        \"tslib\": \"^2.3.0\",\n        \"zone.js\": \"~0.15.0\"\n    },\n    \"devDependencies\": {\n        \"@angular/build\": \"^20.2.2\",\n        \"@angular/cli\": \"^20.2.2\",\n        \"@angular/compiler-cli\": \"^20.2.0\",\n        \"@types/jasmine\": \"~5.1.0\",\n        \"electron\": \"^38.0.0\",\n        \"electron-builder\": \"^26.0.12\",\n        \"jasmine-core\": \"~5.9.0\",\n        \"karma\": \"~6.4.0\",\n        \"karma-chrome-launcher\": \"~3.2.0\",\n        \"karma-coverage\": \"~2.2.0\",\n        \"karma-jasmine\": \"~5.1.0\",\n        \"karma-jasmine-html-reporter\": \"~2.1.0\",\n        \"npm-run-all\": \"^4.1.5\",\n        \"typescript\": \"~5.9.2\",\n        \"wait-on\": \"^8.0.4\"\n    }\n}\n</code></pre> </li> <li> <p>Modifica el archivo <code>src/index.html</code></p> <p>Cambia la l\u00ednea del <code>&lt;base href=\"/\"&gt;</code> por <code>&lt;base href=\"./\"&gt;</code> para que las rutas relativas funcionen correctamente en el entorno de Electron.</p> src/index.html<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My Aplicaci\u00f3n Angular&lt;/title&gt;\n    &lt;base href=\"./\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;app-root&gt;&lt;/app-root&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Ejecutar la aplicaci\u00f3n en modo desarrollo</p> <p>Utiliza el siguiente comando para iniciar la aplicaci\u00f3n en modo desarrollo. Esto iniciar\u00e1 tanto el servidor de desarrollo de Angular como la aplicaci\u00f3n Electron.</p> <pre><code>npm run dev\n</code></pre> <p>Este modo es el que utilizaremos durante el desarrollo de la aplicaci\u00f3n, ya que permite ver los cambios en tiempo real sin necesidad de reconstruir la aplicaci\u00f3n, a no ser que se modifique el archivo <code>main.js</code>, en cuyo caso ser\u00e1 necesario reiniciar la aplicaci\u00f3n Electron.</p> </li> <li> <p>Crear una versi\u00f3n empaquetada</p> <p>Para crear una versi\u00f3n empaquetada de la aplicaci\u00f3n, utiliza uno de los siguientes comandos:</p> <ul> <li>Para crear un paquete para la plataforma actual (Windows, Linux o macOS):</li> </ul> <pre><code>npm run package\n</code></pre> <ul> <li>Para crear un paquete espec\u00edfico para Windows:</li> </ul> <pre><code>npm run package-win\n</code></pre> <ul> <li>Para crear un paquete espec\u00edfico para Linux:</li> </ul> <pre><code>npm run package-linux\n</code></pre> <p>Los archivos empaquetados se encontrar\u00e1n en el directorio <code>dist/</code> dentro del proyecto.</p> </li> </ol>"},{"location":"ud02_framework/04_angular_electron/#errores-comunes","title":"Errores comunes","text":"<ul> <li> <p>El ejecutables no se inician o la ventana aparece en blanco.</p> <p>Aseg\u00farate de que la ruta al archivo <code>index.html</code> en el archivo <code>main.js</code> es correcta. La ruta debe coincidir con la estructura de tu proyecto y el nombre de la aplicaci\u00f3n Angular.</p> <ul> <li>Dentro del archivo <code>main.js</code>, la l\u00ednea que carga el archivo <code>index.html</code> apunte al lugar correcto:</li> </ul> <pre><code>const indexPath = path.join(__dirname, 'dist', 'my-angular-app', 'browser', 'index.html');\n</code></pre> <p>Mira el directorio <code>dist/</code> para verificar que la estructura de carpetas y el nombre de la aplicaci\u00f3n coinciden.</p> <ul> <li>Aseg\u00farate de que has ejecutado <code>ng build</code> para construir la aplicaci\u00f3n Angular antes de empaquetar con Electron.</li> <li>Comprueba la configuraci\u00f3n del archivo <code>package.json</code>, en particular la secci\u00f3n <code>build.files</code>, para asegurarte de que incluye los archivos necesarios:</li> </ul> package.json: fragmento de build.files<pre><code>\"build\": {\n  \"files\": [\n      \"dist/my-angular-app/**/*\",\n      \"main.js\",\n      \"package.json\"\n  ]\n</code></pre> </li> </ul>"},{"location":"ud02_framework/051_actividad/","title":"2.2.1 \u270d\ufe0f Proyecto: Angular Events. Parte 1.","text":"<p>Vamos a ir implementando poco a poco un proyecto de gesti\u00f3n de eventos (deportivos, conciertos, etc.). Seg\u00fan vayamos viendo en clase los diferentes contenidos de Angular, se ir\u00e1 implementando una actividad asociada para reforzar el aprendizaje.</p> <p>Tomando como referencia del ejemplo realizado en 1.5 Introducci\u00f3n a Angular, sigue los pasos para crear una aplicaci\u00f3n similar con los siguientes requisitos:</p> <ol> <li> <p>Acepta la invitaci\u00f3n a la actividad en GitHub Classroom: https://classroom.github.com/a/_-bmS6mP</p> <ul> <li>Selecciona tu usuario del listado.</li> <li>Acepta la actividad.</li> </ul> </li> <li> <p>Clona el repositorio en tu m\u00e1quina local</p> <p>Puedes utilizar VS Code para clonar el repositorio o la terminal con el comando:</p> Clonar el repositorio<pre><code>git clone &lt;url-repositorio&gt;\n</code></pre> </li> <li> <p>Crea un proyecto llamado <code>angular-eventos</code>.</p> </li> <li> <p>Configura el proyecto para que funcione con Electron.</p> <p>Gu\u00eda completa en: 1.4 Trabajar con Angular y Electron</p> </li> <li> <p>Crea un componente llamado <code>eventos-show</code>. Contendr\u00e1 casi todo el HTML que necesitaremos en el ejercicio.</p> </li> <li> <p>Crea una interfaz llamada <code>Evento</code> (<code>evento.ts</code>) dentro del directorio <code>interfaces/</code>.</p> <p>Representar\u00e1 los datos de un evento (t\u00edtulo, imagen, fecha, descripci\u00f3n y precio).</p> interfaces/evento.ts<pre><code>export interface Evento {\n    id: string;\n    title: string;\n    image: string;\n    date: string;\n    description: string;\n    price: number;\n}\n</code></pre> </li> <li> <p>Debes tener el siguiente c\u00f3digo HTML en la plantilla del componente principal de la aplicaci\u00f3n (<code>app.html</code>):</p> app.html<pre><code>&lt;mat-toolbar&gt;\n    &lt;span&gt;&lt;a class=\"navbar-brand\" href=\"#\"&gt;Angular Events&lt;/a&gt;&lt;/span&gt;\n&lt;/mat-toolbar&gt;\n&lt;div class=\"container\"&gt;\n    &lt;!-- Insertar aqu\u00ed el componente eventos-show --&gt;\n&lt;/div&gt;\n</code></pre> </li> <li> <p>Este ser\u00e1 el esqueleto de la plantilla del componente <code>EventosShow</code> (a falta de listar los eventos):</p> eventos-show.html<pre><code>&lt;div class=\"mb-4 mt-4 row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4\"&gt;\n    &lt;!-- Aqu\u00ed listaremos los eventos --&gt;\n&lt;/div&gt;\n</code></pre> </li> <li> <p>No olvides instalar Bootstrap y Angular Material </p> </li> <li> <p>Listando los eventos con <code>@for</code></p> <p>En el componente <code>EventosShow</code>, crea un array de objetos <code>Evento</code> (el tipo ser\u00e1 <code>Evento[]</code>). Crea al menos 2 eventos con todos sus datos. La imagen la puedes dejar como cadena vac\u00eda por ahora, m\u00e1s adelante veremos como mostrarla. La fecha debe ser una cadena en formato \u2018<code>YYYY-MM-DD</code>\u2019.</p> <p>Esta es una estructura HTML de ejemplo de un evento (dentro del elemento <code>&lt;div class=\"mb-4 mt-4 ...\"&gt;</code>, repetir con la directiva <code>@for</code>):</p> eventos-show.html - estructura de un evento dentro de @for<pre><code>...\n&lt;div class=\"col\"&gt;\n    &lt;mat-card appearance=\"outlined\"&gt;\n        &lt;mat-card-header&gt;\n            &lt;mat-card-title&gt;T\u00edtulo del evento&lt;/mat-card-title&gt;\n        &lt;/mat-card-header&gt;\n        &lt;mat-card-content&gt;\n            Descripci\u00f3n del evento\n        &lt;/mat-card-content&gt;\n        &lt;mat-card-footer&gt;\n            Fecha del evento\n            &lt;span class=\"float-end\"&gt;Precio del evento\u20ac&lt;/span&gt;\n        &lt;/mat-card-footer&gt;\n    &lt;/mat-card&gt;\n&lt;/div&gt;\n...\n</code></pre> </li> <li> <p>Si el array de eventos est\u00e1 vac\u00edo, con las directivas <code>@if</code> y <code>@else</code>, muestra el mensaje \"<code>No hay eventos disponibles</code>\" dentro de un <code>&lt;h3&gt;</code>, por ejemplo.</p> </li> <li> <p>Puedes realizar todos los <code>commit</code> que necesites, en el \u00faltimo pon el mensaje \"v1.0.0\".</p> <p>Si por alg\u00fan motivo necesitas realizar cambios, una vez termines sube el n\u00famero de versi\u00f3n patch</p> <p>Por ejemplo: <code>1</code>.<code>0</code>.<code>0</code>  ___  <code>1</code>.<code>0</code>.<code>1</code> ___ <code>1</code>.<code>0</code>.<code>2</code> ___ etc.</p> <p>Referencia: Semantic Versioning 2.0.0</p> <p>Given a version number <code>MAJOR</code>.<code>MINOR</code>.<code>PATCH</code>, increment the:</p> <ul> <li><code>MAJOR</code> -&gt; incompatible breaking changes</li> <li><code>MINOR</code> -&gt; new feature/functionality</li> <li><code>PATCH</code> -&gt; bug fixes</li> </ul> <p>Por lo tanto para corregir fallos (bug fixes) se debe incrementar el \u00faltimo n\u00famero.</p> <p>TAG</p> <p>Lo habitual es etiquetar con TAGs para establecer las distintas versiones. Pero en este caso GitHub Classroom no permite el uso de etiquetas.</p> </li> <li> <p>Comprueba que los cambios se han subido correctamente al repositorio remoto.</p> </li> </ol>"},{"location":"ud02_framework/05_angular_intro/","title":"2.2 Introducci\u00f3n a Angular","text":"<ul> <li>Estructura de un proyecto Angular</li> <li>Componentes</li> <li>Librer\u00edas de estilos</li> <li>Librer\u00edas de componentes</li> <li>Crear el primer componente con Angular Material</li> <li>Insertar el componente en la plantilla principal de la aplicaci\u00f3n</li> <li>Directivas <code>@if</code> y <code>@for</code></li> <li>Uso de la nueva interfaz para el listado de productos</li> <li>Referencias</li> </ul> <p>En la secci\u00f3n anterior vimos c\u00f3mo configurar el entorno de desarrollo, creando una aplicaci\u00f3n b\u00e1sica de Electron con Angular. En esta secci\u00f3n, profundizaremos en los conceptos fundamentales de Angular para empezar a desarrollar interfaces de usuario.</p>"},{"location":"ud02_framework/05_angular_intro/#estructura-de-un-proyecto-angular","title":"Estructura de un proyecto Angular","text":"<p>Para explicar los conceptos b\u00e1sicos de Angular, utilizaremos un proyecto de ejemplo llamado <code>angular-productsp</code> que iremos creando paso a paso.</p> Crear proyecto Angular<pre><code>ng new angular-products\n</code></pre> <p>Una vez creado el proyecto, su estructura de directorios y archivos es la siguiente:</p> Estructura inicial del proyecto<pre><code>angular-products/\n\u251c\u2500\u2500 .git/\n\u251c\u2500\u2500 .vscode/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 public/\n\u251c\u2500\u2500 src/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app/\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.config.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.routes.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.spec.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 app.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 styles.css\n\u251c\u2500\u2500 .editorconfig\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 angular.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 tsconfig.app.json\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 tsconfig.spec.json\n</code></pre> <p>En esta estructura, los archivos y carpetas m\u00e1s importantes son:</p> <ul> <li><code>src/</code>: Contiene el c\u00f3digo fuente de la aplicaci\u00f3n.<ul> <li><code>app/</code>: Aqu\u00ed es donde se encuentran los componentes, servicios y m\u00f3dulos de la aplicaci\u00f3n.<ul> <li><code>app.ts</code>: Archivo principal del m\u00f3dulo de la aplicaci\u00f3n.</li> <li><code>app.html</code>: Plantilla HTML principal de la aplicaci\u00f3n.</li> <li><code>app.css</code>: Estilos CSS principales de la aplicaci\u00f3n.</li> <li><code>app.routes.ts</code>: Define las rutas de navegaci\u00f3n de la aplicaci\u00f3n.</li> <li><code>app.config.ts</code>: Configuraciones globales de la aplicaci\u00f3n.</li> </ul> </li> <li><code>index.html</code>: Archivo HTML principal que carga la aplicaci\u00f3n Angular.</li> <li><code>main.ts</code>: Punto de entrada de la aplicaci\u00f3n Angular.</li> <li><code>styles.css</code>: Archivo global de estilos CSS.</li> </ul> </li> <li><code>angular.json</code>: Archivo de configuraci\u00f3n del proyecto Angular.</li> <li><code>package.json</code>: Archivo que define las dependencias y scripts del proyecto.</li> <li><code>README.md</code>: Punto de entrada para la documentaci\u00f3n del proyecto.</li> <li><code>tsconfig.json</code>: Configuraci\u00f3n del compilador TypeScript.</li> <li><code>*.spec.ts</code>: Archivos de pruebas unitarias.</li> </ul>"},{"location":"ud02_framework/05_angular_intro/#componentes","title":"Componentes","text":"<p>Los componentes son las unidades b\u00e1sicas de una aplicaci\u00f3n Angular. Cada componente consta de tres partes principales:</p> <ol> <li>Clase TypeScript: Define la l\u00f3gica del componente.</li> <li>Plantilla HTML: Define la estructura visual del componente.</li> <li>Estilos CSS: Define la apariencia del componente.</li> </ol> <p>Referencia: https://angular.dev/essentials/components</p> <p>Para crear un nuevo componente, podemos usar el siguiente comando:</p> Crear componente<pre><code>ng generate component &lt;nombre-del-componente&gt;\n</code></pre> <p>O en su forma abreviada:</p> Crear componente<pre><code>ng g c &lt;nombre-del-componente&gt;\n</code></pre> <p>Como ejemplo, para crear un componente llamado <code>hello</code>, que mostrar\u00e1 un mensaje de saludo, usar\u00edamos:</p> Crear componente Hello<pre><code>ng g c hello\n</code></pre> <p>Esto generar\u00e1 una carpeta <code>hello/</code> dentro de <code>src/app/</code> con los siguientes archivos:</p> Estructura del componente Hello<pre><code>src\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app.config.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app.routes.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app.spec.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hello\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 hello.css\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 hello.html\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 hello.spec.ts\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 hello.ts\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 main.ts\n\u2514\u2500\u2500 styles.css\n</code></pre> <p>Por ejemplo, un componente simple podr\u00eda verse as\u00ed:</p> hello.tshello.htmlhello.css TS<pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  imports: [],\n  templateUrl: './hello.html',\n  styleUrl: './hello.css'\n})\nexport class Hello {\n  message: string = '\u00a1Hola, Angular!';\n}\n</code></pre> HTML<pre><code>&lt;h1&gt;{{ message }}&lt;/h1&gt;\n</code></pre> CSS<pre><code>h1 {\n  color: blue;\n}\n</code></pre> <p>Se ve una separaci\u00f3n clara entre la l\u00f3gica (TypeScript), la estructura (HTML) y el estilo (CSS), puede que parezca complejo al principio, teniendo en cuenta un ejemplo tan simple, pero esta separaci\u00f3n es fundamental para mantener el c\u00f3digo organizado y facilitar su mantenimiento.</p> <p>Interpolaci\u00f3n de variables <code>{{ }}</code></p> <p>Para crear un enlace entre el valor de una variable en TypeScript y representarlo en la plantilla HTML se utiliza las dobles llaves <code>{{ variable }}</code></p> <p>De esta forma, podemos crear valores din\u00e1micos en html, controlando su valor desde el c\u00f3digo del componente.</p> <p>Referencia: https://angular.dev/guide/templates/binding#render-dynamic-text-with-text-interpolation</p> <p>Para utilizar este componente en la aplicaci\u00f3n, debemos declararlo en el m\u00f3dulo principal (<code>app.ts</code>) y luego incluir su selector (<code>&lt;app-hello&gt;</code>) en la plantilla HTML principal (<code>app.html</code>).</p> app.tsapp.html TS<pre><code>import { Component, signal } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { Hello } from './hello/hello';\n\n@Component({\n  selector: 'app-root',\n  imports: [\n      RouterOutlet,\n      Hello\n  ],\n  templateUrl: './app.html',\n  styleUrl: './app.css'\n})\nexport class App {\n  protected readonly title = signal('angular-products');\n}\n</code></pre> HTML<pre><code>&lt;app-hello /&gt;\n\n&lt;router-outlet /&gt;\n</code></pre> <p>Esto nos permite reutilizar el componente <code>Hello</code> en cualquier parte de la aplicaci\u00f3n simplemente usando su selector <code>&lt;app-hello&gt;</code> en la plantilla HTML. Y Si necesitamos cambiar la l\u00f3gica, la estructura o el estilo del componente, podemos hacerlo de manera independiente sin afectar otras partes de la aplicaci\u00f3n.</p> <p>Modifica el nuevo componente</p> <p>Prueba a a\u00f1adir el componente repetidas veces en <code>app.html</code> y modifica el mensaje en <code>hello.ts</code> para ver c\u00f3mo se refleja en la interfaz.</p> <ul> <li>\u00bfQu\u00e9 ocurre si cambias el color en <code>hello.css</code>?</li> <li>\u00bfY si cambias el mensaje en <code>hello.ts</code>?</li> </ul>"},{"location":"ud02_framework/05_angular_intro/#librer\u00edas-de-estilos","title":"Librer\u00edas de estilos","text":"<p>Antes de continuar a\u00f1diendo m\u00e1s componentes, vamos a mejorar la apariencia de nuestra aplicaci\u00f3n utilizando una librer\u00eda de estilos. En este caso, usaremos Bootstrap, que es una de las librer\u00edas CSS m\u00e1s populares y f\u00e1ciles de usar.</p> <p>Para instalar Bootstrap, ejecuta el siguiente comando en la terminal:</p> Instalar Bootstrap<pre><code>npm install bootstrap\n</code></pre> <p>Para configurarlo como estilo global podr\u00edamos hacerlo de varias formas:</p> <ul> <li>Importarlo directamente en el archivo <code>styles.css</code></li> <li>A\u00f1adirlo en la secci\u00f3n de estilos del archivo <code>angular.json</code></li> </ul> <p>Importante</p> <p>No es necesario hacer las dos importaciones, con una es suficiente.</p> styles.cssangular.json Importar Bootstrap en styles.css<pre><code>@import \"bootstrap/dist/css/bootstrap.min.css\";\n</code></pre> angular.json<pre><code>{\n  ...\n  \"projects\": {\n    \"angular-products\": {\n      ...\n      \"architect\": {\n        \"build\": {\n          \"options\": {\n            \"styles\": [\n              \"node_modules/bootstrap/dist/css/bootstrap.min.css\",\n              \"src/styles.css\"\n            ],\n            ...\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>Documentaci\u00f3n oficial de Bootstrap</p> <p>Puedes consultar la documentaci\u00f3n oficial de Bootstrap para aprender m\u00e1s sobre c\u00f3mo utilizar sus componentes y utilidades:</p> <p>https://getbootstrap.com/docs/5.3/getting-started/introduction/</p>"},{"location":"ud02_framework/05_angular_intro/#librer\u00edas-de-componentes","title":"Librer\u00edas de componentes","text":"<p>Adem\u00e1s de las librer\u00edas de estilos, tambi\u00e9n existen librer\u00edas de componentes que proporcionan componentes preconstruidos y listos para usar en nuestras aplicaciones. Una de las m\u00e1s populares es Angular Material, que implementa los principios de dise\u00f1o de Material Design de Google.</p> Instalar Angular Material<pre><code>ng add @angular/material\n\u2714 Determining Package Manager\n  \u203a Using package manager: npm\n\u2714 Searching for compatible package version\n  \u203a Found compatible package version: @angular/material@20.2.4.\n\u2714 Loading package information from registry\n\u2714 Confirming installation\n\u2714 Installing package\n? Select a pair of starter prebuilt color palettes for your Angular Material theme (Use arrow keys)\n\u276f Azure/Blue         [Preview: https://material.angular.dev?theme=azure-blue]\n  Rose/Red           [Preview: https://material.angular.dev?theme=rose-red]\n  Magenta/Violet     [Preview: https://material.angular.dev?theme=magenta-violet]\n  Cyan/Orange        [Preview: https://material.angular.dev?theme=cyan-orange]\nUPDATE package.json (1962 bytes)\n\u2714 Packages installed successfully.\nCREATE src/custom-theme.scss (1147 bytes)\nUPDATE angular.json (2465 bytes)\nUPDATE src/index.html (502 bytes)\nUPDATE src/styles.css (301 bytes)\n</code></pre> <p>Selecci\u00f3n de paletas de colores</p> <p>Durante la instalaci\u00f3n, se nos pedir\u00e1 que seleccionemos un par de paletas de colores para el tema de Angular Material. Podemos elegir cualquiera de las opciones disponibles.</p> <p>Podemos ver una vista previa de cada tema en la URL proporcionada.</p> <ul> <li>azure-blue</li> <li>rose-red</li> <li>magenta-violet</li> <li>cyan-orange</li> </ul>"},{"location":"ud02_framework/05_angular_intro/#crear-el-primer-componente-con-angular-material","title":"Crear el primer componente con Angular Material","text":"<p>Vamos a crear un componente llamado <code>product-list</code> que mostrar\u00e1 una lista de productos.</p> Crear componente ProductList<pre><code>ng g c product-list\n</code></pre> <p>Esto generar\u00e1 una carpeta <code>product-list/</code> dentro de <code>src/app/</code>.</p> <p>A continuaci\u00f3n, vamos a modificar los archivos del componente:</p> product-list.htmlproduct-list.ts HTML<pre><code>&lt;mat-card appearance=\"outlined\"&gt;\n  &lt;mat-card-header&gt;\n    &lt;mat-card-title class=\"--mat-sys-primary\"&gt;\n      {{title}}\n    &lt;/mat-card-title&gt;\n  &lt;/mat-card-header&gt;\n  &lt;mat-card-content class=\"p-0\"&gt;\n    &lt;div class=\"table-responsive\"&gt;\n      &lt;table class=\"table table-striped\"&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;{{headers.description}}&lt;/th&gt;\n            &lt;th&gt;{{headers.price}}&lt;/th&gt;\n            &lt;th&gt;{{headers.available}}&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          &lt;!-- Aqu\u00ed van los productos. Por ahora se queda vac\u00edo --&gt;\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/div&gt;\n  &lt;/mat-card-content&gt;\n&lt;/mat-card&gt;\n</code></pre> TS<pre><code>import { Component } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-product-list',\n  imports: [MatCardModule],\n  templateUrl: './product-list.html',\n  styleUrl: './product-list.css'\n})\nexport class ProductList {\n  title = 'Mi lista de productos';\n  headers = {\n    description: 'Producto',\n    price: 'Precio',\n    available: 'Disponible'\n  }\n}\n</code></pre>"},{"location":"ud02_framework/05_angular_intro/#insertar-el-componente-en-la-plantilla-principal-de-la-aplicaci\u00f3n","title":"Insertar el componente en la plantilla principal de la aplicaci\u00f3n","text":"<p>Para insertar el nuevo componente, deberemos importarlo dentro de <code>app.ts</code> e incluirlo en <code>app.html</code> mediante su selector <code>&lt;app-product-list&gt;</code></p> app.tsapp.htmlvista previa TS<pre><code>import { Component, signal } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { ProductList } from './product-list/product-list';\n\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet, ProductList],\n  templateUrl: './app.html',\n  styleUrl: './app.css'\n})\nexport class App {\n  protected readonly title = signal('angular-products');\n}\n</code></pre> HTML<pre><code>&lt;div class=\"container\"&gt;\n  &lt;app-product-list&gt;&lt;/app-product-list&gt;\n&lt;/div&gt;\n\n&lt;router-outlet /&gt;\n</code></pre> <p>Si todo ha ido bien, deber\u00edamos ver el componente que muestra una tabla sin contenidos similar a la imagen: </p>"},{"location":"ud02_framework/05_angular_intro/#directivas-if-y-for","title":"Directivas <code>@if</code> y <code>@for</code>","text":"<p>El siguiente paso es a\u00f1adir productos al listado, y el primer paso ser\u00e1 especificar la estructura que tendr\u00e1n los datos mediante una interfaz que llamaremos <code>Product</code></p> Generar nuevo interface Product<pre><code>ng generate interface interfaces/product\n</code></pre> <p>Generar elementos en directorios espec\u00edficos</p> <p>Como se puede observar en el ejemplo, hemos especificado la ruta donde se generar\u00e1 el nuevo interface <code>interfaces/product</code></p> <p>Es importante mantener una buena organizaci\u00f3n en los proyectos, para facilitar la localizaci\u00f3n de los m\u00faltiples archivos fuente que lo componen.</p> <p>Creaci\u00f3n de interfaces en Angular</p> <p>Para generar una nueva interfaz utilizaremos el comando <code>ng</code> de la siguiente forma:</p> <pre><code>ng generate interface &lt;nombre-nueva-interfaz&gt;\n</code></pre> <p>O en su forma abreviada:</p> <pre><code>ng g i &lt;nombre-nueva-interfaz&gt;\n</code></pre> <p>Ahora debemos definir la nueva interfaz estableciendo sus propiedades y tipos de datos:</p> interfaces/Product.ts<pre><code>export interface Product {\n    id: number;\n    description: string;\n    price: number;\n    available: string;\n    imageUrl: string;\n    rating: number;\n}\n</code></pre>"},{"location":"ud02_framework/05_angular_intro/#uso-de-la-nueva-interfaz-para-el-listado-de-productos","title":"Uso de la nueva interfaz para el listado de productos","text":"<p>Ahora deberemos definir un nuevo array de productos en nuestro componente <code>product-list</code>:</p> product-list.ts<pre><code>import { Component } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { Product } from '../interfaces/product';\n\n@Component({\n  selector: 'app-product-list',\n  imports: [MatCardModule],\n  templateUrl: './product-list.html',\n  styleUrl: './product-list.css'\n})\nexport class ProductList {\n  title = 'Mi lista de productos';\n  headers = {\n    description: 'Producto',\n    price: 'Precio',\n    available: 'Disponible'\n  }\n\n  products: Product[] = [\n    {\n      id: 1,\n      description: 'SSD hard drive',\n      available: '2024-10-03',\n      price: 75,\n      imageUrl: 'assets/ssd.jpg',\n      rating: 5\n    }, {\n      id: 2,\n      description: 'LGA1151 Motherboard',\n      available: '2024-09-15',\n      price: 96.95,\n      imageUrl: 'assets/motherboard.jpg',\n      rating: 4\n    }\n  ];\n}\n</code></pre> <p>Y por \u00faltimo, vamos a mostrar la lista de productos usando la directiva <code>@for</code> y controlaremos si el listado est\u00e1 vac\u00edo con <code>@if</code>:</p> product-list.htmlLista con productosLista vac\u00eda product-list.html<pre><code>&lt;mat-card appearance=\"outlined\"&gt;\n  &lt;mat-card-header&gt;\n    &lt;mat-card-title class=\"--mat-sys-primary\"&gt;\n      {{title}}\n    &lt;/mat-card-title&gt;\n  &lt;/mat-card-header&gt;\n  &lt;mat-card-content class=\"p-0\"&gt;\n    @if(products &amp;&amp; products.length) {\n    &lt;div class=\"table-responsive\"&gt;\n      &lt;table class=\"table table-striped\"&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;{{headers.description}}&lt;/th&gt;\n            &lt;th&gt;{{headers.price}}&lt;/th&gt;\n            &lt;th&gt;{{headers.available}}&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          @for(product of products; track product.id) {\n          &lt;tr&gt;\n            &lt;td&gt;{{product.description}}&lt;/td&gt;\n            &lt;td&gt;{{product.price}}&lt;/td&gt;\n            &lt;td&gt;{{product.available}}&lt;/td&gt;\n          &lt;/tr&gt;\n          }\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/div&gt;\n    }\n    @else {\n    &lt;div class=\"alert alert-info\"&gt;\n      No hay productos\n    &lt;/div&gt;\n    }\n  &lt;/mat-card-content&gt;\n&lt;/mat-card&gt;\n</code></pre> <p>Resultado de lista con productos: </p> <p>Resultado de lista vac\u00eda: </p> <p>La directiva <code>@for</code> tiene una propiedad <code>track</code> obligatoria, que permite especificar una propiedad del objeto que se utiliza para identificar cada elemento de la lista. Esto permite que Angular pueda identificar los elementos de la lista y actualizarlos de forma eficiente.</p> <p>@empty</p> <p><code>@for</code> se puede acompa\u00f1ar de <code>@empty</code>, por ejemplo:</p> <pre><code>@for (item of items; track item.name) {\n    &lt;li&gt; {{ item.name }}&lt;/li&gt;\n} @empty {\n    &lt;li&gt; Ho hay elementos. &lt;/li&gt;\n}\n</code></pre> <p>En el ejemplo visto con el listado de productos no se utiliza, porque, cuando no haya elementos, se quiere ocultar toda la tabla, incluyendo cabeceras.</p> <p>Referencias:</p> <ul> <li>https://angular.dev/api/core/@for</li> <li>https://angular.dev/guide/templates/control-flow#conditionally-display-content-with-if-else-if-and-else</li> </ul>"},{"location":"ud02_framework/05_angular_intro/#referencias","title":"Referencias","text":"<ul> <li>Documentaci\u00f3n oficial de Angular</li> <li>Bootstrap</li> <li>Angular Material</li> </ul>"},{"location":"ud02_framework/061_actividad/","title":"2.3.1 \u270d\ufe0f Proyecto: Angular Events. Parte 2.","text":"<p>Partiendo del proyecto creado en la actividad anterior Angular Events. Parte 1. Vamos a continuar creando la aplicaci\u00f3n de gesti\u00f3n de eventos.</p> <p>Cuando termines, en el commit debes incluir el mensaje: v2.0.0.</p>"},{"location":"ud02_framework/061_actividad/#1-a\u00f1adir-im\u00e1genes-a-los-eventos","title":"1. A\u00f1adir im\u00e1genes a los eventos","text":"<p>Vamos a mostrar im\u00e1genes con los eventos. En este caso pod\u00e9is descargar las im\u00e1genes que se proporcionan o usar las que quer\u00e1is. En cualquier caso deb\u00e9is situarlas dentro de la carpeta <code>public/assets</code>, y referenciarlas en los objetos de los eventos.</p> <p>evento1.jpg | evento2.jpg</p> <pre><code>eventos: Evento[] = [{\n    ...\n    image: 'assets/evento1.jpg',\n    ...\n}, {\n    ...\n    image: 'assets/evento2.jpg',\n    ...\n}];\n</code></pre> <p>Posteriormente, hay que mostrar la imagen en la plantilla HTML. Para ello situamos el elemento <code>&lt;img&gt;</code> correspondiente dentro del componentes de <code>&lt;mat-card&gt;</code>. Referencia: https://material.angular.dev/components/card/overview</p> <p>Se debe vincular el atributo <code>src</code> de la imagen a la propiedad <code>evento.image</code> del objeto correspondiente.</p> <p>Adem\u00e1s hay que filtrar el t\u00edtulo del evento con el filtro <code>titlecase</code> (pone la primera letra de cada palabra en may\u00fascula), para poder usarlo deber\u00e1s importar el filtro predefinido <code>TitleCasePipe</code> del m\u00f3dulo <code>@angular/common</code>.</p> <p>El precio se mostrar\u00e1 con el s\u00edmbolo del euro mediante un filtro (ver ejemplo en apuntes) y la fecha en formato <code>dd/MM/y</code> (ver ejemplo en apuntes).</p> <p>Debes conseguir un aspecto similar a la siguiente captura:</p> <p></p>"},{"location":"ud02_framework/061_actividad/#2-filtrar-y-ordenar-eventos","title":"2. Filtrar y ordenar eventos","text":"<p>Vamos a introducir una barra de b\u00fasqueda (igual que en el ejemplo de los apuntes) para filtrar los eventos por t\u00edtulo. Crea un filtro (pipe) personalizado llamado <code>evento-filter</code>. Recibir\u00e1 el array de eventos (<code>Evento[]</code>) y una cadena de b\u00fasqueda (<code>string</code>), y devolver\u00e1 los eventos que contengan la cadena en su t\u00edtulo (pod\u00e9is incluir tambi\u00e9n la b\u00fasqueda en la descripci\u00f3n).</p> <p>Adem\u00e1s, vamos a crear 2 enlaces para ordenar los eventos por fecha o por precio. Al hacer clic sobre estos enlaces se llamar\u00e1 a un m\u00e9todo del componente, que borrar\u00e1 el filtro actual de b\u00fasqueda (ponemos la variable a cadena vac\u00eda <code>''</code>) y ordenar\u00e1 el array en base a la fecha o al precio. Para ordenar por fecha, al estar almacenada como cadena en formato <code>yyyy-mm-dd</code>, puedes ordenar alfab\u00e9ticamente.</p> <p>Importante</p> <p>Si reordenas el array sin borrar el filtro ver\u00e1s como no funciona.</p> <p>Esto pasa porque los pipes en Angular, no detectan los cambios internos en el objeto a filtrar (array de eventos en este caso) para optimizar el rendimiento, por lo que no se volver\u00eda a ejecutar el filtrado y no se actualizar\u00eda la vista.</p> <p>Para forzar los cambios debemos generar un nuevo array. Esto es sencillo utilizando el operador spread \u2018<code>...</code>\u2019 de JavaScript.</p> <pre><code>this.eventos = [...this.eventos].sort(...);\n</code></pre> <p>Cuando no hay filtro siempre funcionar\u00eda porque se devuelve el array original (<code>@for</code> s\u00ed detecta cambios internos) y no el array previamente filtrado por el pipe.</p> <p>Este es el HTML a a\u00f1adir para mostrar tanto el campo de b\u00fasqueda como los 2 enlaces:</p> <pre><code>&lt;nav class=\"navbar navbar-light bg-light justify-content-between mt-3\"&gt;\n    &lt;div class=\"container-fluid\"&gt;\n        &lt;ul class=\"nav\"&gt;\n            &lt;li class=\"nav-item\"&gt;\n                &lt;a class=\"nav-link\"\n                    href=\"#\"\n                    (click)=\"orderDate()\"&gt;Orden por fecha&lt;/a&gt;\n            &lt;/li&gt;\n            &lt;li class=\"nav-item\"&gt;\n                &lt;a class=\"nav-link\"\n                    href=\"#\"\n                    (click)=\"orderPrice()\"&gt;Orden por precio&lt;/a&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;form class=\"d-flex mb-0\"&gt;\n            &lt;input class=\"form-control me-2\"\n                type=\"text\"\n                [(ngModel)]=\"search\"\n                name=\"search\"\n                placeholder=\"Search\"\n                aria-label=\"Search\"&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n&lt;/nav&gt;\n&lt;div class=\"mb-4 row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4\"&gt;\n    &lt;!-- (Aqu\u00ed es donde se listan los eventos) --&gt;\n&lt;/div&gt;\n</code></pre> <p>\u00a1No olvides importar el m\u00f3dulo <code>FormsModule</code> en el componente!</p>"},{"location":"ud02_framework/062_actividad/","title":"2.3.2 \u270d\ufe0f Proyecto: Angular Events. Parte 3.","text":"<p>Partiendo del proyecto creado en la actividad anterior Angular Events. Parte 2, vamos a continuar creando la aplicaci\u00f3n de gesti\u00f3n de eventos.</p> <p>Cuando termines, en el commit debes incluir el mensaje: v3.0.0.</p> <p>Vamos a crear un formulario para insertar un nuevo evento. Por ahora se crear\u00e1 en la misma p\u00e1gina, encima del listado de eventos. Tampoco se guardar\u00e1n en una base de datos por ahora. Ya iremos solucionando estos \"problemas\" m\u00e1s adelante.</p> <p>En lugar de que cada campo de texto haga referencia a una variable o atributo de la clase del componente por separado. Es m\u00e1s recomendable crear un objeto de evento vac\u00edo y referenciar sus campos. De esta forma cuando enviemos el formulario, lo \u00fanico que tendremos que hacer es a\u00f1adir el objeto con sus propiedades ya rellenadas al array de eventos.</p> <pre><code>export class EventosShowComponent {\n    newEvento: Evento = {\n        id: '',\n        title: '',\n        description: '',\n        image: '',\n        price: 0,\n        date: ''\n    };\n    ...\n}\n</code></pre> <p>Esta es la estructura del formulario que se debe implementar. Se ha vinculado con <code>[(ngModel)]</code> el t\u00edtulo del evento.</p> <p>Debes vincular el resto de campos con las propiedades del objeto <code>newEvento</code>:</p> <pre><code>&lt;form class=\"mt-4\" (ngSubmit)=\"addEvento()\"&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"name\" class=\"form-label\"&gt;Nombre&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\"\n            name=\"title\"\n            [(ngModel)]=\"newEvento.title\"\n            placeholder=\"Enter name\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"date\"&gt;Fecha&lt;/label&gt;\n        &lt;input type=\"date\" class=\"form-control\" name=\"date\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"description\" class=\"form-label\"&gt;Descripci\u00f3n&lt;/label&gt;\n        &lt;textarea class=\"form-control\" name=\"description\" rows=\"3\"&gt;&lt;/textarea&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"price\" class=\"form-label\"&gt;Precio&lt;/label&gt;\n        &lt;input type=\"number\" class=\"form-control\" name=\"price\"\n            min=\"0.00\" max=\"10000.00\" step=\"0.01\" /&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"image\" class=\"form-label\"&gt;Imagen&lt;/label&gt;\n        &lt;input type=\"file\" class=\"form-control\"\n            name=\"image\"\n            #fileImage\n            (change)=\"changeImage(fileImage)\"&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Previsualizaci\u00f3n de la imagen --&gt;\n    &lt;img [src]=\"newEvento.image\" alt=\"\" class=\"img-thumbnail\"&gt;\n\n    &lt;div class=\"mb-3\"&gt;\n       &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Create&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/form&gt;\n</code></pre> <p>Como se puede observar, se utiliza el evento <code>ngSubmit</code> para llamar a un m\u00e9todo, <code>addEvento()</code>, cuando el formulario se env\u00eda. Normalmente se usar\u00eda el evento submit, pero <code>ngSubmit</code> tiene ciertas ventajas como la de no recargar la p\u00e1gina autom\u00e1ticamente cuando se lanza.</p> <p>En el m\u00e9todo <code>addEvento()</code>, debemos a\u00f1adir el evento (<code>newEvento</code>) al array de eventos y reiniciar los campos del formulario otra vez. Es decir, volver a asignar a <code>newEvento</code> un nuevo objeto con los campos vac\u00edos. No vale con vaciar los campos del objeto, ya que en array se guarda la referencia al objeto y las modificaciones se reflejar\u00edan en ambos lados (otra opci\u00f3n es generar una copia del objeto, que guardaremos en el array, y entonces, vaciar los campos de <code>newEvento</code>).</p> <p>Para mejorar la visualizaci\u00f3n de la imagen en el formulario, cuando la imagen del evento asociado al formulario est\u00e9 vac\u00eda (no se haya seleccionado ninguna) controla con la directiva <code>@if</code> para evitar que se muestre.</p> <p>No se requiere validar nada del formulario por ahora. Esa parte veremos m\u00e1s adelante como gestionarla con Angular.</p>"},{"location":"ud02_framework/062_actividad/#mostrar-la-descripci\u00f3n-del-evento","title":"Mostrar la descripci\u00f3n del evento","text":"<p>Al a\u00f1adir un evento directamente desde el formulario, los saltos de l\u00ednea tendr\u00e1n el car\u00e1cter <code>\\n</code> en lugar de la etiqueta <code>&lt;br&gt;</code>. Para que se reconozcan estos saltos de l\u00ednea en HTML, podemos hacer 2 cosas.</p> <p>Mediante la propiedad de CSS <code>white-space</code> para reconocer <code>&lt;br&gt;</code> como salto:</p> <pre><code>.card-text {\n    white-space: pre-wrap;\n}\n</code></pre> <pre><code>&lt;p class=\"card-text\"&gt;{{ evento.description }}&lt;/p&gt;\n</code></pre> <p>O usando el atributo <code>innerText</code>:</p> Reconoce el \\n como salto<pre><code>&lt;p class=\"card-text\" [innerText]=\"evento.description\"&gt;&lt;/p&gt;\n</code></pre>"},{"location":"ud02_framework/062_actividad/#convertir-la-imagen-a-base64-y-previsualizarla","title":"Convertir la imagen a Base64 y previsualizarla","text":"<p>Desde un formulario, no deja acceder a la ruta local del archivo cargado (imagen), por lo que la \u00fanica opci\u00f3n que nos queda es transformar esta imagen a <code>Base64</code>, con esto conseguimos codificar datos binarios a texto.</p> <p>Si observas el formulario, ver\u00e1s que el <code>input</code> de la imagen tiene un atributo llamado <code>#fileImage</code> (ya entenderemos que significa m\u00e1s adelante), y el evento <code>(change)</code>, para cuando cambia el archivo seleccionado. Este es el m\u00e9todo que deb\u00e9is a\u00f1adir en el componente:</p> <pre><code>changeImage(fileInput: HTMLInputElement) {\n    if (!fileInput.files || fileInput.files.length === 0) { return; }\n    const reader: FileReader = new FileReader();\n    reader.readAsDataURL(fileInput.files[0]);\n    reader.addEventListener('loadend', e =&gt; {\n        this.newEvento.image = reader.result as string;\n    });\n}\n</code></pre> <p>La imagen convertida la guardar\u00e1 en la propiedad <code>this.newEvento.image</code>. Esta imagen en <code>Base64</code> se puede asignar directamente al campo <code>src</code> de la imagen como se puede observar en el elemento <code>&lt;img&gt;</code> del formulario. De esta manera la podremos previsualizar antes de a\u00f1adir el nuevo evento.</p>"},{"location":"ud02_framework/06_angular_databinding/","title":"2.3 Data binding y pipes en Angular","text":"<ul> <li>Vincular atributos (Property binding)<ul> <li>Aplicar estilos css en l\u00ednea</li> <li>Aplicar clases CSS</li> </ul> </li> <li>Vincular eventos (Event binding)</li> <li>Vinculaci\u00f3n bidireccional (Two-way binding)</li> <li>Filtros (<code>Pipes</code>)<ul> <li>Crear filtros personalizados</li> </ul> </li> <li>Referencias</li> </ul>"},{"location":"ud02_framework/06_angular_databinding/#vincular-atributos-property-binding","title":"Vincular atributos (Property binding)","text":"<p>De forma similar a la <code>{{ interpolaci\u00f3n }}</code>, podemos vincular atributos de elementos HTML a propiedades de la clase del componente. En lugar de usar dobles llaves, usaremos corchetes.</p> <p>Siguiendo con el ejemplo de la primera parte, vamos a mostrar la imagen de cada producto en la primera columna de la tabla. Las im\u00e1genes, al igual que otros archivos multimedia o de texto auxiliares se deben situar en la carpeta <code>public/assets</code> del proyecto, que ser\u00e1 exportada tal cual al compilarlo.</p> products-list.htmlproducts-list.tsIm\u00e1genes Cambios en la plantilla html de productos<pre><code>      &lt;table class=\"table table-striped\"&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;{{headers.image}}&lt;/th&gt;\n            &lt;th&gt;{{headers.description}}&lt;/th&gt;\n            &lt;th&gt;{{headers.price}}&lt;/th&gt;\n            &lt;th&gt;{{headers.available}}&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          @for(product of products; track product.id) {\n          &lt;tr&gt;\n            &lt;td&gt;&lt;img [src]=\"product.imageUrl\"&gt;&lt;/td&gt;\n            &lt;td&gt;{{product.description}}&lt;/td&gt;\n            &lt;td&gt;{{product.price}}&lt;/td&gt;\n            &lt;td&gt;{{product.available}}&lt;/td&gt;\n          &lt;/tr&gt;\n          }\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n</code></pre> Cambios en el listado de productos<pre><code>  products: Product[] = [\n  {\n    id: 1,\n    description: 'SSD hard drive',\n    available: '2024-10-03',\n    price: 75,\n    imageUrl: 'assets/ssd.jpg',\n    rating: 5\n  }, {\n    id: 2,\n    description: 'LGA1151 Motherboard',\n    available: '2024-09-15',\n    price: 96.95,\n    imageUrl: 'assets/motherboard.png',\n    rating: 4\n  },\n  {\n    id: 3,\n    description: 'Kingston DDR4 3200 MHz 16GB 2x8GB CL16',\n    available: '2024-11-10',\n    price: 42.95,\n    imageUrl: 'assets/ssd.jpg',\n    rating: 4\n  }\n];\n</code></pre> <p>Im\u00e1genes usadas en el ejemplo:</p> <p> </p> <p>Ubicar dentro del directorio <code>public/assets</code></p> <p>Se podr\u00eda usar la interpolaci\u00f3n para mostrar la imagen, pero no es recomendable. Si la imagen no existe, se mostrar\u00eda el texto <code>undefined</code> en lugar de la imagen. Adem\u00e1s, si se inspecciona el c\u00f3digo HTML generado, se puede ver que la imagen se ha cargado correctamente.</p> <pre><code>&lt;img [src]=\"product.imageUrl\" alt=\"\"&gt; &lt;!-- \u2714\ufe0f CORRECTO: vinculaci\u00f3n de atributo --&gt;\n\n&lt;img src={{product.imageUrl}} alt=\"\"&gt; &lt;!-- \u274c EVITAR!: interpolaci\u00f3n --&gt;\n</code></pre> <p>En el ejemplo se puede observar que las im\u00e1genes se muestran en su tama\u00f1o orinal, ocupando mucho espacio lo que dificulta la lectura de la tabla. Para solucionarlo vamos a a\u00f1adir CSS a la plantilla de un componente, se usa el archivo de estilo asociado a la plantilla \u2192 <code>src/app/products-list/product-list.css</code>:</p> products-list.css<pre><code>td {\n    vertical-align: middle;\n}\n\ntd img {\n    height: 50px;\n}\n</code></pre> <p>Resultado:</p> <p></p>"},{"location":"ud02_framework/06_angular_databinding/#aplicar-estilos-css-en-l\u00ednea","title":"Aplicar estilos css en l\u00ednea","text":"<p>En lugar de usar el atributo <code>style</code> para vincular estilos CSS, podemos vincular propiedades directamente en un elemento.</p> <ul> <li> <p>Si la propiedad <code>isEven: boolean</code> es <code>true</code>, el color de fondo de la celda ser\u00e1 rojo, y cuando sea <code>false</code> pasar\u00e1 a ser verde:</p> Propiedad vinculadaResultado <pre><code>&lt;td [style.background-color]=\"isEven ? 'red' : 'green'\"\"&gt;...&lt;/td&gt;\n</code></pre> <pre><code>&lt;td style=\"background-color:red\"&gt;...&lt;/td&gt;\n</code></pre> </li> <li> <p>Para especificar unidades (<code>px</code>, <code>em</code>, <code>rem</code>, ...), se a\u00f1ade como sufijo al nombre de la propiedad CSS, separado por un punto.</p> Propiedad vinculada con unidadesResultado <pre><code>&lt;td [style.height.px]=\"{imageHeight}\"&gt;...&lt;/td&gt;\n</code></pre> <pre><code>&lt;td style=\"height:100px\"&gt;...&lt;/td&gt;\n</code></pre> </li> <li> <p>Para asignar varios estilos dentro del componente es recomendable crear un objeto dentro del componente:</p> <pre><code>@Component({\n    selector: 'app-test',\n    templateUrl: './test.component.html',\n    styleUrls: ['./test.component.css']\n})\n\nexport class TestComponent {\n    isAuth = true\n    cellHeight = 100\n\n    cellStyles = {\n        'background-color': this.isAuth ? 'green' : 'red',\n        height: this.cellHeight + 'px'\n    };\n    ...\n}\n</code></pre> <pre><code>&lt;td [style]=\"cellStyles\"&gt;...&lt;/td&gt;\n</code></pre> </li> </ul>"},{"location":"ud02_framework/06_angular_databinding/#aplicar-clases-css","title":"Aplicar clases CSS","text":"<p>De forma similar a los estilos, podemos asignar clases CSS a los elementos</p> <pre><code>&lt;td [class.even]=\"$even\" [class.last]=\"$last\"&gt;\n</code></pre> <p>Variables de <code>@for</code></p> <p>Dentro de los bloques <code>@for</code> existen variables impl\u00edcitas:</p> Variable Tipo Uso <code>$count</code> <code>number</code> Total de elementos del array <code>$index</code> <code>number</code> \u00cdndice del elemento actual del bucle <code>$first</code> <code>boolean</code> Es primer elemento <code>$last</code> <code>boolean</code> Es \u00faltimo elemento <code>$even</code> <code>boolean</code> Es elemento par <code>$odd</code> <code>boolean</code> Es elemento impar <p>Referencia: https://angular.dev/guide/templates/control-flow#contextual-variables-in-for-blocks</p> <p>En el caso de tengamos que aplicar varias clases a la misma condici\u00f3n, podemos utilizar la directiva <code>ngClass</code></p> <pre><code>@Component({\n    selector: 'app-test',\n    templateUrl: './test.component.html',\n    styleUrls: ['./test.component.css']\n})\n\nexport class TestComponent {\n    isActive = true;\n\n    classes = {\n        'active': isActive,\n        'text-primary': isActive\n    ...\n}\n</code></pre> <pre><code>&lt;td [ngClass]=\"classes\"&gt;...&lt;/td&gt;\n</code></pre>"},{"location":"ud02_framework/06_angular_databinding/#vincular-eventos-event-binding","title":"Vincular eventos (Event binding)","text":"<p>Al igual que con los atributos, podemos vincular eventos de elementos HTML a m\u00e9todos de la clase del componente. En este caso, la informaci\u00f3n fluye en sentido contrario, desde la plantilla (HTML) al componente (TS).</p> <p>Para vincular un evento, se usa el nombre del evento entre par\u00e9ntesis, seguido de un igual y el nombre del m\u00e9todo a ejecutar. Por ejemplo, si queremos ejecutar el m\u00e9todo <code>onSelectedItem()</code> cuando se haga <code>click</code> en un elemento \u2192 <code>(click)=\"onSelectedItem()\"</code>.</p> <p>Para nuestro ejemplo de listado de productos, se va a a\u00f1adir un bot\u00f3n para ocultar y mostrar las im\u00e1genes de la tabla:</p> products-list.tsproducts-list.html A\u00f1adir nuevo m\u00e9todo para alternar la imagen showImage()<pre><code>import { Component } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { Product } from '../interfaces/product';\n\n@Component({\n  selector: 'app-product-list',\n  imports: [MatCardModule],\n  templateUrl: './product-list.html',\n  styleUrl: './product-list.css'\n})\nexport class ProductList {\n\n  showImage = true\n\n  toggleImage(): void {\n    this.showImage = !this.showImage\n  }\n\n  title = 'Mi lista de productos';\n  headers = {\n    description: 'Producto',\n    price: 'Precio',\n    available: 'Disponible',\n    image: 'Imagen'\n  }\n\n  products: Product[] = [\n    {\n      id: 1,\n      description: 'SSD hard drive',\n      available: '2024-10-03',\n      price: 75,\n      imageUrl: 'assets/ssd.jpg',\n      rating: 5\n    }, {\n      id: 2,\n      description: 'LGA1151 Motherboard',\n      available: '2024-09-15',\n      price: 96.95,\n      imageUrl: 'assets/motherboard.png',\n      rating: 4\n    },\n    {\n      id: 3,\n      description: 'Kingston DDR4 3200 MHz 16GB 2x8GB CL16',\n      available: '2024-11-10',\n      price: 42.95,\n      imageUrl: 'assets/ssd.jpg',\n      rating: 4\n    }\n  ];\n}\n</code></pre> A\u00f1adir bot\u00f3n y asociar evento<pre><code>&lt;mat-card appearance=\"outlined\"&gt;\n  &lt;mat-card-header&gt;\n    &lt;mat-card-title class=\"--mat-sys-primary\"&gt;\n      {{title}}\n    &lt;/mat-card-title&gt;\n  &lt;/mat-card-header&gt;\n  &lt;mat-card-content class=\"p-0\"&gt;\n    @if(products &amp;&amp; products.length) {\n    &lt;div class=\"table-responsive\"&gt;\n      &lt;table class=\"table table-striped\"&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;\n              &lt;button class=\"btn btn-sm\"\n                      [class.btn-danger]=\"showImage\"\n                      [class.btn-primary]=\"!showImage\"\n                      (click)=\"toggleImage()\"&gt;\n                {{ showImage ? 'Ocultar' : 'Mostrar' }} {{ headers.image }}\n              &lt;/button&gt;\n            &lt;/th&gt;\n            &lt;th&gt;{{headers.description}}&lt;/th&gt;\n            &lt;th&gt;{{headers.price}}&lt;/th&gt;\n            &lt;th&gt;{{headers.available}}&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          @for(product of products; track product.id) {\n          &lt;tr&gt;\n            @if(showImage) {\n            &lt;td&gt;&lt;img [src]=\"product.imageUrl\"\n                  alt=\"imagen del producto\"\n                  [title]=\"product.description\" /&gt;&lt;/td&gt;\n            }\n            @else {\n            &lt;td&gt;&lt;/td&gt;\n            }\n            &lt;td&gt;{{product.description}}&lt;/td&gt;\n            &lt;td&gt;{{product.price}}&lt;/td&gt;\n            &lt;td&gt;{{product.available}}&lt;/td&gt;\n          &lt;/tr&gt;\n          }\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/div&gt;\n    }\n    @else {\n    &lt;div class=\"alert alert-info\"&gt;\n      No hay productos\n    &lt;/div&gt;\n    }\n  &lt;/mat-card-content&gt;\n&lt;/mat-card&gt;\n</code></pre> <p>Eventos m\u00e1s comunes</p> <p>Eventos de rat\u00f3n:</p> Evento Descripci\u00f3n Ejemplo de uso <code>click</code> Clic izquierdo sobre un elemento Activar botones, seleccionar elementos <code>mouseover</code> Se dispara cuando el cursor del rat\u00f3n entra en el area del elemento Mostrar informaci\u00f3n emergente (tootips) o efectos de foco <code>mouseout</code> Se dispara cuando el cursor del rat\u00f3n sale del \u00e1rea del elemento Ocultar informaci\u00f3n emergente <p>Eventos de formulario:</p> Evento Descripci\u00f3n Ejemplo de uso <code>submit</code> Se dispara antes de enviar el formulario Realizar validaci\u00f3n de datos antes del env\u00edo <code>change</code> Se dispara cuando el valor cambia y el elemento pierde el foco Actualizar precios o c\u00e1lculos <code>input</code> Se dispara cada vez que el valor cambia (mientras se escribe) B\u00fasquedas en tiempo real o contador de caracteres <p>Eventos de teclado:</p> Evento Descripci\u00f3n Ejemplo de uso <code>keydown</code> Se dispara al presionar una tecla Detectar combinaciones de teclas o prevenir la escritura de ciertos caracteres <code>keyup</code> Se dispara al soltar una tecla Ejecutar evento asociado a un atajo de teclado (shortcut key) <p>Existen muchos m\u00e1s eventos, puedes consultar un listado completo en el siguiente enlace: https://developer.mozilla.org/en-US/docs/Web/API/Element#events</p>"},{"location":"ud02_framework/06_angular_databinding/#vinculaci\u00f3n-bidireccional-two-way-binding","title":"Vinculaci\u00f3n bidireccional (Two-way binding)","text":"<p>Hemos visto como vincular de forma unidireccional los valores de atributos HTML (componente \u2192 plantilla) y los eventos generados (plantilla \u2192 componente). Existe tambi\u00e9n un tipo de vinculaci\u00f3n bidireccional a trav\u00e9s de la directiva <code>ngModel</code>, utilizada generalmente con elementos de tipo <code>&lt;input&gt;</code>.</p> <p>Se utiliza combinando par\u00e9ntesis y corchetes <code>[(ngModel)]</code>, se vincula el valor del campo del formulario a una propiedad del componente, de tal forma que si cambiamos el valor en la propiedad, se har\u00eda visible ese cambio en el campo y viceversa, si cambiamos el valor del campo, cambia el de la propiedad del componente.</p> <p>La directiva <code>ngModel</code> se encuentra en el m\u00f3dulo <code>FormsModule</code>, por lo que hay que importarlo en el m\u00f3dulo de la aplicaci\u00f3n.</p> products-list.ts<pre><code>...\nimport { FormsModule } from '@angular/forms';\n...\n@Component({\n  ...\n  imports: [FormsModule],\n  ...\n})\nexport class ProductsList {\n    ...\n</code></pre> <p>A continuaci\u00f3n, se a\u00f1ade un campo de texto para filtrar los productos por nombre. Para ello, se va a crear una nueva propiedad en el componente llamada <code>filterText</code> y se va a vincular con el campo de texto.</p> products-list.html<pre><code>export class ProductsList {\n ...\n filterSearch = ''; // Podr\u00edamos poner un valor por defecto\n ...\n</code></pre> <p>A continuaci\u00f3n se crea un formulario, antes de la tabla de productos con un campo de texto, que se usar\u00e1 para filtrar los productos. Adem\u00e1s, se mostrar\u00e1 un texto al lado con el valor actual de la propiedad <code>filterSearch</code>, para observar como cambia al escribir en el campo de texto.</p> products-list.html<pre><code>  ...\n  &lt;mat-card-content class=\"p-0\"&gt;\n    @if(products &amp;&amp; products.length) {\n    &lt;form class=\"form p-3 border-bottom\"&gt;\n      &lt;div class=\"form-group row\"&gt;\n        &lt;label class=\"col-form-label col-sm-2 text-sm-end\"\n               for=\"filterDesc\"&gt;Filtro:&lt;/label&gt;\n        &lt;div class=\"col-sm-5\"&gt;\n          &lt;input type=\"text\"\n                 [(ngModel)]=\"filterSearch\"\n                 class=\"form-control\"\n                 name=\"filterDesc\"\n                 id=\"filterDesc\"\n                 placeholder=\"filtro...\"&gt;\n        &lt;/div&gt;\n        &lt;label class=\"col-form-label col-sm-5\"&gt;\n          Filtrando por: {{filterSearch}}&lt;/label&gt;\n      &lt;/div&gt;\n    &lt;/form&gt;\n    &lt;div class=\"table-responsive\"&gt;\n        ...\n</code></pre> <p></p>"},{"location":"ud02_framework/06_angular_databinding/#filtros-pipes","title":"Filtros (<code>Pipes</code>)","text":"<p>Los filtros o pipes son funciones que se aplican a los datos antes de mostrarlos en la plantilla, transforman la informaci\u00f3n antes de mostrarla. Angular dispone de varios filtros predefinidos, pero tambi\u00e9n se pueden crear filtros personalizados.</p> <p>Los filtros se aplican despu\u00e9s de la propiedad o expresi\u00f3n que se quiere mostrar, separados por el car\u00e1cter <code>|</code>.</p> <p>Algunos ejemplos de filtros predefinidos:</p> Nombre Descripci\u00f3n <code>CurrencyPipe</code> Transforma un n\u00famero en una cadena de texto que incluya la moneda, seg\u00fan las reglas regionales establecidas. <code>DatePipe</code> Dar formato a una fecha siguiendo la reglas regionales. <code>DecimalPipe</code> Transforma un numero a una cadena de texto decimal siguiendo las reglas regionales. <code>LowerCasePipe</code> Transforma un texto a min\u00fasculas <code>PercentPipe</code> Transforma un n\u00famero a una cadena con porcentaje siguiendo las reglas regionales. <code>SlicePipe</code> Crea un nuevo Array o String conteniendo un subconjunto de elementos. <code>TitleCasePipe</code> Transforma un texto a formato t\u00edtulo (la primera letra de cada palabra en may\u00fasculas) <code>UpperCasePipe</code> Transforma un texto a may\u00fasculas <p>Referencia: https://angular.dev/guide/templates/pipes#built-in-pipes</p> <p>A modo de ejemplo de uso, vamos a aplicar el filtro <code>uppercase</code> a un elemento de nuestro ejemplo:</p> products-list.ts<pre><code>import { Component } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { Product } from '../interfaces/product';\nimport { FormsModule } from '@angular/forms';\nimport { UpperCasePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-product-list',\n  imports: [\n    MatCardModule,\n    FormsModule,\n    UpperCasePipe\n  ],\n  templateUrl: './product-list.html',\n  styleUrl: './product-list.css'\n})\nexport class ProductList {\n  ...\n</code></pre> products-list.html<pre><code>            &lt;td&gt;&lt;img [src]=\"product.imageUrl\" alt=\"\"\n                   [title]=\"product.description | uppercase\"&gt;&lt;/td&gt;\n</code></pre> <p>El filtro <code>uppercase</code> convierte el texto a may\u00fasculas.</p> <p></p> <p>Algunos filtros admiten par\u00e1metros, que se indican entre par\u00e9ntesis.</p> <p>El filtro <code>currency</code> admite como par\u00e1metro el s\u00edmbolo de la moneda, por defecto es <code>$</code>. Para indicar el s\u00edmbolo del euro, se debe indicar como par\u00e1metro <code>'EUR':'symbol'</code>. Tambi\u00e9n se puede indicar el n\u00famero de decimales, por defecto son 2.</p> <p>El filtro <code>date</code> admite como par\u00e1metro el formato de la fecha. Para indicar el formato, se debe indicar, en este caso <code>dd/MM/y</code>.</p> products-list.html<pre><code>    ...\n        &lt;td&gt;{{ product.price | currency : 'EUR' : 'symbol' }}&lt;/td&gt;\n        &lt;td&gt;{{ product.available | date:'dd/MM/y' }}&lt;/td&gt;\n    ...\n</code></pre> <p></p> <p>LOCALE_ID</p> <p>En el ejemplo se puede observar que aparece el s\u00edmbolo del euro (\u20ac) pero sigue el formato USD, poniendo el s\u00edmbolo al principio de la cifra.</p> <p>Lo solucionaremos m\u00e1s adelante.</p>"},{"location":"ud02_framework/06_angular_databinding/#crear-filtros-personalizados","title":"Crear filtros personalizados","text":"<p>Como ya se ha visto, los filtros permiten transformar los datos antes de mostrarlos en la plantilla. Tambi\u00e9n podemos crear filtros personalizados. Por ejemplo, un filtro que transforme el array de productos en un array de productos filtrados por el nombre.</p> <p>Se utiliza el comando <code>ng generate pipe</code> para crear un filtro. En este caso, se va a crear un filtro llamado <code>product-filter</code> dentro del directorio <code>pipes</code>:</p> <pre><code>ng generate pipe pipes/product-filter\n</code></pre> <p>Recuerda utilizar la sintaxis <code>snake-case</code> desde la l\u00ednea de comandos. En este caso, el filtro se llamar\u00e1 <code>productFilter</code> y su clase <code>ProductFilterPipe</code>.</p> pipes/product-filter.pipe.ts<pre><code>import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'productFilter'\n})\nexport class ProductFilterPipe implements PipeTransform {\n\n  transform(value: unknown, ...args: unknown[]): unknown {\n    return null;\n  }\n\n}\n</code></pre> <p>Se puede observar que es similar a la clase de un componente, pero usa el decorador <code>@Pipe</code>, para que <code>Angular</code> sepa que se trata de un filtro. El nombre, <code>productFilter</code>, es el que se usar\u00e1 en la plantilla para aplicar el filtro.</p> <p>Esta clase implementa la interfaz <code>PipeTransform</code>, que implementa el m\u00e9todo <code>transform</code>, que ser\u00e1 el encargado de aplicar el filtro. Gracias a TypeScript, se puede limitar el tipo de datos de entrada (par\u00e1metro <code>value</code>) para que sea un array de productos. En este caso s\u00f3lo tendr\u00e1 un par\u00e1metro, llamado <code>filterBy</code> que ser\u00e1 un <code>string</code> para filtrar productos por nombre.</p> pipes/product-filter.pipe.ts<pre><code>import { Pipe, PipeTransform } from '@angular/core';\nimport { Product } from '../interfaces/product';\n\n@Pipe({\n  name: 'productFilter'\n})\nexport class ProductFilterPipe implements PipeTransform {\n\n  transform(products: Product[], filterBy: string): Product[] {\n    if (filterBy) {\n      // aplica el m\u00e9todo filter de javascript sobre un array\n      // y devuelve un nuevo array con los elementos que cumplan la condici\u00f3n\n      //\n      // filter toma como par\u00e1metro una funci\u00f3n an\u00f3nima que devuelve un booleano\n      //    (e) =&gt; { }\n      //    (product: Product) =&gt; { return ... }\n      //\n      // Para acada elemento del array:\n      //    si devuelve true se incluye el elemento\n      //    si devuelve false se excluye\n      return products.filter((product: Product) =&gt; {\n        return this.includesText(product.description, filterBy)\n      })\n    }\n\n    // si no se indica un filtro, se devuelve el array original (sin filtrar)\n    return products;\n  }\n\n    /**\n     * Para ayudar a entender mejor el filtro, se crea un m\u00e9todo aparte\n     * A la hora de buscar un texto, es buena pr\u00e1ctica pasarlo a min\u00fasculas\n     * en el ejemplo se utiliza toLocaleLowerCase() que tiene en cuenta\n     * acentos y caracteres no est\u00e1ndar del alfabeto ingl\u00e9s\n     * Recibe dos par\u00e1metros\n     * - originalText: Texto en el que realizaremos la b\u00fasqueda\n     * - text:         Texto que debe incluir\n     * Devuelve true si el texto est\u00e1 incluido\n     **/\n    includesText(originalText: string, text: string): boolean {\n\n    // convertimos los par\u00e1metros a min\u00fascula\n    const lowercaseOriginal = originalText.toLocaleLowerCase()\n    const lowercaseText = text.toLocaleLowerCase()\n\n    // busca el texto y devuelve verdadero o falso\n    // dependiendo si el texto est\u00e1 incluido en la cadena original\n    return lowercaseOriginal.includes(lowercaseText)\n  }\n\n}\n</code></pre> <p>Ahora se puede usar el filtro en la plantilla del componente. Primero se importa el filtro y, en la plantilla <code>products-list.html</code>, se aplica el filtro a los productos que recorre la directiva <code>@for</code>. Se a\u00f1ade el filtro <code>productFilter</code> y se le pasa como par\u00e1metro el valor de la propiedad <code>filterSearch</code>.</p> products-list.ts<pre><code>...\nimport { ProductFilterPipe } from '../pipes/product-filter.pipe';\n\n@Component({\n  ...\n  imports: [\n    ...\n    ProductFilterPipe\n  ],\n  ...\n})\nexport class ProductsList {\n  ...\n</code></pre> products-list.html<pre><code>    ...\n    @for(product of products | productFilter:filterSearch; track product.id) {\n    ...\n</code></pre> <p></p>"},{"location":"ud02_framework/06_angular_databinding/#referencias","title":"Referencias","text":"<ul> <li>CSS class and style property bindings</li> <li>Adding event listeners</li> <li>Two-way binding</li> <li>Pipes</li> </ul>"},{"location":"ud03_components/","title":"UD3: Componentes en Angular","text":"<ul> <li>3.1 - Componentes y Servicios en Angular<ul> <li>3.1.1 \u270d\ufe0f Proyecto: Angular Events. Parte 4.</li> </ul> </li> </ul>"},{"location":"ud03_components/071_actividad/","title":"3.1.1 \u270d\ufe0f Proyecto: Angular Events. Parte 4.","text":"<p>Partiendo del proyecto creado en la actividad anterior Angular Events. Parte 3, vamos a continuar creando la aplicaci\u00f3n de gesti\u00f3n de eventos.</p> <p>Cuando termines, en el commit debes incluir el mensaje: v4.0.0.</p>"},{"location":"ud03_components/071_actividad/#componente-evento-item","title":"Componente <code>evento-item</code>","text":"<p>Crea un componente llamado <code>evento-item</code>. Este componente representar\u00e1 un evento por lo que recibir\u00e1 los datos del evento como atributo de entrada (<code>@Input</code>). La plantilla de este nuevo componente contendr\u00e1 el interior el elemento <code>&lt;div class=\"card\"&gt;</code> (no incluido). La clase <code>card</code> ponla directamente al elemento <code>&lt;eventoitem&gt;</code>.</p> <p>Adem\u00e1s, vamos a poner un bot\u00f3n para borrar los eventos. Este bot\u00f3n se situar\u00e1 justo despu\u00e9s del p\u00e1rrafo de la descripci\u00f3n, as\u00ed:</p> <pre><code>&lt;div class=\"text-end\"&gt;\n  &lt;button class=\"btn btn-danger ml-3\" (click)=\"deleteEvento()\"&gt;Delete&lt;/button&gt;\n&lt;/div&gt;\n</code></pre> <p>Cuando hagamos clic en el bot\u00f3n, el componente emitir\u00e1 una se\u00f1al al padre (sin valor asociado \u2192 <code>EventEmitter&lt;void&gt;</code>), que le indicar\u00e1 que debe eliminar el evento del array. No hace falta emitir ning\u00fan valor porque el componente padre puede usar la variable local del <code>@for</code> que representa al objeto del evento para saber cual tiene que borrar.</p>"},{"location":"ud03_components/071_actividad/#borrar-un-evento-cuando-se-est\u00e1-filtrando","title":"Borrar un evento cuando se est\u00e1 filtrando","text":"<p>Por defecto en Angular, por razones de rendimiento, los filtros (pipes) se comportan como filtros puros (pure pipes). Esto quiere decir, que s\u00f3lo actualizan los datos mostrados (ejecutan el filtro otra vez) si se cambia la referencia al objeto (o array) que se est\u00e1 filtrando, en lugar de si simplemente modificamos dicho objeto.</p> <p>Esto sucede porque es mucho m\u00e1s simple (en t\u00e9rminos de rendimiento) comprobar peri\u00f3dicamente si una referencia a memoria (n\u00famero) ha cambiado, que analizar en profundidad dicho objeto buscando cambios. Por ello, si borramos un elemento del array con la funci\u00f3n <code>splice()</code>, que modifica el array original, y estamos filtrando los eventos por nombres, parecer\u00e1 que no se ha borrado. La vista no se actualiza porque el filtro no se vuelve a ejecutar.</p> <p>Tenemos varias soluciones pero todas implican generar un nuevo array:</p> <ul> <li> <p>M\u00e9todo 1 (Recomendado): Borrar con el m\u00e9todo <code>filter</code>.</p> <p>Usando <code>filter</code> para borrar un elemento del array</p> <pre><code>this.eventos = this.eventos.filter(item =&gt; item.id !== eventoABorrar.id);\n</code></pre> <p>Crea un nuevo array con todos los elementos que cumplen la condici\u00f3n dada (en este caso, todos los elementos cuyo <code>id</code> es distinto al del evento que queremos borrar). Por lo que el array resultante no tendr\u00e1 el evento que queremos borrar.</p> </li> <li> <p>M\u00e9todo 2: Usando <code>splice</code> para borrar la posici\u00f3n del elemento, y crear despu\u00e9s una copia del array y reasignarla (peor soluci\u00f3n que la anterior): <code>this.eventos = [...this.eventos]</code>. Para ello hemos usado el operador de propagaci\u00f3n spread (...)</p> <p>Usando <code>splice</code> y creando una copia del array</p> <pre><code>// Obtener el \u00edndice del elemento a borrar\nconst index = this.eventos.indexOf(eventoABorrar);\n\n// Si existe, borrarlo\nif (index &gt; -1) {\n    // Borrar el elemento\n    this.eventos.splice(index, 1);\n    // Crear una copia del array para que el filtro se vuelva a ejecutar\n    this.eventos = [...this.eventos];\n}\n</code></pre> <p><code>splice</code> borra el elemento del array original, y despu\u00e9s <code>this.eventos = [...this.eventos]</code> crea una copia del array (con el operador de propagaci\u00f3n spread) y la reasigna a la variable, por lo que el filtro se vuelve a ejecutar.</p> </li> </ul> <p>impure pipes</p> <p>Otra soluci\u00f3n no recomendada por su algo coste en rendimiento, es declarar el filtro como impuro, estableciendo la propiedad <code>pure</code> a <code>false</code> en el decorador <code>@Pipe</code>, como se puede observar en el siguiente enlace: Detecting change within arrays or objects</p>"},{"location":"ud03_components/071_actividad/#componente-evento-add","title":"Componente <code>evento-add</code>","text":"<p>Crea un componente llamado <code>evento-add</code> y sit\u00faa ah\u00ed el formulario y toda la l\u00f3gica del mismo (transformar la imagen a <code>base64</code>, etc.), adem\u00e1s del HTML del formulario, claro est\u00e1.</p> <p>Este componente emitir\u00e1 el objeto del evento al componente padre cuando enviemos el formulario. El componente padre (<code>eventos-show</code>) lo recoger\u00e1 (con la variable especial <code>$event</code> en el HTML) y lo a\u00f1adir\u00e1 al array de eventos.</p> <p>En este caso se aplica el mismo principio que al borrar. Si estamos filtrando los eventos, no actualizar\u00e1 los cambios (evento a\u00f1adido) si no detecta un array nuevo. La soluci\u00f3n es crear una copia del array a\u00f1adiendo el nuevo elemento al final.</p> <pre><code>this.eventos = [...this.eventos, nuevoEvento]\n</code></pre>"},{"location":"ud03_components/071_actividad/#servicio-evento","title":"Servicio <code>evento</code>","text":"<p>Crea un servicio llamado <code>evento</code> (<code>EventoService</code>), y dentro del mismo, un m\u00e9todo <code>getEventos()</code> que devuelva los eventos iniciales, en lugar de tenerlos en el componente <code>eventos-list</code> directamente. Desde este componente accede al servicio para obtener dichos eventos.</p>"},{"location":"ud03_components/07_components/","title":"3.1 Componentes y Servicios en Angular","text":"<ul> <li>Componentes anidados<ul> <li>Anidando componentes</li> <li>Soluci\u00f3n. Selector de atributo y clase</li> <li>Anidar <code>StarRating</code></li> </ul> </li> <li>Comunicaci\u00f3n entre componentes anidados<ul> <li>Decorador <code>@input</code></li> <li>Decorador <code>@Output</code></li> </ul> </li> <li>Servicios. Inyecci\u00f3n de dependencias</li> </ul>"},{"location":"ud03_components/07_components/#componentes-anidados","title":"Componentes anidados","text":"<p>Tal como se vi\u00f3 en la unidad anterior, los componentes pueden anidarse unos dentro de otros. Por ejemplo, cada elemento de una lista puede separarse en un componente independiente.</p> <p>Para el ejemplo se va a crear un nuevo componente llamado <code>product-item</code> que representar\u00e1 cada uno de los productos de la lista. El componente <code>product-list</code> se modificar\u00e1 para que utilice el nuevo componente.</p> <pre><code>ng g component product-item\n</code></pre> <p>Tambi\u00e9n se crear\u00e1 un componente que servir\u00e1 para puntuar un producto, que estar\u00e1 anidado dentro de <code>product-item</code>.</p> <pre><code>ng g component star-rating\n</code></pre>"},{"location":"ud03_components/07_components/#anidando-componentes","title":"Anidando componentes","text":"<p>El nuevo componente <code>product-item</code> se utilizar\u00e1 para representar cada uno de los productos de la lista. De momento, se usar\u00e1n datos est\u00e1ticos para representar los productos, m\u00e1s adelante obtendr\u00e1 los datos del componente padre.</p> product-item.ts<pre><code>import { Component } from '@angular/core';\nimport { Product } from '../interfaces/product';\n\n@Component({\n  selector: 'app-product-item',\n  imports: [],\n  templateUrl: './product-item.html',\n  styleUrl: './product-item.css'\n})\nexport class ProductItem {\n  product: Product = {\n    id: 0,\n    description: 'Product placeholder',\n    available: '2024-01-01',\n    price: 9999,\n    imageUrl: 'https://placehold.co/400',\n    rating: 5\n  };\n\n  showImage = true;\n}\n</code></pre> <p>Se almacena la informaci\u00f3n del producto en una variable llamada <code>product</code> que se utilizar\u00e1 a mode de placeholder para maquetar la informaci\u00f3n. La plantilla HTML del componente se modificar\u00e1 para que utilice esta informaci\u00f3n.</p> product-item.html<pre><code>&lt;tr&gt;\n  &lt;td&gt;&lt;img [src]=\"product.imageUrl\"\n         [class.d-none]=\"!showImage\"\n         alt=\"imagen del producto\"\n         [title]=\"product.description | uppercase\" /&gt;&lt;/td&gt;\n  &lt;td&gt;{{product.description}}&lt;/td&gt;\n  &lt;td&gt;{{product.price | currency : 'EUR' : 'symbol'}}&lt;/td&gt;\n  &lt;td&gt;{{product.available | date: 'dd/MM/y'}}&lt;/td&gt;\n&lt;/tr&gt;\n</code></pre> <p>B\u00e1sicamente, se ha copiado el c\u00f3digo HTML de la tabla de la lista de productos, para que muestre una fila de la tabla <code>&lt;tr&gt;</code>. Ahora se puede modificar el componente <code>products-list</code> para que utilice el nuevo componente.</p> products-list.html<pre><code>...\n        &lt;tbody&gt;\n          @for(product of products | productFilter:filterSearch; track product.id) {\n          &lt;app-product-item&gt;&lt;/app-product-item&gt;\n          }\n        &lt;/tbody&gt;\n...\n</code></pre> <p>Debemos importar el componente <code>ProductItem</code> en <code>products-list.ts</code>:</p> products-list.ts<pre><code>...\nimport { ProductItem } from '../product-item/product-item';\n\n@Component({\n  //...\n  imports: [\n    //...\n    ProductItem\n  ],\n  //...\n})\nexport class ProductsList {\n  //...\n</code></pre> <p>Tambi\u00e9n se debe mover los estilos CSS de la tabla a <code>product-item.css</code>:</p> product-item.css<pre><code>th, td {\n  vertical-align: middle;\n}\n\ntd img {\n  height: 50px;\n}\n</code></pre> <p></p> <p>Se puede observar que la estructura de la tabla no es correcta, hay un problema con las filas <code>&lt;tr&gt;</code> y las columnas <code>&lt;td&gt;</code>. Esto se debe a que el componente <code>&lt;app-product-item&gt;</code> est\u00e1 situado entre la tabla y cada fila y el navegador no puede interpretar correctamente la estructura de la tabla.</p>"},{"location":"ud03_components/07_components/#soluci\u00f3n-selector-de-atributo-y-clase","title":"Soluci\u00f3n. Selector de atributo y clase","text":"<p>En el selector del componente, en lugar de crear un nuevo elemento <code>selector: 'app-product-item'</code>, se puede utilizar un selector, tipo CSS, de clase <code>selector: '.product-item'</code> o de atributo <code>selector: '[app-product-item]'</code>. De esta forma, el componente se cargar\u00e1 dentro del elemento al que se a\u00f1ada esta clase o atributo y no se crear\u00e1 un componente adicional.</p> product-item.ts<pre><code>//...\n@Component({\n  selector: '[app-product-item]',\n  //...\n})\nexport class ProductItem {\n//...\n</code></pre> <p>Se elimina la etiqueta <code>&lt;tr&gt;</code> de la plantilla HTML del componente <code>product-item</code> al componente <code>product-item</code>:</p> product-item.html<pre><code>&lt;td&gt;&lt;img [src]=\"product.imageUrl\"\n       [class.d-none]=\"!showImage\"\n       alt=\"imagen del producto\"\n       [title]=\"product.description | uppercase\" /&gt;&lt;/td&gt;\n&lt;td&gt;{{product.description}}&lt;/td&gt;\n&lt;td&gt;{{product.price | currency : 'EUR' : 'symbol'}}&lt;/td&gt;\n&lt;td&gt;{{product.available | date: 'dd/MM/y'}}&lt;/td&gt;\n</code></pre> <p>Ahora, la plantilla <code>products-list.html</code> se puede modificar para que utilice el selector de atributo:</p> products-list.html<pre><code>//...\n        &lt;tbody&gt;\n          @for(product of products | productFilter:filterSearch; track product.id) {\n          &lt;tr app-product-item&gt;&lt;/tr&gt;\n          }\n        &lt;/tbody&gt;\n//...\n</code></pre>"},{"location":"ud03_components/07_components/#anidar-starrating","title":"Anidar <code>StarRating</code>","text":"<p>El siguiente paso es implementar el componente <code>star-rating</code>, que presentar\u00e1 un sistema de puntuaci\u00f3n de 1 a 5, representado con estrellas. Para mostrar las estrellas se podr\u00edan utilizar caracteres unicode (\u2605/\u2606) o im\u00e1genes. En este caso se utilizar\u00e1n im\u00e1genes de la librer\u00eda bootstrap-icons.</p> <pre><code>npm install bootstrap-icons\n</code></pre> <p>Y se a\u00f1ade a <code>styles.css</code> para que cargue los iconos de bootstrap:</p> styles.css<pre><code>/* You can add global styles to this file, and also import other style files */\n\n@import \"bootstrap/dist/css/bootstrap.min.css\";\n@import \"bootstrap-icons/font/bootstrap-icons.min.css\";\n\nhtml, body { height: 100%; }\nbody { margin: 0; font-family: Roboto, \"Helvetica Neue\", sans-serif; }\n</code></pre> <p>Ahora se va a crear el c\u00f3digo del componente <code>star-rating</code>:</p> star-rating.ts<pre><code>import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-star-rating',\n  imports: [],\n  templateUrl: './star-rating.html',\n  styleUrl: './star-rating.css'\n})\nexport class StarRating {\n  rating: number = 4;\n}\n</code></pre> <p>Y la plantilla HTML:</p> star-rating.html<pre><code>&lt;div class=\"star-container\"&gt;\n  @for(star of [1,2,3,4,5]; track $index) {\n  &lt;i [class.bi-star-fill]=\"star &lt;= rating\"\n     [class.bi-star]=\"star &gt; rating\"&gt;\n  &lt;/i&gt;\n  }\n&lt;/div&gt;\n</code></pre> <p>Con el componente creado, se debe importar en <code>product-item.ts</code>:</p> product-item.ts<pre><code>//...\nimport { StarRating } from '../star-rating/star-rating';\n\n@Component({\n  //...\n  imports: [\n    StarRating,\n    //...\n  ],\n  //...\n})\nexport class ProductItem {\n  //...\n</code></pre> <p>A continuaci\u00f3n, se modifica la plantilla HTML del componente <code>product-item</code> para a\u00f1adir un nuevo elemento <code>&lt;td&gt;</code> con la valoraci\u00f3n del producto:</p> product-item.html<pre><code>&lt;td&gt;&lt;img [src]=\"product.imageUrl\" alt=\"\"\n       [ngClass]=\"{'d-none': !showImage}\"\n       [title]=\"product.description | uppercase\"&gt;&lt;/td&gt;\n&lt;td&gt;{{product.description}}&lt;/td&gt;\n&lt;td&gt;{{product.price | currency:'EUR':'symbol'}}&lt;/td&gt;\n&lt;td&gt;{{product.available | date:'dd/MM/y'}}&lt;/td&gt;\n&lt;td&gt;&lt;app-star-rating&gt;&lt;/app-star-rating&gt;&lt;/td&gt;\n</code></pre> <p></p>"},{"location":"ud03_components/07_components/#comunicaci\u00f3n-entre-componentes-anidados","title":"Comunicaci\u00f3n entre componentes anidados","text":"<p>En el ejemplo anterior, el componente <code>product-item</code> se ha creado con datos est\u00e1ticos. A\u00fan no se ha implementado la funcionalidad para presentar los datos de cada producto, puesto que a\u00fan no sabemos c\u00f3mo se comunican los componentes entre s\u00ed.</p>"},{"location":"ud03_components/07_components/#decorador-input","title":"Decorador <code>@input</code>","text":"<p>Para indicar que un componente recibe datos de entrada por parte del componente padre, creamos una nueva propiedad y la decoramos con <code>@Input()</code>. Esto indica a Angular, que el valor de la propiedad ser\u00e1 obtenido a partir de un atributo con el mismo nombre, en el selector HTML del componente actual.</p> <p>A modo de ejemplo, se va a pasar al componente <code>product-item</code>, los datos del producto a mostrar y el booleano que indica si la imagen debe mostrarse:</p> products-list.html<pre><code>//...\n        &lt;tbody&gt;\n          @for(product of products | productFilter:filterSearch; track product.id) {\n          &lt;tr app-product-item\n              [product]=\"product\"\n              [showImage]=\"showImage\"&gt;\n          &lt;/tr&gt;\n          }\n        &lt;/tbody&gt;\n//...\n</code></pre> <p>Y se modifica el componente <code>product-item.ts</code> para que reciba los datos del producto y el booleano:</p> product-item.ts<pre><code>import { Component, Input } from '@angular/core';\n//...\nexport class ProductItem {\n  @Input() product!: Product;\n  @Input() showImage!: boolean;\n  //...\n}\n</code></pre> <p>El s\u00edmbolo <code>!</code> indica que la propiedad puede no tener valor (<code>null</code> o <code>undefined</code>). Esto es debido a que el valor de la propiedad se obtendr\u00e1 del componente padre, por lo que no es necesario inicializarla.</p> <p>Para terminar, se debe modificar el componente <code>star-rating</code> para que reciba la valoraci\u00f3n del producto:</p> product-item.html<pre><code>&lt;td&gt;&lt;app-star-rating [rating]=\"product.rating\"&gt;&lt;/app-star-rating&gt;&lt;/td&gt;\n</code></pre> star-rating.ts<pre><code>import { Component, Input } from '@angular/core';\n//...\nexport class StarRating {\n  @Input() rating!: number;\n}\n</code></pre> <p></p>"},{"location":"ud03_components/07_components/#decorador-output","title":"Decorador <code>@Output</code>","text":"<p>Para comunicar un componente hijo con el padre, se utiliza el decorador <code>@Output()</code>. Este decorador se utiliza para indicar que un componente hijo puede emitir un evento que ser\u00e1 capturado por el componente padre.</p> <p>Se va a implementar una funcionalidad para que cuando se sit\u00fae el puntero encima de una estrella, cambiar la puntuaci\u00f3n del producto. Para ello, no se debe modificar el valor de la propiedad de entrada <code>@Input()</code>, ya que se desvincular\u00eda del padre y dejar\u00edan de actualizarse los datos autom\u00e1ticamente. Se crear\u00e1 una propiedad auxiliar <code>auxRating</code> inicializada al mismo valor recibido del componente padre.</p> <p>Cuando se retire el cursor del componente, se restablecer\u00e1 el valor de <code>auxRating</code> a la puntuaci\u00f3n original:</p> star-rating.ts<pre><code>import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-star-rating',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './star-rating.html',\n  styleUrl: './star-rating.css'\n})\nexport class StarRating {\n  auxRating!: number;\n  @Input() rating!: number;\n\n  ngOnInit() {\n    this.restoreRating();\n  }\n\n  restoreRating() {\n    this.auxRating = this.rating;\n  }\n}\n</code></pre> <p>En la plantilla HTML, se a\u00f1ade un evento <code>mouseover</code> que llamar\u00e1 al m\u00e9todo <code>setRating</code> cuando el puntero se sit\u00fae encima de una estrella, y otro evento <code>mouseleave</code> que llamar\u00e1 al m\u00e9todo <code>restoreRating</code> cuando el puntero se retire del componente:</p> star-rating.html<pre><code>&lt;div class=\"star-container\" (mouseleave)=\"restoreRating()\"&gt;\n  @for(star of [1,2,3,4,5]; track $index) {\n  &lt;i [ngClass]=\"{'bi-star-fill': star &lt;= auxRating, 'bi-star': star &gt; auxRating}\"\n     (mouseenter)=\"auxRating = star\"&gt;&lt;/i&gt;\n  }\n&lt;/div&gt;\n</code></pre> <p>De esta forma funciona al pasar el puntero por encima, pero falta que se actualice al hacer clic sobre una estrella. Para ello se va a utilizar el decorador <code>@Output()</code> para emitir un evento cuando se haga clic sobre una estrella. Este evento ser\u00e1 capturado por el componente padre, que actualizar\u00e1 la puntuaci\u00f3n del producto.</p> star-rating.html<pre><code>&lt;div class=\"star-container\" (mouseleave)=\"restoreRating()\"&gt;\n  @for(star of [1,2,3,4,5]; track $index) {\n  &lt;i [ngClass]=\"{'bi-star-fill': star &lt;= auxRating, 'bi-star': star &gt; auxRating}\"\n     (mouseenter)=\"auxRating = star\"\n     (click)=\"setRating()\"&gt;\n  &lt;/i&gt;\n  }\n&lt;/div&gt;\n</code></pre> <p>Esto har\u00e1 que el m\u00e9todo <code>setRating()</code> emita un evento al componente padre con la nueva puntuaci\u00f3n. Para ello, se crea un emisor de eventos con el decorador <code>@Output</code>. El evento se llamar\u00e1 <code>ratingChanged</code> y emitir\u00e1 un n\u00famero, que ser\u00e1 la nueva puntuaci\u00f3n del producto.</p> star-rating.ts<pre><code>//...\nexport class StarRating {\n  //...\n\n  @Output() ratingChanged = new EventEmitter&lt;number&gt;();\n\n  setRating() {\n    this.ratingChanged.emit(this.auxRating);\n  }\n\n  //...\n}\n</code></pre> <p>En el componente <code>product-item</code> se capturar\u00e1 el evento <code>ratingChanged</code>, se acceder\u00e1 al valor emitido (la nueva puntuaci\u00f3n) con la variable especial <code>$event</code>. En este caso, como se modifica la propiedad de un objeto, no hace falta que lo haga el componente padre <code>products-list</code> que contiene el array de objetos, ya que los objetos siempre se pasan por referencia.</p> product-item.html<pre><code>//...\n&lt;td&gt;\n  &lt;app-star-rating [rating]=\"product.rating\"\n                   (ratingChanged)=\"changeRating($event)\"/&gt;\n&lt;/td&gt;\n</code></pre> product-item.ts<pre><code>//...\nexport class ProductItem {\n  //...\n\n  changeRating(rating: number) {\n    this.product.rating = rating;\n  }\n}\n</code></pre>"},{"location":"ud03_components/07_components/#servicios-inyecci\u00f3n-de-dependencias","title":"Servicios. Inyecci\u00f3n de dependencias","text":"<p>Un Servicio es una clase cuyo prop\u00f3sito es mantener una l\u00f3gica (y datos) compartidos entre diferentes componentes de la aplicaci\u00f3n. Esto es \u00fatil tanto para agrupar funcionalidad com\u00fan de varios componentes, como para compartir datos entre componentes que no tengan relaci\u00f3n de parentesco.</p> <p>Tambi\u00e9n se recomienda su uso para acceder a datos externos (servicios web). Cuando un componente de Angular (o filtro, o directiva, u otro servicio, etc.) necesita usar un servicio, existe un componente interno llamado inyector de dependencias (com\u00fan en muchos frameworks), que nos proveer\u00e1 el objeto de dicho servicio. S\u00f3lo se crear\u00e1 como m\u00e1ximo una instancia de dicho servicio para la aplicaci\u00f3n (Singleton).</p> <p></p> <p>En la aplicaci\u00f3n de ejemplo, se usa un Servicio para almacenar los productos, que en el futuro se obtendr\u00e1 de un servicio web. Por ahora se crear\u00e1 en un directorio llamado <code>services/</code>:</p> <pre><code>ng g service services/product-service\n</code></pre> <p>Esto crear\u00e1 un archivo <code>product.service.ts</code> con la clase del servicio. Esta clase est\u00e1 precedida con el decorador <code>@Injectable()</code>, que indica que la clase es un servicio y que puede ser inyectado en otros componentes.</p> product.service.ts<pre><code>import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n}\n</code></pre> <p>En la clase del servicio, se crear\u00e1 un m\u00e9todo que devuelva el array de productos:</p> product.service.ts<pre><code>import { Injectable } from '@angular/core';\nimport { Product } from '../interfaces/product';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  getProducts(): Product[] {\n    return [\n      {\n        id: 1,\n        description: 'SSD hard drive',\n        available: '2024-10-03',\n        price: 75,\n        imageUrl: 'assets/ssd.jpg',\n        rating: 5\n      }, {\n        id: 2,\n        description: 'LGA1151 Motherboard',\n        available: '2024-09-15',\n        price: 96.95,\n        imageUrl: 'assets/motherboard.png',\n        rating: 4\n      },\n      {\n        id: 3,\n        description: 'Kingston DDR4 3200 MHz 16GB 2x8GB CL16',\n        available: '2024-11-10',\n        price: 42.95,\n        imageUrl: 'assets/ssd.jpg',\n        rating: 4\n      }\n    ];\n  }\n\n}\n</code></pre> <p>Ahora que los productos est\u00e1n en el servicio, se debe hacer que el componente <code>products-list</code> los obtenga de ah\u00ed. Para \u201cinyectar\u201d el servicio en el componente, Angular utiliza una caracter\u00edstica de TypeScript. Si se declaras en el constructor un par\u00e1metro con el modificador <code>public</code> o <code>private</code> en el constructor, TypeScript declara un atributo en la clase con el mismo nombre y hace una asignaci\u00f3n del par\u00e1metro autom\u00e1tica.</p> <p>Indicando el tipo de par\u00e1metro <code>ProductService</code>, al ser una clase de tipo servicio (<code>@Injectable</code>), Angular pasa autom\u00e1ticamente un objeto de dicha clase (cre\u00e1ndolo si es la primera vez que se utiliza) al constructor. Esto es la inyecci\u00f3n de dependencias.</p> <p>Finalmente, en el m\u00e9todo <code>ngOnInit</code>, se llama al m\u00e9todo del servicio que devuelve los productos. Como ya es necesario, se borra el contenido del array de productos y se inicializa como array vac\u00edo (en lugar de no darle valor), ya que si no, podr\u00eda fallar el <code>@for</code> (el atributo estar\u00eda <code>undefined</code>) mientras se obtienen los datos. Esto es porque en un entorno real, el servidor tendr\u00e1 un retardo en devolver los datos, y si Angular intenta recorrer los productos antes de eso a partir de un array sin valor (undefined), aparecer\u00eda un error.</p> products-list.ts<pre><code>import { Component, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Product } from '../interfaces/product';\nimport { ProductFilterPipe } from '../pipes/product-filter.pipe';\nimport { ProductItem } from '../product-item/product-item';\nimport { ProductService } from '../services/product.service';\n\n@Component({\n  selector: 'app-products-list',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ProductFilterPipe,\n    ProductItemComponent\n  ],\n  templateUrl: './products-list.html',\n  styleUrl: './products-list.css'\n})\nexport class ProductsList {s\n  title = 'Lista de productos';\n  headers = { description: 'Producto', price: 'Precio', available: 'Disponible', image: 'Imagen', rating: 'Valoraci\u00f3n' };\n  showImage = true;\n\n  filterSearch = '';\n\n  products: Product[] = [];\n\n  private productService = inject(ProductService);\n\n  ngOnInit() {\n    this.products = this.productService.getProducts();\n  }\n\n  toggleImage(): void {\n    this.showImage = !this.showImage;\n  }\n}\n</code></pre>"},{"location":"ud04_usability/","title":"UD4: Usabilidad y Persistencia de Datos","text":"<ul> <li>4.1 Persistencia de datos con servicios RESTful </li> </ul>"},{"location":"ud04_usability/041_actividad/","title":"4.1.1 \u270d\ufe0f Proyecto: Angular Events. Parte 5.","text":"<p>Partiendo del proyecto creado en la actividad anterior Angular Events. Parte 4, vamos a continuar creando la aplicaci\u00f3n de gesti\u00f3n de eventos.</p> <p>Cuando termines, en el commit debes incluir el mensaje: v5.0.0.</p> <p>En esta actividad vamos a adaptar el proyecto para trabajar con servicios web y que los cambios sean permanentes. Para ello, vamos a adaptar el servicio <code>EventosService</code> como los componentes afectados.</p> <p>Se utilizar\u00e1 un servicio local, implementado con <code>json-server</code>, para simular el servicio web.</p> <p>A partir de ahora, cuando hablemos de un servicio, por ejemplo <code>/eventos</code>, la ruta completa ser\u00e1 concatenando la URL base al servicio, ej: <code>http://localhost:3000/eventos</code>.</p> <p>Muestra por consola los posibles errores que se puedan producir en las peticiones, con <code>console.error</code>.</p> <p>Debemos utilizar la interfaz <code>Evento</code> para reflejar que los eventos ahora tendr\u00e1n un campo <code>id</code> (clave primaria).</p> src/app/interfaces/evento.ts<pre><code>export interface Evento {\n  id?: string;\n  title: string;\n  image: string;\n  date: string;\n  description: string;\n  price: number;\n}\n</code></pre> <p>Las propiedades con <code>?</code> detr\u00e1s implican que son opcionales (se accede a ellas sin el interrogante). Ya que, por ejemplo, cuando creamos un objeto <code>Evento</code> para a\u00f1adir desde el formulario, este a\u00fan no tendr\u00e1 <code>id</code> asignada. Por eso nos interesa que al crear un objeto de tipo <code>Evento</code>, TypeScript no nos obligue a establecer el campo <code>id</code>.</p>"},{"location":"ud04_usability/041_actividad/#crear-el-servicio-local-con-json-server","title":"Crear el servicio local con <code>json-server</code>","text":"<p>Para simular el servicio web, vamos a utilizar <code>json-server</code>. Este es un paquete de <code>node.js</code> que nos permite crear un servidor web que sirve datos en formato <code>JSON</code> a partir de un archivo <code>JSON</code> que le pasemos.</p> <p>Para instalarlo, crea una nueva carpeta en el directorio ra\u00edz del proyecto llamada <code>server/</code> y dentro de ella ejecuta:</p> <pre><code>npm init -y\nnpm install json-server\n</code></pre> <p>Crea un archivo <code>db.json</code> con el siguiente contenido:</p> server/db.json<pre><code>{\n  \"eventos\": [\n    {\n      \"id\": \"1\",\n      \"title\": \"Evento 1\",\n      \"image\": \"https://picsum.photos/200/300\",\n      \"date\": \"2025-02-10\",\n      \"description\": \"Descripci\u00f3n del primer evento\",\n      \"price\": 20.0\n    },\n    {\n      \"id\": \"2\",\n      \"title\": \"Evento 2\",\n      \"image\": \"https://picsum.photos/200/300\",\n      \"date\": \"2025-05-20\",\n      \"description\": \"Descripci\u00f3n del segundo evento\",\n      \"price\": 40.0\n    }\n  ]\n}\n</code></pre> <p>Para arrancar el servidor, ejecuta:</p> <pre><code>npx json-server --watch db.json\n</code></pre> <p>Si todo ha ido bien, deber\u00edas poder acceder a la URL <code>http://localhost:3000/eventos</code> y ver los eventos que hemos creado en el archivo <code>db.json</code>.</p> <p>Otras opciones de configuraci\u00f3n</p> <p>Se puede cambiar el puerto por defecto (<code>3000</code>) con el par\u00e1metro <code>--port</code>.</p> <pre><code>npx json-server --watch db.json --port 3001\n</code></pre>"},{"location":"ud04_usability/041_actividad/#obtener-eventos","title":"Obtener eventos","text":"<p>Los eventos se obtienen llamando al servicio <code>/eventos</code> por <code>GET</code>. Este servicio te devuelve un objeto JSON con un <code>Array</code> de eventos.</p> <p>El m\u00e9todo getEventos del servicio, ya no devolver\u00e1 directamente <code>Evento[]</code>, sino un <code>Observable&lt;Evento[]&gt;</code>:</p> src/app/services/eventos.service.ts<pre><code>getEventos(): Observable&lt;Evento[]&gt; {\n  //...\n}\n</code></pre> <p>En el m\u00e9todo <code>ngOnInit</code> del componente <code>eventos-show</code>, suscr\u00edbete al servicio para obtener el array de eventos. Inicializa la colecci\u00f3n de eventos previamente a un array vac\u00edo para que no d\u00e9 problemas la directiva <code>@for</code>.</p>"},{"location":"ud04_usability/041_actividad/#a\u00f1adir-evento","title":"A\u00f1adir evento","text":"<p>A\u00f1adimos un evento llamado al servicio <code>/eventos</code> mediante <code>POST</code>. Como datos enviamos el objeto <code>Evento</code> con los datos del evento (el objeto que generamos con el formulario). Este servicio nos devolver\u00e1 un JSON con el evento a\u00f1adido y el <code>id</code> que le ha asignado.</p> <p>Crea el m\u00e9todo <code>addEvento</code> en el servicio <code>EventosService</code>:</p> src/app/services/eventos.service.ts<pre><code>addEvento(evento: Evento): Observable&lt;Evento&gt; {\n  //...\n}\n</code></pre> <p>El m\u00e9todo de a\u00f1adir evento del componente <code>evento-add</code>, debe llamar a este m\u00e9todo del servicio y suscribirse. Y cuando este nos devuelva el evento insertado, es cuando debemos usar el <code>EventEmitter</code> para informar a <code>eventos-show</code> (el componente padre) que debe de a\u00f1adirlo y reiniciar el objeto del formulario (importante: debemos emitir el evento que nos devuelve el servidor y no el del formulario, ya que entre otras cosas, tendr\u00e1 un <code>id</code> v\u00e1lido).</p>"},{"location":"ud04_usability/041_actividad/#borrar-evento","title":"Borrar evento","text":"<p>Para borrar un evento llamaremos al servicio <code>/eventos/:idEvento</code> usando el m\u00e9todo <code>DELETE</code> (ej: <code>/eventos/y5d</code>).</p> <p>El m\u00e9todo a crear en el servicio <code>EventosService</code> devolver\u00e1 el observable con la respuesta, es decir, la llamada al servidor sin procesar nada.</p> src/app/services/eventos.service.ts<pre><code>deleteEvento(id: string): Observable&lt;any&gt; {\n  //...\n}\n</code></pre> <p>El m\u00e9todo de borrar evento en <code>evento-item</code>, llamar\u00e1 a este servicio y se suscribir\u00e1. Al recibir la respuesta emitir\u00e1 mediante el <code>EventEmitter</code> correspondiente al componente padre, <code>eventos-show</code> para indicar que lo borre del array de eventos.</p> <p>Importante: A la hora de llamar al m\u00e9todo del servicio, TypeScript te marcar\u00e1 como error la <code>id</code> del producto, ya que esta es opcional en la interfaz <code>Evento</code>, por lo que podr\u00eda ser <code>undefined</code> en lugar de <code>number</code> (los proyectos Angular se crean con TypeScript en modo estricto). Para indicar a TypeScript que ignore esta posibilidad (siempre tendr\u00e1 valor), ponemos el s\u00edmbolo <code>!</code> detr\u00e1s <code>this.producto.id!</code>.</p>"},{"location":"ud04_usability/04_rest/","title":"4.1 Persistencia de datos con servicios RESTful","text":"<ul> <li>Configuraci\u00f3n de HttpClient<ul> <li>M\u00e9todos b\u00e1sicos HTTP</li> <li>Crear un servicio RESTful local con <code>json-server</code></li> </ul> </li> <li>Realizar peticiones HTTP con HttpClient<ul> <li>RxJS y Observables</li> <li>Procesar respuestas con Observables</li> <li>Obtener datos desde el servicio</li> <li>M\u00e9todos POST, PUT, PATCH, DELETE</li> </ul> </li> <li>Referencias</li> </ul> <p>Hasta ahora, los datos de la aplicaci\u00f3n se han almacenado en variables dentro de los componentes. Sin embargo, en la mayor\u00eda aplicaciones, los datos suelen almacenarse en bases de datos o servicios web remotos.</p>"},{"location":"ud04_usability/04_rest/#configuraci\u00f3n-de-httpclient","title":"Configuraci\u00f3n de HttpClient","text":"<p>En esta unidad utilizaremos servicios RESTful, tambi\u00e9n conocidos como API REST, para obtener y almacenar datos. Estos servicios utilizan el protocolo HTTP para comunicarse con el cliente (navegador o aplicaci\u00f3n).</p> <p>Los servicios RESTful utilizan diferentes m\u00e9todos HTTP para realizar operaciones CRUD: Create, Read, Update, Delete (Crear, Leer, Actualizar, Borrar):</p> Operaci\u00f3n M\u00e9todo HTTP Descripci\u00f3n Create <code>POST</code> Crear un nuevo recurso Read <code>GET</code> Obtener uno o varios recursos Update <code>PUT/PATCH</code> Actualizar un recurso existente Delete <code>DELETE</code> Borrar un recurso existente"},{"location":"ud04_usability/04_rest/#m\u00e9todos-b\u00e1sicos-http","title":"M\u00e9todos b\u00e1sicos HTTP","text":"<p>La petici\u00f3n y respuesta del servidor ser\u00e1 mediante el protocolo HTTP. Cuando hacemos una petici\u00f3n HTTP, el navegador env\u00eda al servidor: cabeceras (como <code>useragent</code> el cual identifica al navegador, las preferencias de idioma, etc.), el tipo de petici\u00f3n HTTP y par\u00e1metros o datos (si son necesarios).</p> <p>Hay muchos tipos de petici\u00f3n http que podemos enviarle al servidor. Los m\u00e1s usados son:</p> <ul> <li><code>GET</code>: se utiliza para obtener datos del servidor. No modifica los datos del servidor.</li> <li><code>POST</code>: se utiliza para enviar datos al servidor. Creando un nuevo recurso.</li> <li><code>PUT</code>: se utiliza para actualizar datos. Sustituye todos los datos del recurso.</li> <li><code>PATCH</code>: se utiliza para actualizar parcialmente datos en el servidor. S\u00f3lo actualiza los datos que se env\u00edan en la petici\u00f3n.</li> <li><code>DELETE</code>: se utiliza para eliminar datos en el servidor.</li> </ul> <p>Angular proporciona <code>HttpClient</code> para realizar peticiones HTTP. Mediante inyecci\u00f3n de dependencias proporciona una instancia de <code>HttpClient</code> a los servicios o componentes que lo necesiten. Por lo que deberemos incluirlo en los <code>providers</code> del archivo <code>app.config.ts</code>:</p> app.config.ts<pre><code>import { ApplicationConfig, provideBrowserGlobalErrorListeners, provideZoneChangeDetection } from '@angular/core';\nimport { provideRouter } from '@angular/router';\n\nimport { routes } from './app.routes';\nimport { provideHttpClient } from '@angular/common/http';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideBrowserGlobalErrorListeners(),\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideHttpClient()\n  ]\n};\n</code></pre>"},{"location":"ud04_usability/04_rest/#crear-un-servicio-restful-local-con-json-server","title":"Crear un servicio RESTful local con <code>json-server</code>","text":"<p>Para simular el servicio web, vamos a utilizar <code>json-server</code>. Este es un paquete de <code>node.js</code> que nos permite crear un servidor web que sirve datos en formato <code>JSON</code> a partir de un archivo <code>JSON</code> que le pasemos.</p> <p>Para instalarlo, crea una nueva carpeta en el directorio ra\u00edz del proyecto llamada <code>server/</code> y dentro de ella ejecuta:</p> <pre><code>npm init -y\nnpm install json-server\n</code></pre> <p>Crea un archivo <code>db.json</code> con el siguiente contenido:</p> server/db.json<pre><code>{\n  \"products\": [\n      {\n        \"id\": 1,\n        \"description\": \"SSD hard drive\",\n        \"available\": \"2025-10-03\",\n        \"price\": 75,\n        \"imageUrl\": \"https://picsum.photos/200/300\",\n        \"rating\": 5\n      }, {\n        \"id\": 2,\n        \"description\": \"LGA1151 Motherboard\",\n        \"available\": \"2025-09-15\",\n        \"price\": 96.95,\n        \"imageUrl\": \"https://picsum.photos/200/300\",\n        \"rating\": 4\n      },\n      {\n        \"id\": 3,\n        \"description\": \"Kingston DDR4 3200 MHz 16GB 2x8GB CL16\",\n        \"available\": \"2025-11-10\",\n        \"price\": 42.95,\n        \"imageUrl\": \"https://picsum.photos/200/300\",\n        \"rating\": 2\n      }\n    ]\n}\n</code></pre> <p>Para arrancar el servidor, ejecuta:</p> <pre><code>npx json-server --watch db.json -port 3000\n</code></pre> <p>Otra forma de ejecutarlo es a\u00f1adiendo un script en el <code>package.json</code> del proyecto:</p> package.json<pre><code>{\n  ...\n  \"scripts\": {\n    ...\n    \"start\": \"json-server --watch server/db.json --port 3000\"\n  }\n}\n</code></pre> <p>Adem\u00e1s deberemos eliminar la l\u00ednea <code>\"main\": \"index.js\"</code>, si existe, para evitar conflictos.</p> <p>Y ejecutarlo con:</p> <pre><code>npm start\n</code></pre> <p>Si todo va bien, podremos acceder a la URL <code>http://localhost:3000/products</code> y ver los productos que hemos creado en el archivo <code>db.json</code>.</p> <p>Este ser\u00e1 nuestro endpoint base para realizar las peticiones HTTP que veremos en los siguientes apartados.</p> <p>server/.gitignore</p> <p>Recuerda a\u00f1adir la carpeta <code>server/</code> un nuevo archivo <code>.gitignore</code> con <code>/node_modules</code> para evitar subir las dependencias de <code>node.js</code> al repositorio.</p> server/.gitignore<pre><code>/node_modules\n</code></pre>"},{"location":"ud04_usability/04_rest/#realizar-peticiones-http-con-httpclient","title":"Realizar peticiones HTTP con HttpClient","text":"<p>Vamos a modificar el servicio <code>ProductsService</code> para que obtenga los datos de un servicio web. Para ello, se va a utilizar el servicio <code>HttpClient</code> de Angular. Este servicio se inyecta en el constructor del servicio <code>ProductsService</code>:</p> src/app/services/product.service.ts<pre><code>import { inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\n\nimport { Product } from '../interfaces/product';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  productsEndpoint = 'http://localhost:3000/products';\n\n  private http = inject(HttpClient);\n\n  getProducts(): Observable&lt;Product[]&gt; {\n    return this.http.get&lt;Product[]&gt;(this.productsEndpoint);\n  }\n\n}\n</code></pre> <ul> <li>Se importa el servicio <code>HttpClient</code> de <code>@angular/common/http</code>.</li> <li>Se crea la propiedad <code>productsEndpoint</code> que contiene la URL del servicio web.</li> <li>Se inyecta el servicio <code>HttpClient</code> en <code>ProductoService</code>.</li> <li>En el m\u00e9todo <code>getProducts()</code> se utiliza el m\u00e9todo <code>get()</code> del servicio <code>HttpClient</code> para realizar una petici\u00f3n HTTP GET a la URL del servicio web. Este m\u00e9todo devuelve un objeto <code>Observable&lt;Products[]&gt;</code> que contiene un array de productos. A continuaci\u00f3n veremos qu\u00e9 es un <code>Observable</code>.</li> </ul>"},{"location":"ud04_usability/04_rest/#rxjs-y-observables","title":"RxJS y Observables","text":"<p>Se podr\u00eda trabajar con Promesas para realizar las peticiones HTTP. Sin embargo, Angular trabaja por defecto con la librer\u00eda RxJS. Es decir, utiliza Observables, que son como una versi\u00f3n m\u00e1s avanzada de las promesas.</p> <p>Estas son algunas diferencias entre usar promesas y observables:</p> <ul> <li> <p>Una Promesa devuelve un s\u00f3lo valor futuro (lo que para una petici\u00f3n HTTP es suficiente). Un Observable puede emitir varios valores a lo largo del tiempo.</p> </li> <li> <p>Una Promesa se ejecuta (el c\u00f3digo interno) cuando se crea. Un Observable s\u00f3lo empieza cuando alguien se suscribe a \u00e9l (lazy loading).</p> </li> <li> <p>Una Promesa no puede ser cancelada, mientras que un Observable puede dejar de ejecutarse si se cancelan las suscripciones a \u00e9l.</p> </li> <li> <p>Los observables tienen muchos m\u00e9todos (operadores) como <code>map</code>, <code>filter</code>, <code>reduce</code>, etc. Las promesas usan el m\u00e9todo gen\u00e9rico <code>then</code> para todo.</p> </li> </ul> <p>Cualquier llamada http (<code>get</code>, <code>post</code>, <code>put</code>, <code>delete</code>, etc.) devuelve un <code>Observable</code>. Para obtener los datos que vaya a emitir dicho Observable en el futuro, debemos suscribirnos a \u00e9l.</p> <p>Sin embargo, podemos establecer un procesamiento intermedio de los datos, entre la respuesta que nos llega en \"crudo\" del servidor y el dato que realmente queremos guardar/mostrar, usando operadores intermedios <code>map</code>, <code>filter</code>, <code>tap</code>, <code>pipe</code> etc.</p> <p>Esto es lo que hacen los m\u00e9todos nombrados anteriormente:</p> <ul> <li><code>map</code> : Obtiene el dato devuelto por el Observable (o el operador anterior si concatenamos varios), aplicamos alguna transformaci\u00f3n al dato y la devolvemos (el m\u00e9todo devolver\u00e1 <code>Observable&lt;DatoTransformado&gt;</code>).</li> <li><code>tap</code> : Se utiliza normalmente para operaciones de depuraci\u00f3n (mostrar datos por consola, etc.). No devolvemos nada en este m\u00e9todo porque autom\u00e1ticamente devuelve un Observable con el mismo dato que recibe (no modifica nada).</li> <li><code>filter</code> : Cuando el observable devuelve m\u00e1s de un dato a lo largo del tiempo (por ejemplo si trabajamos con eventos). Este m\u00e9todo s\u00f3lo dejar\u00e1 pasar aquellos que cumplan una determinada condici\u00f3n (devolvemos un booleano).</li> <li><code>pipe</code> : Este no es un operador en s\u00ed, sino un m\u00e9todo que permite encadenar varios operadores intermedios (como los anteriores) para procesar los datos antes de que lleguen al suscriptor final.</li> </ul> <p>Los operadores se importan de <code>rxjs/operators</code>, y se aplican como par\u00e1metros del m\u00e9todo pipe de la clase <code>Observable</code> en el orden establecido (encadenados).</p>"},{"location":"ud04_usability/04_rest/#procesar-respuestas-con-observables","title":"Procesar respuestas con Observables","text":"<p>Cada vez que un observable emite un valor, este se puede procesar con los m\u00e9todos u operadores intermedios nombrados antes. Sin embargo, el observable no empieza a emitir valores (no se ejecuta su c\u00f3digo interno) hasta que nos suscribimos a \u00e9l (pueden haber varias suscripciones al mismo observable).</p> <p>Para suscribirnos debemos llamar al m\u00e9todo <code>subscribe</code>. Este m\u00e9todo es un m\u00e9todo final, lo que significa que ya no podemos encadenar nada m\u00e1s despu\u00e9s.</p> <p>Este m\u00e9todo puede recibir hasta tres par\u00e1metros, que deben ser funciones:</p> <ul> <li>La primera funci\u00f3n recibir\u00e1 el resultado final devuelto por el observable (y procesado por los m\u00e9todos intermedios).</li> <li>Si se produce alg\u00fan error en el observable (o lo lanzamos nosotros en alg\u00fan m\u00e9todo intermedio) se llamar\u00e1 en su lugar a la segunda funci\u00f3n (opcional), que recibir\u00e1 dicho error.</li> <li>La tercera funci\u00f3n (opcional) se ejecutar\u00e1 al final siempre independientemente de si se produce alg\u00fan error o no. Es el mismo concepto que el bloque <code>finally</code> de una estructura <code>try...catch</code>.</li> </ul> <pre><code>Observable.pipe( map(\u2026), catchError(\u2026) ).subscribe(\n    (result) =&gt; // Procesar los datos devueltos\n    (error) =&gt; // Procesar el error\n    () =&gt; // Se ejecutar\u00e1 siempre al final (sin par\u00e1metro)\n)\n</code></pre> <p>Sin embargo, a veces podr\u00edamos querer recuperarnos de un error, o simplemente procesar el error y devolverlo en un formato diferente. Para ello tenemos el operador <code>catchError</code>. Este m\u00e9todo intermedio s\u00f3lo se ejecuta si se produce alg\u00fan error en el observable o en un m\u00e9todo intermedio anterior.</p> <p>Si queremos recuperarnos del error, debemos devolver un nuevo observable con datos correctos (podr\u00eda ser otra llamada HTTP por ejemplo). Por otro lado, si queremos seguir con el error pero cambiando el formato, debemos devolver un observable con error (m\u00e9todo <code>throwError</code>).</p> <p>El siguiente esquema muestra un ejemplo de una llamada HTTP, y qu\u00e9 podr\u00edamos hacer si todo va bien o se produce un error (hay muchas posibilidades). En este caso el m\u00e9todo <code>catchError</code> podr\u00eda devolver datos v\u00e1lidos de alguna manera (recuperaci\u00f3n de error) o formatear el error, guardarlo en un log, notificar al usuario, etc.</p> <p>Finalmente, como dijimos anteriormente, si al m\u00e9todo subscribe le llega un dato sin error se ejecutar\u00e1 la primera funci\u00f3n, mientras que en caso de error se ejecutar\u00e1 la segunda en su lugar.</p> <p></p> <p>Ejemplo de uso: Partiendo de una respuesta JSON con la siguiente estructura:</p> <pre><code>[\n    {\n      \"id\": 1,\n      \"description\": \"WD BLACK SN770 2TB NVMe SSD\",\n      \"price\": 115,\n      \"available\": \"2025-10-03\",\n      \"imageUrl\": \"http://placehold.it/200x100\",\n      \"rating\": 5\n    },\n    {\n        ...\n    },\n]\n</code></pre> <p>Se capturan los posibles errores con <code>catchError</code> y se formatean con <code>throwError</code>:</p> <pre><code>  getProducts(): Observable&lt;Product[]&gt; {\n    return this.http.get&lt;Product[]&gt;(this.productsEndpoint)\n      .pipe(\n        tap(response =&gt; console.log('Respuesta del servidor: ', response)),\n        catchError((resp: HttpErrorResponse) =&gt;\n          throwError(() =&gt;\n            new Error(`Error obteniendo productos. C\u00f3digo de servidor: ${resp.status}. Mensaje: ${resp.message}`))\n        ));\n  }\n</code></pre> <p>Otro m\u00e9todo \u00fatil para la recuperaci\u00f3n de errores es <code>retry</code>. Cuando llega la cadena de procesamiento a este m\u00e9todo, si se detecta que ha habido un error, se reinicia el observable (se vuelve a ejecutar desde el principio) tantas veces como le indiquemos por par\u00e1metro. Si se supera el n\u00famero de reintentos y sigue habiendo un error, entonces se deja pasar.</p> <p>Por ejemplo, para repetir la llamada HTTP 3 veces antes de darnos por vencidos (por si la red funcionara mal):</p> <pre><code>  getProducts(): Observable&lt;Product[]&gt; {\n    return this.http.get&lt;Product[]&gt;(this.productsEndpoint)\n      .pipe(\n        retry(3),\n        tap(response =&gt; console.log('Respuesta del servidor: ', response)),\n        catchError((resp: HttpErrorResponse) =&gt;\n          throwError(() =&gt;\n            new Error(`Error obteniendo productos. C\u00f3digo de servidor: ${resp.status}. Mensaje: ${resp.message}`))\n        ));\n  }\n</code></pre>"},{"location":"ud04_usability/04_rest/#obtener-datos-desde-el-servicio","title":"Obtener datos desde el servicio","text":"<p>Muchas veces, el servidor nos devolver\u00e1 una respuesta en formato JSON. Generalmente, los datos que queremos obtener se encontrar\u00e1n dentro de ese objeto JSON, o tambi\u00e9n puede que queramos hacer ciertas transformaciones intermedias como pasar las fechas de <code>string</code> a objeto <code>Date</code>, etc. Para ello se usa el m\u00e9todo <code>map</code>.</p> <p>Adem\u00e1s de crear interfaces para cada tipo de objetos que maneje el programa (productos, usuarios, etc.), es una buena idea crear una o varias interfaces para adaptar (\"mapear\") la respuesta del servidor:</p> interfaces/responses.ts<pre><code>import { Product } from \"./product\";\n\nexport interface ResponseProducts {\n  products: Product[];\n}\n</code></pre> <p>Aunque para el ejemplo no es necesario, ya que se devuelve un array de productos.</p> <p>En la clase <code>ProductsList</code>, se suscribe al observable con el m\u00e9todo <code>subscribe</code> y se asigna el array de productos a mostrar cuando este sea devuelto. Al suscribirse se le pasa una funci\u00f3n que recoger\u00e1 el valor devuelto por el observable.</p> src/app/products-list/products-list.ts<pre><code> ngOnInit() {\n    this.productService.getProducts().subscribe(products =&gt; {\n      this.products = products;\n    });\n  }\n</code></pre> <p>Opcionalmente, se le puede pasar una funci\u00f3n que se ejecute cuando hay alg\u00fan error, y otra funci\u00f3n que se ejecute cuando todo haya terminado independientemente de que haya habido error o no (por ejemplo para quitar una animaci\u00f3n de carga de datos). En este caso hay que pasarle un objeto que contenga las funciones que queramos definir (<code>next</code> -&gt; todo ok, <code>error</code> -&gt; fallo, <code>complete</code> -&gt; finalizado).</p> src/app/products-list/products-list.ts<pre><code> ngOnInit() {\n    this.productService.getProducts().subscribe({\n      next: (products) =&gt; {\n        this.products = products\n      },\n      error: (err) =&gt; console.error('Error obteniendo productos: ', err),\n      complete: () =&gt; console.log('La obtenci\u00f3n de productos ha finalizado.')\n    });\n  }\n</code></pre>"},{"location":"ud04_usability/04_rest/#m\u00e9todos-post-put-patch-delete","title":"M\u00e9todos POST, PUT, PATCH, DELETE","text":"<p>La diferencia entre <code>GET</code>/<code>DELETE</code> y <code>POST</code>/<code>PUT</code>/<code>PATCH</code>, es que estos \u00faltimos env\u00edan datos al servidor en el cuerpo de la petici\u00f3n (para insertar o modificar algo). Estos datos se env\u00edan como segundo par\u00e1metro despu\u00e9s de la URL en la petici\u00f3n.</p> <p>En el siguiente ejemplo se va a cambiar la puntuaci\u00f3n de un producto en el servidor. Se llamar\u00e1 al un servicio <code>PATCH</code> (modificaci\u00f3n) con la URL <code>/products/{idProduct}</code>, y se actualizar\u00e1 la nueva puntuaci\u00f3n en un objeto JSON: <code>{rating: nueva_puntuaci\u00f3n}</code>. Primero se a\u00f1ade el m\u00e9todo <code>updateRating</code> al servicio <code>ProductService</code>:</p> src/app/services/product.service.ts<pre><code>  // actualiza el rating de un producto\n  // PATCH /products/:id { rating: number }\n  updateRating(id: number, rating: number): Observable&lt;Product&gt; {\n    return this.http.patch&lt;Product&gt;(`${this.productsEndpoint}/${id}`, { rating }).pipe(\n      catchError((resp: HttpErrorResponse) =&gt;\n        throwError(() =&gt;\n          new Error(`Error al actualizar rating. C\u00f3digo de servidor: ${resp.status}. Mensaje: ${resp.message}`))\n      ));\n  }\n</code></pre> <p>En el segundo par\u00e1metro del m\u00e9todo <code>patch</code> se env\u00eda un objeto JSON con la propiedad <code>rating</code>, que contiene la nueva puntuaci\u00f3n.</p> <p>Desde el componente <code>ProductItem</code>, llamaremos al servicio cuando detectemos un cambio de la puntuaci\u00f3n, y no actualizaremos la propiedad del producto hasta que el servidor no nos haya respondido. Se puede recargar la p\u00e1gina para comprobar que este cambio es permanente en el servidor.</p> src/app/product-item/product-item.ts<pre><code>  constructor(private productService: ProductService) { }\n\n  changeRating(rating: number) {\n    if (this.product.id) {\n      this.productService.updateRating(this.product.id, rating).subscribe(prod =&gt; this.product = prod);\n    }\n  }\n</code></pre> <p>Por ahora no se va a a\u00f1adir un formulario para crear productos (se har\u00e1 en un futuro), se va a ver como enviar al servidor un producto para insertarlo. En este caso, el servidor devolver\u00e1 un objeto de respuesta con el producto insertado (ya que le habr\u00e1 asignado una <code>id</code> o clave primaria, una URL con la imagen guardada en el servidor, etc.).</p> <p>El m\u00e9todo de <code>ProductsService</code> encargado de llamar al servidor para a\u00f1adir un producto usando <code>POST</code>, recibir\u00e1 el objeto (<code>Product</code>) a insertar y lo enviar\u00e1 tal cual, devolviendo a su vez el producto (insertado) devuelto por el servidor:</p> src/app/services/product.service.ts<pre><code>  // agrega un producto\n  // POST /products\n  addProduct(product: Product): Observable&lt;Product&gt; {\n    return this.http.post&lt;Product&gt;(this.productsEndpoint, product).pipe(\n      catchError((resp: HttpErrorResponse) =&gt;\n        throwError(() =&gt;\n          new Error(`Error crear producto. C\u00f3digo de servidor: ${resp.status}. Mensaje: ${resp.message}`))\n      ));\n  }\n</code></pre>"},{"location":"ud04_usability/04_rest/#referencias","title":"Referencias","text":"<ul> <li>Setting up HttpClient</li> <li>Making HTTP requests</li> <li>json-server</li> </ul>"}]}