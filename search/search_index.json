{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Desarrollo de Interfaces 2025/26","text":""},{"location":"#resultados-de-aprendizaje","title":"Resultados de Aprendizaje","text":"<ul> <li>RA1. Genera interfaces gr\u00e1ficos de usuario mediante editores visuales utilizando las funcionalidades del editor y adaptando el c\u00f3digo generado.</li> <li>RA2. Genera interfaces naturales de usuario utilizando herramientas visuales.</li> <li>RA3. Crea componentes visuales valorando y empleando herramientas espec\u00edficas.</li> <li>RA4. Dise\u00f1a interfaces gr\u00e1ficas identificando y aplicando criterios de usabilidad y accesibilidad.</li> <li>RA5. Crea informes evaluando y utilizando herramientas gr\u00e1ficas.</li> <li>RA6. Documenta aplicaciones seleccionando y utilizando herramientas espec\u00edficas.</li> <li>RA7. Prepara aplicaciones para su distribuci\u00f3n evaluando y utilizando herramientas espec\u00edficas.</li> </ul>"},{"location":"RRAA_CCEE/","title":"Resultados de Aprendizaje y Criterios de Evaluaci\u00f3n","text":""},{"location":"RRAA_CCEE/#resumen","title":"Resumen","text":"<ul> <li>RA1. GUI</li> <li>RA2. NUI</li> <li>RA3. Componentes</li> <li>RA4. Usabilidad y Accesibilidad</li> <li>RA5. Informes</li> <li>RA6. Documentaci\u00f3n</li> <li>RA7. Distribuci\u00f3n</li> <li>RA8. Pruebas</li> </ul>"},{"location":"RRAA_CCEE/#ra1-genera-interfaces-graficos-de-usuario-mediante-editores-visuales-utilizando-las-funcionalidades-del-editor-y-adaptando-el-codigo-generado","title":"RA1. Genera interfaces gr\u00e1ficos de usuario mediante editores visuales utilizando las funcionalidades del editor y adaptando el c\u00f3digo generado.","text":"<ul> <li>CE1a) Se han analizado las herramientas y librer\u00edas disponibles para la generaci\u00f3n de interfaces gr\u00e1ficos.</li> <li>CE1b) Se ha creado un interfaz gr\u00e1fico utilizando las herramientas de un editor visual.</li> <li>CE1c) Se han utilizado las funciones del editor para ubicar los componentes del interfaz.</li> <li>CE1d) Se han modificado las propiedades de los componentes para adecuarlas a las necesidades de la aplicaci\u00f3n.</li> <li>CE1e) Se ha analizado el c\u00f3digo generado por el editor visual.</li> <li>CE1f) Se ha modificado el c\u00f3digo generado por el editor visual.</li> <li>CE1g) Se han asociado a los eventos las acciones correspondientes.</li> <li>CE1h) Se ha desarrollado una aplicaci\u00f3n que incluye el interfaz gr\u00e1fico obtenido.</li> </ul>"},{"location":"RRAA_CCEE/#ra2-genera-interfaces-naturales-de-usuario-utilizando-herramientas-visuales","title":"RA2. Genera interfaces naturales de usuario utilizando herramientas visuales.","text":"<ul> <li>CE2a) Se han identificado las herramientas disponibles para el aprendizaje autom\u00e1tico relacionadas con las interfaces de usuario.</li> <li>CE2b) Se ha creado una interfaz natural de usuario utilizando las herramientas disponibles.</li> <li>CE2c) Se ha utilizado el reconocimiento de voz para implementar acciones en las interfaces naturales de usuario.</li> <li>CE2d) Se ha incorporado la detecci\u00f3n del movimiento del cuerpo para implementar acciones en las interfaces naturales de usuario.</li> <li>CE2e) Se han integrado elementos de detecci\u00f3n de partes del cuerpo para implementar acciones en las interfaces naturales de usuario.</li> <li>CE2f) Se ha integrado la realidad aumentada en los interfaces de usuario.</li> </ul>"},{"location":"RRAA_CCEE/#ra3-crea-componentes-visuales-valorando-y-empleando-herramientas-especificas","title":"RA3. Crea componentes visuales valorando y empleando herramientas espec\u00edficas.","text":"<ul> <li>CE3a) Se han identificado las herramientas para dise\u00f1o y prueba de componentes.</li> <li>CE3b) Se han creado componentes visuales.</li> <li>CE3c) Se han definido sus m\u00e9todos y propiedades con asignaci\u00f3n de valores por defecto.</li> <li>CE3d) Se han determinado los eventos a los que debe responder el componente y se les han asociado las acciones correspondientes.</li> <li>CE3e) Se han realizado pruebas unitarias sobre los componentes desarrollados.</li> <li>CE3f) Se han documentado los componentes creados.</li> <li>CE3g) Se han empaquetado componentes.</li> <li>CE3h) Se han programado aplicaciones cuyo interfaz gr\u00e1fico utiliza los componentes creados.</li> </ul>"},{"location":"RRAA_CCEE/#ra4-disena-interfaces-graficas-identificando-y-aplicando-criterios-de-usabilidad-y-accesibilidad","title":"RA4. Dise\u00f1a interfaces gr\u00e1ficas identificando y aplicando criterios de usabilidad y accesibilidad.","text":"<ul> <li>CE4a) Se han identificado los principales est\u00e1ndares de usabilidad y accesibilidad.</li> <li>CE4b) Se ha valorado la importancia del uso de est\u00e1ndares para la creaci\u00f3n de interfaces.</li> <li>CE4c) Se han creado diferentes tipos de men\u00fas cuya estructura y contenido siguen los est\u00e1ndares establecidos.</li> <li>CE4d) Se han distribuido las acciones en men\u00fas, barras de herramientas, botones de comando, entre otros, siguiendo un criterio coherente.</li> <li>CE4e) Se han distribuido adecuadamente los controles en la interfaz de usuario.</li> <li>CE4f) Se ha utilizado el tipo de control m\u00e1s apropiado en cada caso.</li> <li>CE4g) Se ha dise\u00f1ado el aspecto de la interfaz de usuario (colores y fuentes entre otros) atendiendo a su legibilidad.</li> <li>CE4h) Se ha verificado que los mensajes generados por la aplicaci\u00f3n son adecuados en extensi\u00f3n y claridad.</li> <li>CE4i) Se han realizado pruebas para evaluar la usabilidad y accesibilidad de la aplicaci\u00f3n.</li> </ul>"},{"location":"RRAA_CCEE/#ra5-crea-informes-evaluando-y-utilizando-herramientas-graficas","title":"RA5. Crea informes evaluando y utilizando herramientas gr\u00e1ficas.","text":"<ul> <li>CE5a) Se ha establecido la estructura del informe.</li> <li>CE5b) Se han generado informes b\u00e1sicos a partir de diferentes fuentes de datos mediante asistentes.</li> <li>CE5c) Se han establecido filtros sobre los valores a presentar en los informes.</li> <li>CE5d) Se han incluido valores calculados, recuentos y totales.</li> <li>CE5e) Se han incluido gr\u00e1ficos generados a partir de los datos.</li> <li>CE5f) Se han utilizado herramientas para generar el c\u00f3digo correspondiente a los informes de una aplicaci\u00f3n.</li> <li>CE5g) Se ha modificado el c\u00f3digo correspondiente a los informes.</li> <li>CE5h) Se ha desarrollado una aplicaci\u00f3n que incluye informes incrustados.</li> </ul>"},{"location":"RRAA_CCEE/#ra6-documenta-aplicaciones-seleccionando-y-utilizando-herramientas-especificas","title":"RA6. Documenta aplicaciones seleccionando y utilizando herramientas espec\u00edficas.","text":"<ul> <li>CE6a) Se han identificado sistemas de generaci\u00f3n de ayudas.</li> <li>CE6b) Se han generado ayudas en los formatos habituales.</li> <li>CE6c) Se han generado ayudas sensibles al contexto.</li> <li>CE6d) Se ha documentado la estructura de la informaci\u00f3n persistente.</li> <li>CE6e) Se ha confeccionado el manual de usuario y la gu\u00eda de referencia.</li> <li>CE6f) Se han confeccionado los manuales de instalaci\u00f3n, configuraci\u00f3n y administraci\u00f3n.</li> <li>CE6g) Se han confeccionado tutoriales.</li> </ul>"},{"location":"RRAA_CCEE/#ra7-prepara-aplicaciones-para-su-distribucion-evaluando-y-utilizando-herramientas-especificas","title":"RA7. Prepara aplicaciones para su distribuci\u00f3n evaluando y utilizando herramientas espec\u00edficas.","text":"<ul> <li>CE7a) Se han empaquetado los componentes que requiere la aplicaci\u00f3n.</li> <li>CE7b) Se ha personalizado el asistente de instalaci\u00f3n.</li> <li>CE7c) Se han generado paquetes de instalaci\u00f3n utilizando el entorno de desarrollo.</li> <li>CE7d) Se han generado paquetes de instalaci\u00f3n utilizando herramientas externas.</li> <li>CE7e) Se han firmado digitalmente las aplicaciones para su distribuci\u00f3n.</li> <li>CE7f) Se han generado paquetes instalables en modo desatendido.</li> <li>CE7g) Se ha preparado el paquete de instalaci\u00f3n para que la aplicaci\u00f3n pueda ser correctamente desinstalada.</li> <li>CE7h) Se ha preparado la aplicaci\u00f3n para ser distribuida a trav\u00e9s de diferentes canales de distribuci\u00f3n.</li> </ul>"},{"location":"RRAA_CCEE/#ra8-evalua-el-funcionamiento-de-aplicaciones-disenando-y-ejecutando-pruebas","title":"RA8. Eval\u00faa el funcionamiento de aplicaciones dise\u00f1ando y ejecutando pruebas.","text":"<ul> <li>CE8a) Se ha establecido una estrategia de pruebas.</li> <li>CE8b) Se han realizado pruebas de integraci\u00f3n de los distintos elementos.</li> <li>CE8c) Se han realizado pruebas de regresi\u00f3n.</li> <li>CE8d) Se han realizado pruebas de volumen y estr\u00e9s.</li> <li>CE8e) Se han realizado pruebas de seguridad.</li> <li>CE8f) Se han realizado pruebas de uso de recursos por parte de la aplicaci\u00f3n.</li> <li>CE8g) Se ha documentado la estrategia de pruebas y los resultados obtenidos.</li> </ul>"},{"location":"entorno/","title":"\ud83d\udd27 Entorno de trabajo","text":"<p>En este curso utilizaremos las siguientes tecnolog\u00edas:</p> <ul> <li>Repositorios de Git alojados en GitHub para el seguimiento y entrega de las pr\u00e1cticas y proyectos.</li> <li>Visual Studio Code como editor de c\u00f3digo.<ul> <li>Alternativamente se puede utilizar VSCodium que es una versi\u00f3n de c\u00f3digo abierto de VSCode.</li> </ul> </li> <li>Node.js como entorno de ejecuci\u00f3n.<ul> <li>nvm para la gesti\u00f3n de versiones de Node.js en el aula de inform\u00e1tica.</li> </ul> </li> <li>Electron para el desarrollo de aplicaciones de escritorio multiplataforma.</li> <li>Angular para el desarrollo de interfaces gr\u00e1ficas.</li> <li>TypeScript como lenguaje de programaci\u00f3n principal.</li> </ul>"},{"location":"entorno/#visual-studio-code","title":"Visual Studio Code","text":"<p>Para la instalaci\u00f3n de VSCode, descargar el paquete de instalaci\u00f3n que corresponda al sistema operativo de la p\u00e1gina de Visual Studio Code y realizar la instalaci\u00f3n t\u00edpica.</p>"},{"location":"entorno/#version-portable","title":"Versi\u00f3n portable","text":"<p>Si no se dispone de permisos de administrador para instalar software, se puede utilizar la versi\u00f3n portable de VSCode.</p> <p>En la p\u00e1gina oficial de descargas disponemos de empaquetados <code>.zip</code> para MS Windows y <code>.tar.gz</code> para Linux.</p> <p>S\u00f3lo hay que descargar el archivo, descomprimir y ejecutar el archivo <code>code</code>.</p>"},{"location":"entorno/#nodejs-npm-y-nvm","title":"<code>Node.js</code> <code>npm</code> y <code>nvm</code>","text":"<p>npm es el gestor de paquetes de Node.js. Para instalarlo se debe seguir la gu\u00eda en la p\u00e1gina de nodejs.org.</p>"},{"location":"entorno/#instalacion-en-el-perfil-local-de-usuario-para-sistemas-linux","title":"Instalaci\u00f3n en el perfil local de usuario para sistemas Linux","text":"<p>Alternativamente, npm se puede instalar en el perfil local del usuario, para ello utilizaremos nvm que es un gestor de versiones de node que nos permitir\u00e1 utilizar la versi\u00f3n que escojamos nvm-sh</p> <p>Para instalar nvm necesitamos ejecutar el siguiente comando, aunque es recomendable consultar la documentaci\u00f3n de nvm para comprobar que no haya cambiado:</p> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash\n</code></pre> <p>wget</p> <p>Si no se dispone de <code>curl</code>, se puede utilizar <code>wget</code>:</p> <pre><code>wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash\n</code></pre> <p>Cuando termine la instalaci\u00f3n de nvm, tendremos que abrir un nuevo terminal para que reconozca la ruta del ejecutable y proceder a instalar la \u00faltima versi\u00f3n LTS de Node.js de la siguiente forma:</p> <pre><code>nvm install --lts\n</code></pre>"},{"location":"entorno/#git-github-y-github-classroom","title":"Git, GitHub y GitHub Classroom","text":"<ul> <li>Git es un sistema de control de versiones usado com\u00fanmente para c\u00f3digo fuente.</li> <li>GitHub es una plataforma de desarrollo colaborativo que utiliza Git y que nos permitir\u00e1 subir nuestro c\u00f3digo a la nube.</li> <li>GitHub Classroom es una herramienta que nos permitir\u00e1 recibir las tareas y ejercicios de la asignatura.</li> </ul> <p>Por lo tanto ser\u00e1 necesario:</p> <ul> <li> <p>Si no tenemos cuenta en GitHub, Crear una cuenta de GitHub utilizando la cuenta de correo corporativa de la GVA (usuario@alu.edu.gva).</p> <ul> <li>Utiliza el mismo nombre de usuario para la cuenta GitHub.</li> </ul> <p>Ejemplo: Para la cuenta corporativa es <code>jacsanvil@alu.edu.gva</code> el usuario de GitHub debe ser <code>jacsanvil</code></p> </li> <li> <p>Instalar Git</p> <p>Si no est\u00e1s familiarizado en c\u00f3mo funciona git, se recomienda leer la Gu\u00eda de Git. </p> </li> <li> <p>Para tareas sencillas, se recomienda el gestor integrado de Visual Studio Code.</p> </li> <li>Para tareas m\u00e1s complejas, se recomienda utilizar la herramienta de l\u00ednea de comandos de Git o un cliente gr\u00e1fico como GitHub Desktop.</li> </ul>"},{"location":"ud01_intro/","title":"UD1: Introducci\u00f3n","text":"<ul> <li>1.1 - Introducci\u00f3n a Electron</li> <li>1.2 - Primer proyecto con Electron<ul> <li>1.2.1 - \u270d\ufe0f Actividad: Primera aplicaci\u00f3n con Angular y Electron</li> </ul> </li> <li>1.3 - Interfaz gr\u00e1fica de usuario (GUI)</li> <li>1.4 - Trabajar con Angular y Electron<ul> <li>1.4.1 - \u270d\ufe0f Actividad: Proyecto base Angular + Electron</li> </ul> </li> </ul>"},{"location":"ud01_intro/01_electron_intro/","title":"1.1 Introducci\u00f3n a Electron","text":"<ul> <li>Principales frameworks para aplicaciones multiplataforma<ul> <li>Tabla Comparativa de Frameworks de Desarrollo Multiplataforma</li> </ul> </li> <li>Requisitos<ul> <li>Conocimientos previos</li> <li>Herramientas necesarias<ul> <li>Editor de c\u00f3digo</li> <li>L\u00ednea de comandos</li> <li>Git y GitHub</li> </ul> </li> <li>Node.js y npm</li> </ul> </li> <li>Electron reloader</li> </ul>"},{"location":"ud01_intro/01_electron_intro/#principales-frameworks-para-aplicaciones-multiplataforma","title":"Principales frameworks para aplicaciones multiplataforma","text":"<p>Existen varios frameworks para el desarrollo de aplicaciones multiplataforma, cada uno con sus propias caracter\u00edsticas, ventajas y desventajas. A continuaci\u00f3n se presenta una tabla comparativa de los m\u00e1s populares:</p>"},{"location":"ud01_intro/01_electron_intro/#tabla-comparativa-de-frameworks-de-desarrollo-multiplataforma","title":"Tabla Comparativa de Frameworks de Desarrollo Multiplataforma","text":"Caracter\u00edstica Electron Flutter Compose Multiplatform React Native Ionic Plataformas de destino Windows, macOS, Linux iOS, Android, Web, Desktop iOS, Android, Desktop iOS, Android iOS, Android, Web Lenguaje de Programaci\u00f3n HTML, CSS, JavaScript Dart Kotlin JavaScript / TypeScript HTML, CSS, JavaScript Rendimiento Bueno (Chromium) Excelente (widgets propios) Excelente (c\u00f3digo nativo) Muy bueno (c\u00f3digo nativo) Bueno (WebView) Curva de Aprendizaje Baja para desarrolladores web Moderada Baja para desarrolladores Kotlin Baja para desarrolladores web Baja para desarrolladores web Empresa Desarrolladora GitHub Google JetBrains Meta Drifty Co. Ejemplos de Apps Famosas VS Code, Discord, Slack Google Pay, Alibaba, BMW JetBrains, Intuit Instagram, Facebook, Airbnb MarketWatch, Sworkit Tipo de App De escritorio Nativa Nativa Nativa H\u00edbrida/PWA Ecosistema y Comunidad Muy grande y activa En crecimiento r\u00e1pido y muy activa En r\u00e1pido crecimiento Enorme, muy activa Grande y activa Coste Gratuito y de c\u00f3digo abierto Gratuito y de c\u00f3digo abierto Gratuito y de c\u00f3digo abierto Gratuito y de c\u00f3digo abierto Gratuito y de c\u00f3digo abierto <p>En este curso nos centraremos en el desarrollo con Electron debido a su facilidad de uso y su capacidad para crear aplicaciones de escritorio multiplataforma con tecnolog\u00edas web familiares.</p>"},{"location":"ud01_intro/01_electron_intro/#requisitos","title":"Requisitos","text":"<p>Electron es un framework para crear aplicaciones de escritorio usando JavaScript, HTML y CSS. Incorpora Chromium y Node.js en un \u00fanico archivo binario. Permite crear aplicaciones multiplataforma que funcionan en Windows, macOS y Linux con una \u00fanica base com\u00fan de c\u00f3digo JavaScript.</p>"},{"location":"ud01_intro/01_electron_intro/#conocimientos-previos","title":"Conocimientos previos","text":"<p>Electron es una capa de envoltorio nativa para aplicaciones web y se ejecuta en un entorno Node.js. Se asume que el alumnado ha adquirido los conocimientos b\u00e1sicos de desarrollo web vistos en el m\u00f3dulo de primer curso de DAM \"Lenguajes de marcas y sistemas de gesti\u00f3n de informaci\u00f3n\" (LMSGI). Como apoyo se recomendan los siguientes recursos:</p> <ul> <li>Aprende desarrollo web (MDN Web Docs)</li> <li>Introducci\u00f3n a Node.js</li> </ul>"},{"location":"ud01_intro/01_electron_intro/#herramientas-necesarias","title":"Herramientas necesarias","text":""},{"location":"ud01_intro/01_electron_intro/#editor-de-codigo","title":"Editor de c\u00f3digo","text":"<p>Es necesario un editor de texto para escribir el c\u00f3digo, lo m\u00e1s recomendado es el uso de un IDE (Entorno de Desarrollo Integrado). Se recomienda el uso de Visual Studio Code, al ser uno de los m\u00e1s utilizados en el mundo del desarrollo, con ls integraci\u00f3n de m\u00faltiples herramientas que permiten agilizar el trabajo, como el control de versiones git, el terminal integrado de l\u00ednea de comandos o el depurador, entre muchas otras.</p>"},{"location":"ud01_intro/01_electron_intro/#linea-de-comandos","title":"L\u00ednea de comandos","text":"<p>A lo largo del curso se requerir\u00e1 el uso de varias interfaces de l\u00ednea de comandos (CLIs). Se pueden teclear estos comandos v\u00eda terminal:</p> <ul> <li>Windows: Command Prompt, PowerShell, Terminal</li> <li>macOS: Terminal</li> <li>Linux: var\u00eda dependiendo de la distribuci\u00f3n (ej: Terminal GNOME, Konsole)</li> </ul> <p>La mayor\u00eda de los editores de c\u00f3digo tambi\u00e9n vienen con una terminal integrada.</p>"},{"location":"ud01_intro/01_electron_intro/#git-y-github","title":"Git y GitHub","text":"<p>Git es un sistema de control de versiones usado com\u00fanmente para c\u00f3digo fuente, y GitHub es una plataforma de desarrollo colaborativa construida adem\u00e1s de ella. Aunque ninguno de los dos es estrictamente necesario para construir una aplicaci\u00f3n Electron usaremos GitHub para realizar las entregas. Por lo tanto ser\u00e1 necesario:</p> <ul> <li> <p>Crear una cuenta de GitHub utilizando la cuenta de correo corporativa de la GVA (usuario@alu.edu.gva).</p> <ul> <li>Utiliza el mismo nombre de usuario para la cuenta GitHub.</li> </ul> <p>Ejemplo: Para la cuenta corporativa es <code>jacsanvil@alu.edu.gva</code> el usuario de GitHub debe ser <code>jacsanvil</code></p> </li> <li> <p>Instalar Git</p> <p>Si no est\u00e1s familiarizado en como funciona git, se recomienda leer la Gu\u00eda de Git. </p> </li> <li> <p>Se puede utilizar <code>git</code> mediante la terminal o la interfaz gr\u00e1fica de GitHub Desktop.</p> </li> <li>Para tareas sencillas, se recomienda el gestor integrado de Visual Studio Code.</li> </ul>"},{"location":"ud01_intro/01_electron_intro/#nodejs-y-npm","title":"Node.js y npm","text":"<p>Para comenzar a desarrollar una aplicaci\u00f3n Electron es necesario instalar Node.js y el gestor de paquetes npm. Es recomendable utilizar la \u00faltima versi\u00f3n con soporte a largo plazo (LTS).</p> <p>Para comprobar que Node.js se ha instalado correctamente, se puede usar la opci\u00f3n <code>-v</code> cuando en los comandos <code>node</code> y <code>npm</code>. Estos deben imprimir las versiones instaladas.</p> Terminal<pre><code>$ node -v\nv22.19.0\n$ npm -v\n10.9.3\n</code></pre> <p>NOTA</p> <p>Aunque es necesario tener Node.js instalado localmente para desarrollar un proyecto en Electron, el ejecutable final, viene empaquetado con su propio Node.js. Esto significa que los usuarios finales no necesitan instalar Node.js como requisito para ejecutar la aplicaci\u00f3n.</p>"},{"location":"ud01_intro/01_electron_intro/#electron-reloader","title":"Electron reloader","text":"<p>Para que los cambios en el c\u00f3digo se reflejen en la aplicaci\u00f3n, se puede utilizar el paquete electron-reloader que se instala como dependencia de desarrollo.</p> Terminal<pre><code>$ npm install --save-dev electron-reloader\n</code></pre> <p>Despu\u00e9s, en el archivo <code>main.js</code> se a\u00f1ade el siguiente c\u00f3digo:</p> main.js<pre><code>const { app, BrowserWindow } = require('electron')\n\ntry {\n    require('electron-reloader')(module, {\n        debug: true,\n        watchRenderer: true\n    })\n} catch(_) {}\n\n// ...\n</code></pre> <p>Ahora, cuando lancemos la aplicaci\u00f3n con <code>npm start</code> se recargar\u00e1 autom\u00e1ticamente cuando se guarden los cambios en el c\u00f3digo.</p>"},{"location":"ud01_intro/021_actividad/","title":"1.2.1 \u270d\ufe0f Actividad: Preparar el entorno y crear la primera aplicaci\u00f3n en Electron","text":"<p>Para realizar la actividad se debe seguir los siguientes pasos:</p> <ol> <li> <p>Acepta la invitaci\u00f3n a la actividad en GitHub Classroom: https://classroom.github.com/a/FU7tJcIi</p> <ul> <li>Selecciona tu correo corporativo del listado.</li> <li>Acepta la actividad.</li> </ul> <p>Warning</p> <p>Debes utilizar tu cuenta corporativa de la GVA</p> <p>Con esto lo que se consigue es crear un repositorio remoto donde se subir\u00e1 el c\u00f3digo de la actividad.</p> </li> <li> <p>Copia la URL del repositorio creado.</p> Ejemplo de URL del repositorio<pre><code>https://github.com/DAM-DIN-25/act1-electron-intro-jsanvil\n</code></pre> </li> <li> <p>Clona el repositorio en tu m\u00e1quina local</p> <p>Puedes utilizar VS Code para clonar el repositorio o la terminal con el comando:</p> Clonar el repositorio<pre><code>git clone &lt;url-repositorio&gt;\n</code></pre> </li> <li> <p>Sigue los pasos del punto 1.2 Creando la primera aplicaci\u00f3n en Electron para configurar el entorno de desarrollo y crear un proyecto Electron.</p> <p>\ud83d\udea8\ud83d\udea8\ud83d\udea8 .gitignore \ud83d\udea8\ud83d\udea8\ud83d\udea8</p> <p>No olvides a\u00f1adir el archivo <code>.gitignore</code> en la ra\u00edz del proyecto para que no se suban los archivos innecesarios al repositorio.</p> <p>Ejemplo de archivo <code>.gitignore</code></p> </li> <li> <p>Realiza los cambios necesarios en el c\u00f3digo para que la aplicaci\u00f3n muestre un mensaje de bienvenida personalizado.</p> </li> <li> <p>Realiza un commit con los cambios realizados y sube el c\u00f3digo al repositorio remoto.</p> Terminal<pre><code>git add .\ngit commit -m \"Actividad finalizada\"\ngit push\n</code></pre> <p>Warning</p> <p>Es posible que solicite configuraci\u00f3n extra antes de hacer el primer commit</p> Terminal<pre><code>git config --global user.name \"Nombre Apellido\"\ngit config --global user.email \"user@alu.edu.gva.es\"\n</code></pre> </li> <li> <p>Comprueba que los cambios se han subido correctamente al repositorio remoto.</p> </li> </ol>"},{"location":"ud01_intro/02_electron_firstapp/","title":"1.2 Creando la primera aplicaci\u00f3n en Electron","text":"<ul> <li>Objetivos</li> <li>Iniciando el proyecto con <code>npm</code></li> <li>\ud83d\udea8 Agregando <code>.gitignore</code> \ud83d\udea8</li> <li>Ejecutar una aplicaci\u00f3n Electron</li> <li>Cargar una html en un <code>BrowserWindow</code></li> <li>Importando m\u00f3dulos</li> <li>Escribir una funci\u00f3n reutilizable para instanciar ventanas</li> <li>Llamar a su funci\u00f3n cuando la aplicaci\u00f3n est\u00e9 lista</li> <li>Administrar el ciclo de vida de la ventana de la aplicaci\u00f3n</li> <li>Salir de la aplicaci\u00f3n cuando todas las ventanas est\u00e9n cerradas (Windows y Linux)</li> <li>Abrir una ventana si no hay ninguna abierta (macOS)</li> <li>C\u00f3digo final</li> <li>Depurando en VS Code</li> <li>Resumen</li> <li>Referencia</li> </ul>"},{"location":"ud01_intro/02_electron_firstapp/#objetivos","title":"Objetivos","text":"<p>En esta parte se ense\u00f1ar\u00e1 a configurar un proyecto Electron y escribir una aplicaci\u00f3n inicial sencilla. Al final de esta secci\u00f3n, se podr\u00e1 ejecutar una aplicaci\u00f3n Electron en modo de desarrollo desde el terminal.</p>"},{"location":"ud01_intro/02_electron_firstapp/#iniciando-el-proyecto-con-npm","title":"Iniciando el proyecto con <code>npm</code>","text":"<p>Las aplicaciones Electron se organizan usando npm, con el archivo <code>package.json</code> como punto de entrada. Comienza creando una carpeta e inicializando un paquete npm dentro de ella con el comando <code>npm init</code>.</p> Terminal<pre><code>mkdir my-electron-app\ncd my-electron-app\nnpm init\n</code></pre> <p>Este comando pedir\u00e1 que configures algunos atributos del <code>package.json</code>. Hay algunas reglas que seguir en esta gu\u00eda:</p> <ul> <li>El punto de entrada de la aplicaci\u00f3n debe ser el archivo <code>main.js</code>.</li> <li>\"author\", \"license\" y \"description\" pueden tener cualquier valor, pero ser\u00e1n necesarios para el empaquetado m\u00e1s adelante.</li> <li>Se puede aceptar la configuraci\u00f3n por defecto, normalmente indicada entre par\u00e9ntesis, pulsando la tecla <code>intro</code>.</li> </ul> Ejemplo del proceso de configuraci\u00f3n de `package.json` con `npm init`<pre><code>This utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help init` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install &lt;pkg&gt;` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (my-electron-app) \nversion: (1.0.0) \ndescription: \nentry point: (index.js) main.js\ntest command: \ngit repository: \nkeywords: \nauthor: \nlicense: (ISC) \nAbout to write to /home/jacinto/Documentos/Curso2025/din/my-electron-app/package.json:\n\n{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n\nIs this OK? (yes) \n</code></pre> <p>Ahora, instala Electron en las <code>devDependencies</code> de la aplicaci\u00f3n, que es la lista de dependencias de paquetes externos de desarrollo exclusivo que no se requieren en producci\u00f3n.</p> Terminal<pre><code>npm install electron --save-dev\n</code></pre> <p>\u00bfPor qu\u00e9 Electron es una dependencia?</p> <p>Esto puede parecer poco intuitivo ya que el c\u00f3digo de producci\u00f3n ejecuta API de Electron. Sin embargo, las aplicaciones finales incluir\u00e1n el binario de Electron, eliminando la necesidad de especificarlo como una dependencia de la aplicaci\u00f3n binaria final a distribuir en producci\u00f3n.</p> <p>El archivo <code>package.json</code> deber\u00eda verse as\u00ed despu\u00e9s de inicializar su paquete e instalar Electron. </p> package.json<pre><code>{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"electron\": \"^38.1.0\"\n  }\n}\n</code></pre> <p>Tambi\u00e9n debe aparecer la carpeta <code>node_modules/</code> que contiene el ejecutable de Electron, as\u00ed como un archivo de bloqueo <code>package-lock.json</code> que especifica las versiones de dependencia exactas que se instalar\u00e1n.</p> <p>Instrucciones de instalaci\u00f3n avanzadas</p> <p>Si la instalaci\u00f3n de Electron falla, se puede consultar la documentaci\u00f3n de Instalaci\u00f3n avanzada para obtener instrucciones sobre c\u00f3mo descargar mirrors, servidores proxy y soluci\u00f3n de problemas.</p>"},{"location":"ud01_intro/02_electron_firstapp/#agregando-gitignore","title":"\ud83d\udea8 Agregando <code>.gitignore</code> \ud83d\udea8","text":"<p>El archivo <code>.gitignore</code> especifica qu\u00e9 archivos y directorios evitar en el seguimiento con Git. Se debe colocar una copia de la plantilla GitHub's Node.js gitignore template en la carpeta ra\u00edz de tu proyecto para evitar el seguimiento la carpeta <code>node_modules/</code> del proyecto.</p> <p>ADVERTENCIA</p> <p>No se debe subir la carpeta <code>node_modules/</code> al repositorio remoto, ya que puede ser muy grande y no es necesario. Las dependencias se pueden reinstalar en cualquier momento utilizando el archivo <code>package.json</code> y el comando <code>npm install</code>.</p> <p>Todos los a\u00f1os muchos alumnos omiten este paso y terminan subiendo la carpeta <code>node_modules/</code> a su repositorio, provocando que muchas veces el repositorio supere el l\u00edmite de tama\u00f1o permitido por GitHub y no puedan entregar sus pr\u00e1cticas.</p>"},{"location":"ud01_intro/02_electron_firstapp/#ejecutar-una-aplicacion-electron","title":"Ejecutar una aplicaci\u00f3n Electron","text":"<p>El script <code>main</code> que definiste en <code>package.json</code> es el punto de inicio de cualquier aplicaci\u00f3n. Este script controla el proceso principal, que se ejecuta en un entorno Node.js y es responsable de controlar el ciclo de vida de su aplicaci\u00f3n, mostrar interfaces nativas, realizar operaciones con privilegios y administrar los procesos de renderizado.</p> <p>Antes de crear la primera aplicaci\u00f3n, primero utilizar\u00e1 un script para asegurar de que el punto de entrada del proceso principal est\u00e1 configurado correctamente. Crea un archivo <code>main.js</code> en la carpeta ra\u00edz del proyecto con una sola l\u00ednea de c\u00f3digo:</p> main.js<pre><code>console.log('Hola desde Electron \ud83d\udc4b')\n</code></pre> <p>Debido a que el proceso principal es un int\u00e9rprete de Node.js, se puede ejecutar c\u00f3digo con el comando <code>electron</code>. Para ejecutar este script, agrega <code>\"electron .\"</code> al comando de inicio (<code>\"start\"</code>) en el atributo <code>\"scripts\"</code> del archivo <code>paquete.json</code>. Este comando le indicar\u00e1 al ejecutable que busque el script principal en el directorio actual y lo ejecute en modo de desarrollo.</p> package.json<pre><code>{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"electron\": \"^38.1.0\"\n  }\n}\n</code></pre> Terminal<pre><code>npm run start\n</code></pre> <p>El terminal deber\u00eda mostrar \"Hola desde Electron \ud83d\udc4b.\" \u00a1Enhorabuena, has ejecutado tu primera l\u00ednea de c\u00f3digo en Electron! A continuaci\u00f3n, veremos como crear interfaces de usuario en HTML y cargarlas en una ventana nativa.</p>"},{"location":"ud01_intro/02_electron_firstapp/#cargar-una-html-en-un-browserwindow","title":"Cargar una html en un <code>BrowserWindow</code>","text":"<p>Cada ventana muestra una p\u00e1gina web que se puede cargar desde un archivo HTML local o desde una direcci\u00f3n web remota. Para este ejemplo, se cargar\u00e1 desde un archivo local. Comienza creando una p\u00e1gina web b\u00e1sica en un archivo <code>index.html</code> en la carpeta ra\u00edz del proyecto:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta\n      http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    /&gt;\n    &lt;meta\n      http-equiv=\"X-Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    /&gt;\n    &lt;title&gt;Hello from Electron renderer!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello from Electron renderer!&lt;/h1&gt;\n    &lt;p&gt;\ud83d\udc4b&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ahora que tenemos una p\u00e1gina web, se puede cargar en una ventana del navegador Electron. Reemplaza el contenido del archivo <code>main.js</code> con el siguiente c\u00f3digo. Se explicar\u00e1 cada bloque resaltado por separado.</p> main.js<pre><code>const { app, BrowserWindow } = require('electron')\n\nconst createWindow = () =&gt; {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() =&gt; {\n  createWindow()\n})\n</code></pre>"},{"location":"ud01_intro/02_electron_firstapp/#importando-modulos","title":"Importando m\u00f3dulos","text":"main.js (l\u00ednea 1)<pre><code>const { app, BrowserWindow } = require('electron')\n\n...\n</code></pre> <p>En la primera l\u00ednea, estamos importando dos m\u00f3dulos Electron con la sintaxis del m\u00f3dulo CommonJS:</p> <ul> <li><code>app</code>, controla el ciclo de vida del evento de su aplicaci\u00f3n.</li> <li><code>BrowserWindow</code>, que crea y administra ventanas de aplicaciones.</li> </ul> <p>Convenciones de capitalizaci\u00f3n de nombres</p> <p>Es posible que hayas notado la diferencia de may\u00fasculas entre app y los m\u00f3dulos de BrowserWindow. Electron sigue las convenciones t\u00edpicas de JavaScript, donde los m\u00f3dulos se indican en PascalCase y son constructores de clases instanciables (por ejemplo, <code>BrowserWindow</code>, <code>Tray</code>, <code>Notification</code>) mientras que los m\u00f3dulos camelCase no son instanciables (por ejemplo, <code>app</code>, <code>ipcRenderer</code>, <code>webContents</code>).</p>"},{"location":"ud01_intro/02_electron_firstapp/#escribir-una-funcion-reutilizable-para-instanciar-ventanas","title":"Escribir una funci\u00f3n reutilizable para instanciar ventanas","text":"<p>La funci\u00f3n <code>createWindow()</code> carga la p\u00e1gina web en una nueva instancia de <code>BrowserWindow</code>:</p> main.js (l\u00edneas 3-10)<pre><code>...\nconst createWindow = () =&gt; {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n...\n</code></pre>"},{"location":"ud01_intro/02_electron_firstapp/#llamar-a-su-funcion-cuando-la-aplicacion-este-lista","title":"Llamar a su funci\u00f3n cuando la aplicaci\u00f3n est\u00e9 lista","text":"main.js (l\u00edneas 12-14)<pre><code>...\napp.whenReady().then(() =&gt; {\n  createWindow()\n})\n</code></pre> <p>Muchos de los m\u00f3dulos principales de son emisores de eventos de Node.js que se adhieren a la arquitectura asincr\u00f3nica basada en eventos de Node. El m\u00f3dulo de aplicaci\u00f3n es uno de estos emisores.</p> <p><code>BrowserWindows</code> solo se puede crear despu\u00e9s de que se del evento <code>ready</code> del m\u00f3dulo de la aplicaci\u00f3n. Puede esperar este evento utilizando la API <code>app.whenReady()</code> y llamando a <code>createWindow()</code> una vez que se cumpla su promesa.</p> <p>evento <code>ready</code></p> <p>Normalmente los eventos de Node.js se escuchan utilizando la funci\u00f3n <code>.on</code> de un emisor.</p> <pre><code>app.on('ready', () =&gt; {\n// app.whenReady().then(() =&gt; {\ncreateWindow()\n})\n</code></pre> <p>Sin embargo, Electron expone <code>app.whenReady()</code> para evitar problemas al escuchar directamente el evento <code>ready</code>.</p> <p>En este momento, al ejecutar el comando de <code>start</code> de la aplicaci\u00f3n deber\u00eda abrir con una ventana que muestre la p\u00e1gina web.</p> <p>Cada p\u00e1gina web que la aplicaci\u00f3n muestra en una ventana se ejecutar\u00e1 en un proceso separado llamado renderer process (proceso de renderizado) (o simplemente renderer para abreviar). Los procesos de renderizado tienen acceso a las mismas API de JavaScript y herramientas que se utilizan para el desarrollo web front-end t\u00edpico, como el uso de webpack para agrupar y minimizar su c\u00f3digo o React para crear interfaces de usuario.</p>"},{"location":"ud01_intro/02_electron_firstapp/#administrar-el-ciclo-de-vida-de-la-ventana-de-la-aplicacion","title":"Administrar el ciclo de vida de la ventana de la aplicaci\u00f3n","text":"<p>Las ventanas de las aplicaciones se comportan de manera diferente en cada sistema operativo. En lugar de hacer cumplir estas convenciones de forma predeterminada, Electron ofrece la opci\u00f3n de implementarlas en el c\u00f3digo de su aplicaci\u00f3n si desea seguirlas. Puede implementar convenciones b\u00e1sicas de ventana escuchando los eventos emitidos por la aplicaci\u00f3n y los m\u00f3dulos de <code>BrowserWindow</code>.</p> <p>Flujo de control espec\u00edfico</p> <p>La verificaci\u00f3n con la variable <code>process.platform</code> de Node puede ayudar a ejecutar c\u00f3digo de manera condicional en ciertas plataformas. Se debe tener en cuenta que s\u00f3lo hay tres plataformas posibles en las que Electron puede ejecutarse: <code>win32</code> (Windows), <code>linux</code> (Linux) y <code>darwin</code> (macOS).</p>"},{"location":"ud01_intro/02_electron_firstapp/#salir-de-la-aplicacion-cuando-todas-las-ventanas-esten-cerradas-windows-y-linux","title":"Salir de la aplicaci\u00f3n cuando todas las ventanas est\u00e9n cerradas (Windows y Linux)","text":"<p>En Windows y Linux, cerrar todas las ventanas generalmente cerrar\u00e1 una aplicaci\u00f3n por completo. Para implementar este patr\u00f3n en Electron, se debe escuchar el evento <code>window-all-closed</code> del m\u00f3dulo de la aplicaci\u00f3n y llama a <code>app.quit()</code> para salir de la aplicaci\u00f3n si el usuario no est\u00e1 en macOS.</p> <pre><code>app.on('window-all-closed', () =&gt; {\n  if (process.platform !== 'darwin') app.quit()\n})\n</code></pre>"},{"location":"ud01_intro/02_electron_firstapp/#abrir-una-ventana-si-no-hay-ninguna-abierta-macos","title":"Abrir una ventana si no hay ninguna abierta (macOS)","text":"<p>Por el contrario, el comportamiento por defecto de las aplicaciones de macOS es que generalmente contin\u00faan ejecut\u00e1ndose incluso sin ninguna ventana abierta. Activar la aplicaci\u00f3n cuando no hay ventanas disponibles deber\u00eda abrir una nueva.</p> <p>Para implementar esta caracter\u00edstica, escuchar el evento <code>activate</code> del m\u00f3dulo de la aplicaci\u00f3n y llamar a su m\u00e9todo <code>createWindow()</code> existente si no hay ning\u00fan <code>BrowserWindows</code> abierto.</p> <p>Debido a que las ventanas no se pueden crear antes del evento <code>ready</code>, solo deber\u00eda escuchar el evento <code>activate</code> despu\u00e9s de inicializar la aplicaci\u00f3n. Haz esto escuchando solo los eventos de activaci\u00f3n dentro del <code>callback</code> de <code>whenReady()</code>.</p> <pre><code>app.whenReady().then(() =&gt; {\n  createWindow()\n\n  app.on('activate', () =&gt; {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n</code></pre>"},{"location":"ud01_intro/02_electron_firstapp/#codigo-final","title":"C\u00f3digo final","text":"main.js<pre><code>const { app, BrowserWindow } = require('electron')\n\nconst createWindow = () =&gt; {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() =&gt; {\n  createWindow()\n\n  app.on('activate', () =&gt; {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on('window-all-closed', () =&gt; {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta\n      http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\" /&gt;\n    &lt;meta\n      http-equiv=\"X-Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\" /&gt;\n    &lt;title&gt;Hola desde Electron renderer!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hola desde Electron renderer!&lt;/h1&gt;\n    &lt;p&gt;\ud83d\udc4b&lt;/p&gt;\n    &lt;p id=\"info\"&gt;&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ud01_intro/02_electron_firstapp/#depurando-en-vs-code","title":"Depurando en VS Code","text":"<p>Para depurar la aplicaci\u00f3n usando VS Code, se debe adjuntar VS code para ambos procesos tanto el principal y los renderizadores. Aqu\u00ed un ejemplo de configuraci\u00f3n. Crea un nuevo archivo <code>launch.json</code> en el directorio <code>.vscode\\</code> del proyecto:</p> .vscode/launch.json<pre><code>{\n  \"version\": \"0.2.0\",\n  \"compounds\": [\n    {\n      \"name\": \"Main + renderer\",\n      \"configurations\": [\"Main\", \"Renderer\"],\n      \"stopAll\": true\n    }\n  ],\n  \"configurations\": [\n    {\n      \"name\": \"Renderer\",\n      \"port\": 9222,\n      \"request\": \"attach\",\n      \"type\": \"chrome\",\n      \"webRoot\": \"${workspaceFolder}\"\n    },\n    {\n      \"name\": \"Main\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron\",\n      \"windows\": {\n        \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron.cmd\"\n      },\n      \"args\": [\".\", \"--remote-debugging-port=9222\"],\n      \"outputCapture\": \"std\",\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n</code></pre> <p>La opci\u00f3n \"Main + renderer\" aparecer\u00e1 cuando selecciones \"Run and debug\" en la barra lateral, lo que le permitir\u00e1 establecer puntos de interrupci\u00f3n e inspeccionar todas las variables, entre otras cosas, tanto en el proceso principal como en el renderizador.</p> <p>Lo que hemos hecho en el archivo <code>launch.json</code> es crear 3 configuraciones:</p> <ul> <li><code>Main</code> se utiliza para iniciar el proceso principal y tambi\u00e9n exponer el puerto 9222 para la depuraci\u00f3n remota (<code>--remote-debugging-port=9222</code>). Este es el puerto que usaremos para adjuntar el depurador del <code>Renderer</code>. Debido a que el proceso principal es un proceso de Node.js, el tipo se establece en <code>node</code>.</li> <li><code>Renderer</code> se utiliza para depurar el proceso de renderizado. Debido a que el proceso principal es el que crea el proceso, tenemos que adjuntarlo (<code>\"request\": \"attach\"</code>) en lugar de crear uno nuevo. El proceso de renderizado es web, por lo que el depurador que debemos usar es <code>chrome</code>.</li> <li><code>Main + renderer</code> es una tarea compuesta que ejecuta las anteriores simult\u00e1neamente.</li> </ul> <p>ADVERTENCIA</p> <p>Debido a que estamos adjuntando un proceso en <code>Renderer</code>, es posible que las primeras l\u00edneas de su c\u00f3digo se omitan ya que el depurador no habr\u00e1 tenido tiempo suficiente para conectarse antes de que se ejecuten. Puede solucionar este problema actualizando la p\u00e1gina o estableciendo un tiempo de espera antes de ejecutar el c\u00f3digo en modo de desarrollo.</p>"},{"location":"ud01_intro/02_electron_firstapp/#resumen","title":"Resumen","text":"<p>Las aplicaciones Electron se configuran mediante paquetes npm. El ejecutable debe instalarse en las <code>devDependencies</code> de su proyecto y puede ejecutarse en modo de desarrollo usando un script en el archivo <code>package.json</code>.</p> <p>El ejecutable toma el punto de entrada de JavaScript que se encuentra en la propiedad <code>main</code> de <code>paquete.json</code>. Este archivo controla el proceso principal, que ejecuta una instancia de Node.js y es responsable del ciclo de vida de su aplicaci\u00f3n, mostrando interfaces nativas, realizando operaciones privilegiadas y administrando procesos de renderizado.</p> <p>Los procesos de renderizado (o renderers) son responsables de mostrar contenido gr\u00e1fico. Puedes cargar una p\u00e1gina web en un renderer apunt\u00e1ndola a una direcci\u00f3n web o a un archivo HTML local. Los renderers se comportan de manera muy similar a las p\u00e1ginas web normales y tienen acceso a las mismas API web.</p>"},{"location":"ud01_intro/02_electron_firstapp/#referencia","title":"Referencia","text":"<ul> <li>Electron: Building your First App</li> </ul>"},{"location":"ud01_intro/03_gui/","title":"1.3 Interfaz gr\u00e1fica de usuario (GUI)","text":"<p>Una interfaz gr\u00e1fica de usuario (GUI - Graphical User Interface) es el espacio visual y funcional donde el usuario interact\u00faa con un sistema inform\u00e1tico, una aplicaci\u00f3n o un dispositivo. Est\u00e1 formada por elementos visuales como ventanas, botones, men\u00fas, iconos, formularios, textos y otros componentes gr\u00e1ficos que permiten que el usuario controle y reciba informaci\u00f3n del sistema de manera sencilla, intuitiva y eficiente.</p>"},{"location":"ud01_intro/03_gui/#caracteristicas-principales","title":"Caracter\u00edsticas principales:","text":"<ul> <li>Visual. Utiliza elementos gr\u00e1ficos para representar funciones y acciones.</li> <li>Interactiva: permite la interacci\u00f3n mediante dispositivos de entrada como el rat\u00f3n, teclado, pantalla t\u00e1ctil, etc.</li> <li> <p>Intuitiva: dise\u00f1ada para ser f\u00e1cil de entender y usar, incluso para usuarios sin experiencia t\u00e9cnica. Basada en met\u00e1foras visuales reconocibles (carpetas, botones, etc.).</p> </li> <li> <p>Ventajas:</p> <ul> <li>Facilita el uso de aplicaciones complejas.</li> <li>Reduce la curva de aprendizaje para nuevos usuarios.</li> <li>Mejora la experiencia del usuario al hacerla m\u00e1s atractiva y accesible.</li> </ul> </li> <li> <p>Desventajas:</p> <ul> <li>Puede consumir m\u00e1s recursos del sistema que las interfaces de l\u00ednea de comandos.</li> <li>Puede ser menos eficiente para usuarios avanzados que prefieren comandos directos.</li> <li>Requiere un dise\u00f1o cuidadoso para evitar confusiones o dificultades de uso.</li> </ul> </li> </ul>"},{"location":"ud01_intro/03_gui/#tipos-de-gui","title":"Tipos de GUI","text":"<ul> <li> <p>Interfaces de escritorio</p> <p>Utilizadas en sistemas operativos de escritorio como Windows, macOS y Linux. Ejemplos incluyen aplicaciones como navegadores web, procesadores de texto y programas de edici\u00f3n gr\u00e1fica.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Ventanas, men\u00fas, barras de herramientas.</li> <li>Uso de rat\u00f3n y teclado para la navegaci\u00f3n.</li> <li>Espacios amplios para mostrar gran cantidad de informaci\u00f3n.</li> <li>Soporte para m\u00faltiples aplicaciones abiertas simult\u00e1neamente.</li> </ul> </li> <li> <p>Interfaces m\u00f3viles</p> <p>Dise\u00f1adas para dispositivos m\u00f3viles como smartphones y tablets. Ejemplos incluyen aplicaciones m\u00f3viles, juegos y herramientas de productividad.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Pantallas t\u00e1ctiles con gestos (deslizar, tocar, pellizcar).</li> <li>Dise\u00f1o adaptativo (responsive) para diferentes tama\u00f1os de pantalla.</li> <li>Uso eficiente del espacio limitado.</li> <li>Integraci\u00f3n con funciones del dispositivo (c\u00e1mara, GPS, etc.).</li> </ul> </li> <li> <p>Interfaces h\u00edbridas (multiplataforma)</p> <p>Combinan elementos de interfaces de escritorio y m\u00f3viles, adapt\u00e1ndose a diferentes dispositivos y contextos de uso. Ejemplos incluyen aplicaciones web progresivas (PWA) y aplicaciones desarrolladas con frameworks como Electron o React Native.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Adaptabilidad a diferentes dispositivos y tama\u00f1os de pantalla.</li> <li>Uso de tecnolog\u00edas web (HTML, CSS, JavaScript).</li> <li>Capacidad para funcionar tanto en navegadores como en entornos nativos.</li> <li>Flexibilidad para actualizar y mantener la aplicaci\u00f3n.</li> <li>Lograr buen rendimiento en diversas plataformas.</li> </ul> </li> <li> <p>Realidad aumentada (AR) y realidad virtual (VR)</p> <p>Interfaces que integran elementos digitales en el entorno real (AR) o crean entornos completamente virtuales (VR). Ejemplos incluyen aplicaciones de AR para dispositivos m\u00f3viles y experiencias de VR con cascos especializados.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Interacci\u00f3n en 3D y entornos inmersivos.</li> <li>Uso de dispositivos especializados (c\u00e1maras, sensores de movimiento, cascos VR, mandos, etc.).</li> <li> <p>Aplicaciones en juegos, educaci\u00f3n, dise\u00f1o y simulaci\u00f3n.</p> </li> <li> <p>Realidad Aumentada (AR):</p> <ul> <li>Superpone elementos digitales en el mundo real, mejorando la percepci\u00f3n del entorno.</li> <li>Ejemplos: aplicaciones de navegaci\u00f3n, juegos como Pok\u00e9mon GO.</li> </ul> </li> <li>Realidad Virtual (VR):<ul> <li>Crea un entorno completamente digital donde el usuario puede interactuar.</li> <li>Usan dispositivos como cascos VR y mandos de control.</li> <li>Ejemplos: simuladores, juegos inmersivos, aplicaciones de entrenamiento.</li> </ul> </li> </ul> </li> <li> <p>Interfaces gesturales</p> <p>Permiten la interacci\u00f3n mediante movimientos y gestos del cuerpo, utilizando tecnolog\u00edas como c\u00e1maras y sensores de movimiento. Ejemplos incluyen sistemas de control por gestos en consolas de videojuegos y dispositivos inteligentes.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Reconocimiento de movimientos y gestos.</li> <li>Uso de c\u00e1maras y sensores para capturar la interacci\u00f3n.</li> <li>Aplicaciones en juegos, control de dispositivos y entornos interactivos.</li> </ul> </li> <li> <p>Interfaces de voz</p> <p>Permiten la interacci\u00f3n mediante comandos de voz, utilizando tecnolog\u00edas de reconocimiento de voz y procesamiento del lenguaje natural. Ejemplos incluyen asistentes virtuales como Siri, Alexa y Google Assistant.</p> <p>Caracter\u00edsticas:</p> <ul> <li>Reconocimiento y procesamiento de comandos de voz.</li> <li>Uso de micr\u00f3fonos y altavoces para la interacci\u00f3n.</li> <li>Aplicaciones en asistentes virtuales, dispositivos inteligentes y sistemas de control por voz.</li> </ul> </li> </ul> <p>Tabla resumen de tipos de GUI:</p> Tipo de GUI Dispositivo habitual Interacci\u00f3n principal Retos y consideraciones Interfaces de escritorio Computadoras de escritorio y port\u00e1tiles Rat\u00f3n y teclado Espacio amplio, multitarea, dise\u00f1o detallado Interfaces m\u00f3viles Smartphones y tablets Pantalla t\u00e1ctil y gestos Espacio limitado, dise\u00f1o adaptativo, eficiencia energ\u00e9tica Interfaces h\u00edbridas Dispositivos variados (PC, m\u00f3viles, tablets) Rat\u00f3n, teclado, pantalla t\u00e1ctil Adaptabilidad, rendimiento, mantenimiento Realidad aumentada (AR) y realidad virtual (VR) Dispositivos especializados (cascos VR, c\u00e1maras AR) Movimiento y gestos, entornos inmersivos Tecnolog\u00eda avanzada, experiencia inmersiva, usabilidad Interfaces gesturales Dispositivos con c\u00e1maras y sensores de movimiento Movimientos y gestos Precisi\u00f3n en el reconocimiento de formas y gestos Interfaces de voz Dispositivos con micr\u00f3fonos y altavoces (smartphones, altavoces inteligentes) Comandos de voz Precisi\u00f3n en el reconocimiento de voz"},{"location":"ud01_intro/03_gui/#usabilidad-y-experiencia-de-usuario-ux","title":"Usabilidad y experiencia de usuario (UX)","text":"<p>La usabilidad se refiere a la facilidad con la que los usuarios pueden aprender a usar una interfaz, realizar tareas y alcanzar sus objetivos de manera eficiente y satisfactoria.</p> <p>Principios b\u00e1sicos de usabilidad:</p> <ul> <li>Facilidad de aprendizaje: La interfaz debe ser intuitiva y f\u00e1cil de entender para nuevos usuarios.</li> <li>Eficiencia: Los usuarios deben poder realizar tareas r\u00e1pidamente una vez que han aprendido a usar la interfaz.</li> <li>Memorabilidad: Los usuarios deben poder recordar c\u00f3mo usar la interfaz despu\u00e9s de un per\u00edodo de inactividad.</li> <li>Prevenci\u00f3n de errores: La interfaz debe minimizar la posibilidad de errores y proporcionar mecanismos para recuperarse de ellos.</li> <li>Satisfacci\u00f3n del usuario: La experiencia de uso debe ser agradable y satisfactoria.</li> </ul>"},{"location":"ud01_intro/03_gui/#diferencia-entre-usabilidad-y-experiencia-de-usuario-ux","title":"Diferencia entre usabilidad y experiencia de usuario (UX)","text":"<ul> <li>Usabilidad: Se centra en la facilidad de uso y la eficiencia de la interfaz. Eval\u00faa c\u00f3mo los usuarios interact\u00faan con la interfaz para completar tareas espec\u00edficas.</li> <li>Experiencia de usuario (UX): Es un concepto m\u00e1s amplio que incluye la usabilidad, pero tambi\u00e9n abarca aspectos emocionales y psicol\u00f3gicos de la interacci\u00f3n del usuario con el sistema. La UX considera factores como la satisfacci\u00f3n, la percepci\u00f3n de valor, la est\u00e9tica y el contexto de uso.</li> </ul>"},{"location":"ud01_intro/03_gui/#euristicas-de-usabilidad-de-jakob-nielsen","title":"Euristicas de usabilidad de Jakob Nielsen","text":"<p>En 1994, Jakob Nielsen, un experto en usabilidad, desarroll\u00f3 un conjunto de 10 heur\u00edsticas o principios generales para el dise\u00f1o de interfaces de usuario. Estas heur\u00edsticas son pautas que ayudan a evaluar y mejorar la usabilidad de una interfaz.</p> <p>Fuente: 10 Usability Heuristics for User Interface Design</p> <ol> <li> <p>Visibilidad del estado del sistema \ud83d\udfe2</p> <p>La interfaz debe mantener a los usuarios informados sobre lo que est\u00e1 ocurriendo, proporcionando retroalimentaci\u00f3n adecuada en un tiempo razonable.</p> <p>Ejemplos:</p> <ul> <li>Mostrar una barra de progreso durante la carga de un archivo.</li> <li>Indicar el estado de conexi\u00f3n a internet.</li> <li>Mostrar notificaciones de acciones completadas.</li> </ul> </li> <li> <p>Relaci\u00f3n entre el sistema y el mundo real \ud83c\udf0e</p> <p>La interfaz debe utilizar un lenguaje y conceptos familiares para los usuarios, siguiendo convenciones del mundo real.</p> <p>Ejemplos:</p> <ul> <li>Usar iconos reconocibles (carpeta para archivos, papelera para eliminar).</li> <li>Utilizar t\u00e9rminos comunes en lugar de jerga t\u00e9cnica.</li> <li>Organizar la informaci\u00f3n de manera l\u00f3gica y coherente.</li> </ul> </li> <li> <p>Control y libertad del usuario \ud83d\udd79\ufe0f</p> <p>Los usuarios deben tener la capacidad de deshacer y rehacer acciones f\u00e1cilmente, as\u00ed como salir de situaciones no deseadas.</p> <p>Ejemplos:</p> <ul> <li>Confirmar acciones destructivas (eliminar, cerrar sin guardar).</li> <li>Ofrecer opciones claras para salir de men\u00fas o pantallas.</li> <li>Permitir cancelar operaciones en curso.</li> <li>Proporcionar botones de \"Deshacer\" y \"Rehacer\".</li> </ul> </li> <li> <p>Consistencia y est\u00e1ndares \ud83d\udccf</p> <p>La interfaz debe seguir convenciones y est\u00e1ndares establecidos para que los usuarios no tengan que preguntarse si diferentes palabras, situaciones o acciones significan lo mismo.</p> <p>Ejemplos:</p> <ul> <li>Usar colores y estilos consistentes en toda la aplicaci\u00f3n.</li> <li>Mantener la misma ubicaci\u00f3n para botones y men\u00fas en diferentes pantallas.</li> <li>Seguir las pautas de dise\u00f1o de la plataforma (iOS, Android, web).</li> </ul> </li> <li> <p>Prevenci\u00f3n de errores \ud83d\udeab</p> <p>La interfaz debe dise\u00f1arse para evitar que los usuarios cometan errores, proporcionando opciones claras y confirmaciones cuando sea necesario.</p> <p>Ejemplos:</p> <ul> <li>Validar entradas de usuario antes de procesarlas.</li> <li>Deshabilitar botones que no son aplicables en un contexto espec\u00edfico.</li> <li>Proporcionar mensajes de error claros y espec\u00edficos.</li> <li>Ofrecer sugerencias para corregir errores.</li> <li>Dise\u00f1ar formularios con campos obligatorios y opcionales claramente diferenciados.</li> </ul> </li> <li> <p>Reconocimiento en lugar de recuerdo \ud83d\udc41\ufe0f</p> <p>La interfaz debe minimizar la carga de memoria del usuario, haciendo visibles los objetos, acciones y opciones disponibles.</p> <p>Ejemplos:</p> <ul> <li>Utilizar iconos y etiquetas claras para identificar funciones.</li> <li>Proporcionar accesos directos visuales para funciones frecuentes.</li> <li>Mostrar men\u00fas y opciones en lugar de requerir que los usuarios recuerden comandos.</li> <li>Incluir descripciones emergentes (tooltips) para iconos y botones.</li> </ul> </li> <li> <p>Flexibilidad y eficiencia de uso \u26a1</p> <p>La interfaz debe ser flexible y permitir a los usuarios personalizar su experiencia, as\u00ed como ofrecer atajos para usuarios avanzados.</p> <p>Ejemplos:</p> <ul> <li>Incluir opciones de configuraci\u00f3n para adaptar la interfaz a las preferencias del usuario.</li> <li>Ofrecer atajos de teclado para funciones comunes.</li> <li>Proporcionar diferentes modos de visualizaci\u00f3n (lista, cuadr\u00edcula).</li> <li>Permitir la personalizaci\u00f3n de la barra de herramientas.</li> </ul> </li> <li> <p>Dise\u00f1o est\u00e9tico y minimalista \ud83c\udfa8</p> <p>La interfaz debe evitar la sobrecarga de informaci\u00f3n y elementos visuales innecesarios, centr\u00e1ndose en lo esencial.</p> <p>Ejemplos:</p> <ul> <li>Utilizar un dise\u00f1o limpio y ordenado.</li> <li>Eliminar elementos que no aportan valor a la experiencia del usuario.</li> <li>Priorizar la informaci\u00f3n m\u00e1s relevante.</li> <li>Evitar el uso excesivo de colores y fuentes.</li> </ul> </li> <li> <p>Ayudar a los usuarios a reconocer, diagnosticar y recuperarse de errores \ud83d\udee0\ufe0f</p> <p>Los mensajes de error deben ser claros, espec\u00edficos y ofrecer soluciones para que los usuarios puedan corregir el problema.</p> <p>Ejemplos:</p> <ul> <li>Proporcionar mensajes de error que expliquen el problema y c\u00f3mo solucionarlo.</li> <li>Ofrecer enlaces a recursos de ayuda o soporte.</li> <li>Incluir opciones para contactar con el soporte t\u00e9cnico.</li> <li>Mostrar ejemplos de entradas correctas cuando se produce un error en un formulario.</li> </ul> </li> <li> <p>Ayuda y documentaci\u00f3n \ud83d\udcda</p> <p>Aunque la interfaz debe ser usable sin necesidad de documentaci\u00f3n, es importante proporcionar ayuda y recursos para los usuarios que lo necesiten.</p> <p>Ejemplos:</p> <ul> <li>Incluir una secci\u00f3n de ayuda accesible desde la interfaz.</li> <li>Proporcionar tutoriales o gu\u00edas para nuevas funciones.</li> <li>Ofrecer soporte en l\u00ednea o chat para resolver dudas.</li> <li>Incluir preguntas frecuentes (FAQ) y videos explicativos.</li> </ul> </li> </ol>"},{"location":"ud01_intro/03_gui/#principios-basicos-de-accesibilidad","title":"Principios b\u00e1sicos de accesibilidad","text":"<p>La accesibilidad en el dise\u00f1o de interfaces gr\u00e1ficas de usuario (GUI) se refiere a la creaci\u00f3n de interfaces que puedan ser utilizadas por personas con diversas capacidades y discapacidades. A continuaci\u00f3n, se presentan algunos principios b\u00e1sicos para lograr una GUI accesible:</p> <ul> <li> <p>Contraste de colores</p> <p>Utilizar combinaciones de colores con suficiente contraste para que el texto y los elementos visuales sean f\u00e1cilmente legibles para personas con discapacidades visuales, como daltonismo.</p> </li> <li> <p>Navegaci\u00f3n</p> <p>Asegurarse de que la navegaci\u00f3n sea clara y consistente, utilizando men\u00fas, botones y enlaces f\u00e1cilmente identificables. Proporcionar m\u00faltiples formas de navegar por la interfaz (rat\u00f3n, teclado, voz).</p> </li> <li> <p>Dise\u00f1o inclusivo</p> <p>Evitar el uso de elementos que dependan exclusivamente de un solo sentido (como el color) para transmitir informaci\u00f3n. Utilizar texto alternativo para im\u00e1genes y descripciones para elementos visuales.</p> </li> <li> <p>Tama\u00f1o de fuentes</p> <p>Utilizar tama\u00f1os de fuente legibles y permitir a los usuarios ajustar el tama\u00f1o del texto seg\u00fan sus necesidades.</p> </li> <li> <p>Compatibilidad con tecnolog\u00edas de asistencia</p> <p>Asegurarse de que la GUI sea compatible con tecnolog\u00edas de asistencia, como lectores de pantalla y dispositivos de entrada alternativos.</p> <ul> <li>Proporcionar etiquetas claras y descriptivas para todos los elementos interactivos.</li> <li>Utilizar roles ARIA (Accessible Rich Internet Applications) para mejorar la accesibilidad de componentes din\u00e1micos.</li> <li>Asegurar que el orden de tabulaci\u00f3n sea l\u00f3gico y predecible.</li> <li>Proporcionar retroalimentaci\u00f3n audible para acciones importantes.</li> </ul> </li> </ul>"},{"location":"ud01_intro/041_actividad/","title":"1.4.1 \u270d\ufe0f Actividad: Proyecto base Angular + Electron","text":"<p>Para realizar la actividad se debe seguir los siguientes pasos:</p> <ol> <li> <p>Acepta la invitaci\u00f3n a la actividad en GitHub Classroom: https://classroom.github.com/a/iPZCjSpm</p> <ul> <li>Selecciona tu usuario del listado.</li> <li>Acepta la actividad.</li> </ul> </li> <li> <p>Clona el repositorio en tu m\u00e1quina local</p> <p>Puedes utilizar VS Code para clonar el repositorio o la terminal con el comando:</p> Clonar el repositorio<pre><code>git clone &lt;url-repositorio&gt;\n</code></pre> </li> <li> <p>Sigue los pasos del punto 1.4 Trabajar con Angular y Electron</p> </li> <li> <p>Prueba la aplicaci\u00f3n tanto en desarrollo como generando el paquete ejecutable.</p> <p>Entrega en Aules</p> <p>Adem\u00e1s de la entrega del c\u00f3digo en el repositorio, deber\u00e1s entregar el empaquetado de la aplicaci\u00f3n en formato <code>.zip</code> en la plataforma Aules.</p> </li> <li> <p>Realiza un commit con los cambios realizados y sube el c\u00f3digo al repositorio remoto.</p> </li> <li> <p>Comprueba que los cambios se han subido correctamente al repositorio remoto.</p> </li> </ol>"},{"location":"ud01_intro/04_angular_electron/","title":"1.4 Trabajar con Angular y Electron","text":""},{"location":"ud01_intro/04_angular_electron/#introduccion-a-angular","title":"Introducci\u00f3n a Angular","text":"<p>Angular es un framework de desarrollo web de c\u00f3digo abierto mantenido por Google. Est\u00e1 dise\u00f1ado para facilitar la creaci\u00f3n de aplicaciones web din\u00e1micas y de una sola p\u00e1gina (SPA) mediante el uso de componentes reutilizables, inyecci\u00f3n de dependencias y un sistema de enlace de datos (data binding) bidireccional.</p>"},{"location":"ud01_intro/04_angular_electron/#principales-caracteristicas","title":"Principales Caracter\u00edsticas:","text":"<ul> <li>TypeScript: Utiliza TypeScript, un superconjunto de JavaScript que a\u00f1ade tipado est\u00e1tico y caracter\u00edsticas avanzadas de programaci\u00f3n orientada a objetos.</li> <li>Estructura: Proporciona una estructura clara y organizada para el desarrollo de aplicaciones, lo que facilita la escalabilidad y el mantenimiento del c\u00f3digo.</li> <li>Componentes: Arquitectura basada en componentes, donde cada componente representa una parte espec\u00edfica de la interfaz de usuario y su l\u00f3gica asociada.</li> <li>Plantillas: Utiliza plantillas HTML para definir la estructura de la interfaz de usuario, junto con directivas y data binding para interactuar con el modelo de datos.</li> <li>Data Binding Bidireccional: Permite la sincronizaci\u00f3n autom\u00e1tica entre el modelo de datos y la vista, lo que simplifica la actualizaci\u00f3n de la interfaz de usuario.</li> <li>Directivas: Proporciona directivas que permiten manipular el DOM de manera declarativa, facilitando la creaci\u00f3n de componentes personalizados y la reutilizaci\u00f3n de c\u00f3digo.</li> <li>Servicios: Utiliza servicios para encapsular la l\u00f3gica de negocio y compartir datos entre componentes.</li> <li>Routing: Incluye un sistema de routing que permite la navegaci\u00f3n entre diferentes vistas y componentes dentro de una aplicaci\u00f3n de una sola p\u00e1gina.</li> <li>Inyecci\u00f3n de Dependencias: Facilita la gesti\u00f3n de dependencias mediante un sistema de inyecci\u00f3n de dependencias, lo que mejora la modularidad y la reutilizaci\u00f3n del c\u00f3digo.</li> <li>CLI (Command Line Interface): Angular CLI es una herramienta de l\u00ednea de comandos que facilita la creaci\u00f3n, desarrollo y despliegue de aplicaciones Angular.</li> <li>Formularios: Proporciona soporte robusto para la creaci\u00f3n y validaci\u00f3n de formularios, tanto reactivos como basados en plantillas.</li> <li>Testing: Incluye herramientas integradas para pruebas unitarias y de extremo a extremo, lo que facilita la garant\u00eda de calidad del c\u00f3digo.</li> <li>Internacionalizaci\u00f3n: Soporta la creaci\u00f3n de aplicaciones multiling\u00fces mediante herramientas de internacionalizaci\u00f3n.</li> </ul>"},{"location":"ud01_intro/04_angular_electron/#creacion-de-una-aplicacion-angular","title":"Creaci\u00f3n de una Aplicaci\u00f3n Angular","text":"<p>En este curso utilizaremos la \u00faltima versi\u00f3n estable de Angular (en el momento de escribir este documento, la versi\u00f3n es la 20).</p>"},{"location":"ud01_intro/04_angular_electron/#nodejs","title":"Node.js","text":"<p>En la documentaci\u00f3n oficial de Angular se indican los requisitos previos necesarios para trabajar con Angular https://angular.dev/reference/versions.</p> <p>Para Angular 20 se debe instalar la ultima versi\u00f3n estable (LTS) de Node.js (22.19.0 en el momento de escribir este documento).</p> <p>Se recomienda el uso de nvm (Node Version Manager) para gestionar las versiones de Node.js.</p>"},{"location":"ud01_intro/04_angular_electron/#instalacion-de-angular-cli","title":"Instalaci\u00f3n de Angular CLI","text":"<p>Desde un terminal de l\u00ednea de comandos, ejecuta el siguiente comando para instalar la interfaz de l\u00ednea de comandos de Angular (Angular CLI):</p> <pre><code>npm install -g @angular/cli\n</code></pre> <p>Comprobar la instalaci\u00f3n:</p> <p>Con el comando <code>ng version</code> se puede comprobar la versi\u00f3n instalada de Angular CLI y otras dependencias relacionadas.</p> Comprobar la versi\u00f3n instalada<pre><code>ng version\n\n     _                      _                 ____ _     ___\n    / \\   _ __   __ _ _   _| | __ _ _ __     / ___| |   |_ _|\n   /\u25b3 \\ | '_ \\ / _` | | | | |/ _` | '__|   | |   | |    | |\n  / ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\n /_/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|\n                |___/\n\n\n\nAngular CLI: 20.3.2\nNode: 22.19.0\nPackage Manager: npm 10.9.3\nOS: linux x64\n\n\nAngular: &lt;error&gt;\n\nPackage                      Version\n------------------------------------\n@angular-devkit/architect    0.2002.2 (cli-only)\n@angular-devkit/core         20.2.2 (cli-only)\n@angular-devkit/schematics   20.2.2 (cli-only)\n@schematics/angular          20.2.2 (cli-only)\n</code></pre> <p>Nota</p> <p>En el ejemplo anterior, se muestra <code>Angular: &lt;error&gt;</code>, esto es porque no estamos dentro de un proyecto Angular. Una vez creado el proyecto, se mostrar\u00e1 la versi\u00f3n del proyecto en el que estemos trabajando junto con las versiones de las dependencias.</p>"},{"location":"ud01_intro/04_angular_electron/#crear-un-nuevo-proyecto","title":"Crear un nuevo proyecto","text":"<p>Referencia: https://angular.dev/installation</p> <p>Desde un terminal, ejecuta el comando de Angular CLI <code>ng new</code> para crear un nuevo proyecto.</p> Ejemplo de creaci\u00f3n de un proyecto<pre><code>ng new my-angular-app\n? Which stylesheet format would you like to use? (Use arrow keys)\n\u276f CSS             [ https://developer.mozilla.org/docs/Web/CSS                     ]  &lt;-- Selecciona el formato de hojas de estilo\n  Sass (SCSS)     [ https://sass-lang.com/documentation/syntax#scss                ]\n  Sass (Indented) [ https://sass-lang.com/documentation/syntax#the-indented-syntax ]\n  Less            [ http://lesscss.org                                             ]\n? Do you want to enable Server-Side Rendering (SSR) and Static Site Generation (SSG/Prerendering)? (y/N) &lt;-- NO\n? Do you want to create a 'zoneless' application without zone.js? (y/N) &lt;----------------------------------- NO\n? Which AI tools do you want to configure with Angular best practices? https://angular.dev/ai/develop-with-ai (Press &lt;space&gt; to select, &lt;a&gt; to\ntoggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)\n\u276f\u25c9 None\n \u25ef Claude                 [ https://docs.anthropic.com/en/docs/claude-code/memory                                 ]\n \u25ef Cursor                 [ https://docs.cursor.com/en/context/rules                                              ]\n \u25ef Gemini                 [ https://ai.google.dev/gemini-api/docs                                                 ]\n \u25ef GitHub Copilot         [ https://code.visualstudio.com/docs/copilot/copilot-customization#_custom-instructions ]\n \u25ef JetBrains AI Assistant [ https://www.jetbrains.com/help/junie/customize-guidelines.html                        ]\n \u25ef Windsurf               [ https://docs.windsurf.com/windsurf/cascade/memories#rules                             ]\n\nCREATE my-angular-app/README.md (1475 bytes)\nCREATE my-angular-app/.editorconfig (314 bytes)\nCREATE my-angular-app/.gitignore (587 bytes)\nCREATE my-angular-app/angular.json (2420 bytes)\nCREATE my-angular-app/package.json (1137 bytes)\nCREATE my-angular-app/tsconfig.json (992 bytes)\nCREATE my-angular-app/tsconfig.app.json (429 bytes)\nCREATE my-angular-app/tsconfig.spec.json (408 bytes)\nCREATE my-angular-app/.vscode/extensions.json (130 bytes)\nCREATE my-angular-app/.vscode/launch.json (470 bytes)\nCREATE my-angular-app/.vscode/tasks.json (938 bytes)\nCREATE my-angular-app/src/main.ts (222 bytes)\nCREATE my-angular-app/src/index.html (298 bytes)\nCREATE my-angular-app/src/styles.css (80 bytes)\nCREATE my-angular-app/src/app/app.css (0 bytes)\nCREATE my-angular-app/src/app/app.spec.ts (672 bytes)\nCREATE my-angular-app/src/app/app.ts (296 bytes)\nCREATE my-angular-app/src/app/app.html (20122 bytes)\nCREATE my-angular-app/src/app/app.config.ts (400 bytes)\nCREATE my-angular-app/src/app/app.routes.ts (77 bytes)\nCREATE my-angular-app/public/favicon.ico (15086 bytes)\n\n\u2714 Packages installed successfully.\n    Successfully initialized git.\n</code></pre>"},{"location":"ud01_intro/04_angular_electron/#ejecutar-el-proyecto","title":"Ejecutar el proyecto","text":"<p>Para ejecutar el proyecto, navega al directorio del proyecto y utiliza el comando <code>ng serve</code>:</p> Ejemplo de ejecuci\u00f3n de un proyecto<pre><code>cd my-angular-app\nng serve\n\nInitial chunk files | Names         | Raw size\nmain.js             | main          | 47.77 kB | \npolyfills.js        | polyfills     | 95 bytes | \nstyles.css          | styles        | 95 bytes | \n\n                    | Initial total | 47.96 kB\n\nApplication bundle generation complete. [1.390 seconds] - 2025-07-19T09:30:06.389Z\n\nWatch mode enabled. Watching for file changes...\nNOTE: Raw file sizes do not reflect development server per-request transformations.\n  \u279c  Local:   http://localhost:4200/\n  \u279c  press h + enter to show help\n\nh\n\n  Shortcuts\n  press r + enter to force reload browser\n  press u + enter to show server url\n  press o + enter to open in browser\n  press c + enter to clear console\n  press q + enter to quit\n</code></pre> <p>Para ver la aplicaci\u00f3n en funcionamiento, abre un navegador web la url <code>http://localhost:4200/</code>, podemos observar que en el cliente ofrece un atajo de teclado para abrir autom\u00e1ticamente el navegador (<code>o</code> + <code>Enter</code>).</p>"},{"location":"ud01_intro/04_angular_electron/#integracion-de-angular-con-electron","title":"Integraci\u00f3n de Angular con Electron","text":"<p>Como vimos en el apartado anterior, Electron permite crear aplicaciones de escritorio utilizando tecnolog\u00edas web como HTML, CSS y JavaScript. Al combinar Electron con Angular, podemos aprovechar las capacidades de ambos para desarrollar aplicaciones de escritorio.</p>"},{"location":"ud01_intro/04_angular_electron/#pasos-para-integrar-angular-con-electron","title":"Pasos para integrar Angular con Electron","text":"<ol> <li> <p>Crear una aplicaci\u00f3n Angular</p> <p>Si no tienes una aplicaci\u00f3n Angular existente, crea una nueva utilizando el comando <code>ng new my-angular-app</code>.</p> <p>Nota</p> <p>Si ya tienes una aplicaci\u00f3n Angular, puedes omitir este paso.</p> </li> <li> <p>Instalar Electron</p> <p>Navega al directorio de tu proyecto y ejecuta el siguiente comando para instalar Electron como una dependencia de desarrollo:</p> <pre><code>npm install electron --save-dev\n</code></pre> </li> <li> <p>Configurar el archivo principal de Electron</p> <p>Crea un archivo llamado <code>main.js</code> en la ra\u00edz de tu proyecto con el siguiente contenido:</p> main.js<pre><code>const { app, BrowserWindow, screen } = require('electron');\nconst path = require('path');\n\nprocess.on('uncaughtException', (error) =&gt; {\n    console.error('Uncaught Exception:', error);\n});\n\nfunction createWindow() {\n    const size = screen.getPrimaryDisplay().workAreaSize;\n\n    const win = new BrowserWindow({\n        webPreferences: {\n            width: 800,\n            height: 600,\n            contextIsolation: true,\n            nodeIntegration: false,\n        }\n    });\n\n    // Cargar la aplicaci\u00f3n Angular dependiendo del entorno\n\n    if (!app.isPackaged) {\n\n        // En desarrollo, cargar desde el servidor de desarrollo de Angular\n\n        win.loadURL('http://localhost:4200');\n        win.webContents.openDevTools();\n\n    } else {\n\n        // En producci\u00f3n, cargar el archivo index.html generado por Angular\n\n        const indexPath = path.join(__dirname, 'dist', 'angularapp', 'browser', 'index.html');\n        console.log('Loading file:', indexPath);\n        win.loadFile(indexPath);\n\n        win.webContents.on('did-fail-load', () =&gt; {\n            // Reintentar cargar el archivo en caso de fallo, esto previene errores en algunas plataformas\n            console.log('Retrying to load file:', indexPath);\n            win.loadFile(indexPath);\n        });\n    }\n\n    // Maximizar la ventana y mostrarla\n    win.maximize();\n    win.show();\n}\n\napp.whenReady().then(createWindow);\n\napp.on('window-all-closed', () =&gt; {\n    if (process.platform !== 'darwin') app.quit();\n});\n\napp.on('activate', () =&gt; {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow();\n});\n</code></pre> </li> <li> <p>Instalar dependencias adicionales</p> <p>Para facilitar la gesti\u00f3n de tareas y la construcci\u00f3n de la aplicaci\u00f3n, instala las siguientes dependencias adicionales:</p> Instalaci\u00f3n de dependencias adicionales<pre><code>npm install electron-builder wait-on npm-run-all --save-dev\n</code></pre> <ul> <li><code>electron-builder</code>: Herramienta para empaquetar y distribuir aplicaciones Electron.</li> <li><code>wait-on</code>: Utilidad para esperar a que un recurso est\u00e9 disponible (\u00fatil para esperar a que el servidor de desarrollo de Angular est\u00e9 listo).</li> <li><code>npm-run-all</code>: Herramienta para ejecutar m\u00faltiples scripts de npm en paralelo o secuencialmente.</li> </ul> </li> <li> <p>Actualizar el archivo <code>package.json</code></p> <p>Modifica el archivo <code>package.json</code> para agregar scripts que faciliten la ejecuci\u00f3n de la aplicaci\u00f3n en modo desarrollo y producci\u00f3n. A\u00f1ade l\u00edneas resaltadas en el siguiente ejemplo:</p> package.json<pre><code>{\n    \"name\": \"my-angular-app\",\n    \"version\": \"0.0.0\",\n    \"main\": \"main.js\",\n\n    \"build\": {\n        \"appId\": \"org.iescamp.din.my-angular-app\",\n        \"productName\": \"Mi Aplicaci\u00f3n Angular\",\n        \"files\": [\n            \"dist/angularapp/**/*\",\n            \"main.js\",\n            \"package.json\"\n        ]\n    },\n    \"win\": {\n        \"target\": [\n            \"nsis\"\n        ]\n    },\n    \"linux\": {\n        \"target\": [\n            \"AppImage\"\n        ]\n    },\n\n    \"scripts\": {\n        \"ng\": \"ng\",\n        \"start\": \"ng serve\",\n        \"build\": \"ng build\",\n        \"watch\": \"ng build --watch --configuration development\",\n        \"test\": \"ng test\",\n        \"dev\": \"npm-run-all --parallel electron start\",\n        \"electron\": \"wait-on tcp:4200 &amp;&amp; ng build --base-href ./ &amp;&amp; electron .\",\n        \"package\": \"electron-builder\",\n        \"package-win\": \"electron-builder --win\",\n        \"package-linux\": \"electron-builder --linux\"\n    },\n\n    \"prettier\": {\n        \"printWidth\": 100,\n        \"singleQuote\": true,\n        \"overrides\": [\n        {\n            \"files\": \"*.html\",\n            \"options\": {\n                \"parser\": \"angular\"\n            }\n        }\n        ]\n    },\n    \"private\": true,\n    \"dependencies\": {\n        \"@angular/common\": \"^20.2.0\",\n        \"@angular/compiler\": \"^20.2.0\",\n        \"@angular/core\": \"^20.2.0\",\n        \"@angular/forms\": \"^20.2.0\",\n        \"@angular/platform-browser\": \"^20.2.0\",\n        \"@angular/router\": \"^20.2.0\",\n        \"rxjs\": \"~7.8.0\",\n        \"tslib\": \"^2.3.0\",\n        \"zone.js\": \"~0.15.0\"\n    },\n    \"devDependencies\": {\n        \"@angular/build\": \"^20.2.2\",\n        \"@angular/cli\": \"^20.2.2\",\n        \"@angular/compiler-cli\": \"^20.2.0\",\n        \"@types/jasmine\": \"~5.1.0\",\n        \"electron\": \"^38.0.0\",\n        \"electron-builder\": \"^26.0.12\",\n        \"jasmine-core\": \"~5.9.0\",\n        \"karma\": \"~6.4.0\",\n        \"karma-chrome-launcher\": \"~3.2.0\",\n        \"karma-coverage\": \"~2.2.0\",\n        \"karma-jasmine\": \"~5.1.0\",\n        \"karma-jasmine-html-reporter\": \"~2.1.0\",\n        \"npm-run-all\": \"^4.1.5\",\n        \"typescript\": \"~5.9.2\",\n        \"wait-on\": \"^8.0.4\"\n    }\n}\n</code></pre> </li> <li> <p>Modifica el archivo <code>src/index.html</code></p> <p>Cambia la l\u00ednea del <code>&lt;base href=\"/\"&gt;</code> por <code>&lt;base href=\"./\"&gt;</code> para que las rutas relativas funcionen correctamente en el entorno de Electron.</p> src/index.html<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;My Aplicaci\u00f3n Angular&lt;/title&gt;\n    &lt;base href=\"./\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;app-root&gt;&lt;/app-root&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Ejecutar la aplicaci\u00f3n en modo desarrollo</p> <p>Utiliza el siguiente comando para iniciar la aplicaci\u00f3n en modo desarrollo. Esto iniciar\u00e1 tanto el servidor de desarrollo de Angular como la aplicaci\u00f3n Electron.</p> <pre><code>npm run dev\n</code></pre> <p>Este modo es el que utilizaremos durante el desarrollo de la aplicaci\u00f3n, ya que permite ver los cambios en tiempo real sin necesidad de reconstruir la aplicaci\u00f3n, a no ser que se modifique el archivo <code>main.js</code>, en cuyo caso ser\u00e1 necesario reiniciar la aplicaci\u00f3n Electron.</p> </li> <li> <p>Crear una versi\u00f3n empaquetada</p> <p>Para crear una versi\u00f3n empaquetada de la aplicaci\u00f3n, utiliza uno de los siguientes comandos:</p> <ul> <li>Para crear un paquete para la plataforma actual (Windows, Linux o macOS):</li> </ul> <pre><code>npm run package\n</code></pre> <ul> <li>Para crear un paquete espec\u00edfico para Windows:</li> </ul> <pre><code>npm run package-win\n</code></pre> <ul> <li>Para crear un paquete espec\u00edfico para Linux:</li> </ul> <pre><code>npm run package-linux\n</code></pre> <p>Los archivos empaquetados se encontrar\u00e1n en el directorio <code>dist/</code> dentro del proyecto.</p> </li> </ol>"},{"location":"ud01_intro/_06_visual_design/","title":"1.4 Dise\u00f1o visual y principios de usabilidad","text":""},{"location":"ud01_intro/_06_visual_design/#teoria-de-gestalt","title":"Teor\u00eda de Gestalt","text":"<p>La teor\u00eda de Gestalt es un enfoque psicol\u00f3gico que estudia c\u00f3mo las personas perciben y organizan la informaci\u00f3n visual. En dise\u00f1o de interfaces, esta teor\u00eda es fundamental para crear experiencias de usuario intuitivas y agradables.</p> <p>Referencia: Laws of UX</p> <p>Principios clave:</p> <ul> <li> <p>Proximidad</p> <p>Los elementos que est\u00e1n cerca unos de otros se perciben como relacionados. En dise\u00f1o, agrupar elementos relacionados puede ayudar a los usuarios a entender su funci\u00f3n.</p> <p>Ejemplo:</p> <ul> <li>Agrupar botones de navegaci\u00f3n juntos.</li> <li>Colocar etiquetas cerca de los campos de entrada correspondientes.</li> <li>Usar m\u00e1rgenes y espaciado para separar secciones de contenido.</li> </ul> </li> <li> <p>Semejanza</p> <p>Los elementos que son similares en forma, color o tama\u00f1o se perciben como parte de un mismo grupo. Utilizar estilos consistentes ayuda a los usuarios a identificar funciones similares.</p> <p>Ejemplo:</p> <ul> <li>Usar el mismo color para todos los botones de acci\u00f3n.</li> <li>Mantener un estilo uniforme para los iconos de navegaci\u00f3n.</li> <li>Aplicar la misma tipograf\u00eda para t\u00edtulos y subt\u00edtulos.</li> </ul> </li> <li> <p>Continuidad</p> <p>Los elementos alineados en una l\u00ednea o patrones cont\u00ednuos se perciben como relacionados. Esto puede guiar la mirada del usuario a trav\u00e9s de la interfaz.</p> <p>Ejemplo:</p> <ul> <li>Alinear elementos de un formulario en una columna vertical.</li> </ul> </li> <li> <p>Cierre</p> <p>La mente tiende a completar formas incompletas. Utilizar este principio puede hacer que los dise\u00f1os sean m\u00e1s interesantes y atractivos.</p> <p>Ejemplo:</p> <ul> <li>Carruseles de im\u00e1genes que sugieren continuidad.</li> </ul> </li> <li> <p>Simetr\u00eda</p> <p>Los elementos sim\u00e9tricos se perciben como equilibrados y armoniosos. La simetr\u00eda puede transmitir estabilidad y profesionalismo.</p> <p>Ejemplo:</p> <ul> <li>Dise\u00f1ar interfaces con una estructura sim\u00e9trica.</li> <li>Usar la simetr\u00eda para crear un dise\u00f1o visualmente atractivo.</li> </ul> </li> </ul>"}]}